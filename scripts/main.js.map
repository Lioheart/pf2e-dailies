{"version":3,"file":"main.js","mappings":"mBAAO,IAAI,EAAY,GCQhB,SAASA,EAA2BC,EAAgCC,EAAaC,GACpF,OAAQF,EAAID,QAAQ,EAAWE,IAA0BC,CAC7D,CASO,SAASC,EAAQH,EAAgCC,EAAaG,GACjE,OAAOJ,EAAIG,QAAQ,EAAWF,EAAKG,EACvC,CAEO,SAASC,EAAoCL,GAChD,OAAOA,EAAID,QAAQ,OAAQ,WAC/B,CAEO,SAASO,EAAYN,EAAqBO,GAC7C,OAAOF,EAAYL,KAASO,CAChC,CAEO,SAASC,EAAiBR,EAAqBS,GAClD,MAAMF,EAAWF,EAAYL,GAC7B,QAAOO,GAAWE,EAAKC,SAASH,EACpC,CC9BA,SAASI,EAAyBJ,GAC9B,OAAOK,MAAMC,QAAQN,GACdO,GAAeN,EAAiBM,EAAMP,GACtCO,GAAeT,EAAYS,KAAUP,CAChD,CAEO,SAASQ,EAAwEC,EAAUC,GAC9F,OAAQA,EAAYA,EAAUC,SAAQC,GAAQH,EAAMC,UAAUE,KAAmBH,EAAMI,KAC3F,CAEO,SAASC,EACZL,EACAT,EACAU,GAEA,OAAOF,EAAeC,EAAOC,GAAWK,KAAKX,EAAyBJ,GAC1E,CCpBA,MAAMgB,EAAgBC,OAAOC,GAAG,6DAC1BC,EAAmBF,OAAOC,GAAG,8DAC7BE,EAAqB,IAAIC,OAAOF,EAAkB,MAElDG,EAAeL,OAAOC,GAAG,MAAMF,QAAoBG,SAAwBA,QAAuBH,KAClGO,EAAkBN,OAAOC,GAAG,MAAMF,QAAoBA,KACtDQ,EAAkBP,OAAOC,GAAG,uBAC5BO,EAAkBR,OAAOC,GAAG,uBAC5BQ,EAA2B,IAAIL,OAAO,IAAIG,MAAoBC,IAAkBF,KAAoB,MAEpGI,EAAkC,gFAClCC,EAA+B,IAAIP,OAAO,GAAGI,QAAsBH,KAAgBE,IAAmB,MAYrG,SAASK,EAASC,GAAc,MAAEC,EAAQ,MAAsD,CAAC,GAEpG,GAAoB,iBAATD,EAEP,OADAE,QAAQC,KAAK,4CACN,GAGX,OAAQF,GACJ,KAAK,KACD,OAAOD,EACFI,QAAQR,EAA0B,SAClCS,cACAD,QAAQ,QAAS,IACjBA,QAAQd,EAAoB,KAC5BgB,OACAF,QAAQ,UAAW,KAC5B,IAAK,WAAY,CACb,MAAMG,EAAYR,EAASC,EAAM,CAAEC,MAAO,cAC1C,OAAOM,EAAUC,OAAO,GAAGC,cAAgBF,EAAUG,MAAM,E,CAE/D,IAAK,YACD,OAAOV,EACFI,QAAQP,EAAiC,IACzCO,QAAQ,SAAU,KAClBA,QAAQN,GAA8B,CAACa,EAAMC,IAAqB,IAAVA,EAAcD,EAAKN,cAAgBM,EAAKF,gBAChGL,QAAQ,OAAQ,IACzB,QACI,MAKDS,MAAM,oDAHjB,CChDA,SAASC,EACLC,EACAC,EACAC,EACAC,GAEA,MAAMpC,EAAuB,iBAATkC,EAAoBA,EAAO,OACzCG,EAAuB,iBAATH,EAAoBA,EAAuB,iBAATC,EAAoBA,OAAOG,EAC3EC,EAA4B,kBAATL,EAAqBA,EAAuB,kBAATC,EAAqBA,EAAOC,IAAQ,EAEhGI,GAAGC,cAAcT,OAAOU,EAAST,EAAKI,GAAOrC,EAAM,CAAEuC,aACzD,CCVO,SAASG,KAAYC,GACxB,IAAK7D,EAAKuD,GAAQM,EAElB,OADA7D,EAAM,GAAG,KAAaA,IAClBuD,EAAaO,KAAKC,KAAKC,OAAOhE,EAAKuD,GAChCO,KAAKC,KAAKH,SAAS5D,EAC9B,CAEO,SAASiE,EAAgBjE,GAC5B,OAAO8D,KAAKC,KAAKG,IAAI,GAAG,KAAalE,KAAO,EAChD,CAMO,SAASmE,EAAYC,GACxB,MAAMC,EAAK,IAAIR,IAAuBD,EAAS,GAAGQ,KAAUP,EAAK,KAAMA,EAAK,IAyB5E,OAvBAS,OAAOC,iBAAiBF,EAAI,CACxB9B,KAAM,CACFpC,MAAO,IAAI0D,IDRhB,YAAiBA,GACpB,MAAOV,EAAKC,EAAMC,GAAQQ,EAC1BX,EAAOC,EAAK,UAAWC,EAAMC,EACjC,CCK4Cd,CAAK,GAAG6B,KAAUP,EAAK,KAAMA,EAAK,GAAIA,EAAK,IAC3EW,YAAY,EACZC,cAAc,GAElBC,KAAM,CACFvE,MAAO,IAAI0D,IDRhB,YAAiBA,GACpB,MAAOV,EAAKC,EAAMC,GAAQQ,EAC1BX,EAAOC,EAAK,OAAQC,EAAMC,EAC9B,CCK4CqB,CAAK,GAAGN,KAAUP,EAAK,KAAMA,EAAK,GAAIA,EAAK,IAC3EW,YAAY,EACZC,cAAc,GAElBE,MAAO,CACHxE,MAAO,IAAI0D,IDRhB,YAAkBA,GACrB,MAAOV,EAAKC,EAAMC,GAAQQ,EAC1BX,EAAOC,EAAK,QAASC,EAAMC,EAC/B,CCK4CsB,CAAM,GAAGP,KAAUP,EAAK,KAAMA,EAAK,GAAIA,EAAK,IAC5EW,YAAY,EACZC,cAAc,GAElBP,IAAK,CACD/D,MAAQH,GAAgBiE,EAAgB,GAAGG,KAAUpE,KACrDwE,YAAY,EACZC,cAAc,KAIfJ,CAMX,CClDA,MAAMO,EAAc,iDAEb,SAASC,EAAW9D,GACvB,OAAOK,EAAoDL,EAAO6D,EACtE,CCDO,MAAME,EAAa,CAAC,gBAAiB,eAAgB,kBAAmB,gBAAiB,mBACnFC,EAAwB,qDAExBC,EAAgB,CAEzB,CACI9D,KAAM,YACN+D,SAAU,cACVC,MAAO,CAAC,mDAGZ,CACIhE,KAAM,YACN+D,SAAU,YACVC,MAAO,CACH,6CACAH,EACA,6CACA,6CACA,+CAIR,CACI7D,KAAM,eACN+D,SAAU,MACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,kBACN+D,SAAU,OACVC,MAAO,CACH,iDACA,iDACA,iDACA,6CACA,mDAIR,CACIhE,KAAM,kBACN+D,SAAU,eACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,gBACN+D,SAAU,QACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,cACN+D,SAAU,QACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,eACN+D,SAAU,UACVC,MAAO,CAAC,+CAEZ,CACIhE,KAAM,eACN+D,SAAU,YACVC,MAAO,CAAC,+CAEZ,CACIhE,KAAM,eACN+D,SAAU,WACVC,MAAO,CAAC,+CAEZ,CACIhE,KAAM,eACN+D,SAAU,UACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,gBACN+D,SAAU,cACVC,MAAO,CAAC,+CAEZ,CACIhE,KAAM,gBACN+D,SAAU,QACVC,MAAO,CAAC,mDAGZ,CACIhE,KAAM,oBACN+D,SAAU,cACVC,MAAO,CACH,iDACA,mDAIR,CACIhE,KAAM,eACN+D,SAAU,SACVC,MAAO,CAAC,+CAGZ,CACIhE,KAAM,cACN+D,SAAU,YACVC,MAAO,CACH,6CACA,6CACA,+CAGR,CACIhE,KAAM,cACN+D,SAAU,YACVC,MAAO,CACH,6CACA,6CACA,iDAKN,WAAEC,EAAU,MAAEC,EAAK,YAAEC,EAAW,iBAAEC,EAAgB,gBAAEC,EAAe,MAAEC,GAAU,MACjF,MAAML,EAAa,CAAC,EACdC,EAAqD,IAAIK,IACzDD,EAAoB,GACpBH,EAA0B,GAC1BC,EAA+B,GAC/BC,EAA8B,GAEpC,IAAK,MAAM,KAAErE,EAAI,SAAE+D,EAAQ,MAAEC,KAAWF,EAAe,CACnD,MAAMU,EAASZ,EAAWrE,SAASS,GACnCiE,EAAWF,KAAc,GAEzB,IAAK,IAAIjC,EAAQ,EAAGA,EAAQkC,EAAMS,OAAQ3C,IAAS,CAC/C,MAAM4C,EAAOV,EAAMlC,GACnBmC,EAAWF,GAAUY,KAAKD,GAC1BR,EAAMU,IAAIF,EAAM,CAAE1E,OAAM+D,WAAUjC,UAC9B0C,GAAQF,EAAMK,KAAKD,E,CAI3B,MAAMG,EAAYb,EAAM,GACpBa,EAAUtF,SAAS,iBAAkB6E,EAAiBO,KAAKE,GACtDA,EAAUtF,SAAS,aAAc8E,EAAgBM,KAAKE,GAC1DV,EAAYQ,KAAKE,E,CAG1B,MAAO,CAAEZ,aAAYC,QAAOC,cAAaC,mBAAkBC,kBAAiBC,QAC/E,EA3BoF,GAwC9E,SAASQ,EAAiBf,GAC7B,OAAOE,EAAWF,EACtB,CAMO,SAASgB,EAAWpF,GACvB,OAAON,EAAiBM,EAAM2E,EAClC,CAkCO,SAASU,EACZC,EACAlB,GAEA,MAAwB,iBAAbA,EAA8BkB,EAAOjF,OAAS+D,EAClDA,EAASxE,SAAS0F,EAAOjF,KACpC,CC7NO,MAAMkF,EAAgB,CACzBC,SAAU,QACVC,SAAU,QACVC,YAAa,QAGJC,EAAsBlC,OAAOmC,KAAKL,GAElCM,EAAoB,CAC7B,EAAK,CAAEC,IAAK,KAAMC,OAAQ,CAAC,UAAW,SAAUC,MAAO,oBACvD,EAAK,CAAEF,IAAK,KAAMC,OAAQ,CAAC,WAAYC,MAAO,oBAC9C,EAAK,CAAEF,IAAK,KAAMC,OAAQ,GAAIC,MAAO,oBACrC,EAAK,CAAEF,IAAK,MAAOC,OAAQ,CAAC,SAAUC,MAAO,sBAGpCC,EAAgB,CAAC,UAAW,YAAa,QAAS,OAAQ,WAE1DC,EAAe,CAAC,YAAa,aAAc,UAAW,QAAS,QAAS,cAExEC,EAAuB,CAChC,WACA,YACA,mBACA,oBACA,iBACA,eACA,eACA,oBACA,OACA,UAGSC,EAAqB,CAAC,gBAAiB,gBAAiB,gBAAiB,iBAE/E,SAASC,EACZC,GAEA,MAAMC,EAAUD,EAAOE,OAAOC,YAAYnH,MAC1C,GAAgB,OAAZiH,EAAkB,OAAO,KAE7B,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAASG,IAAK,CAC9B,MAAMC,EAAWP,EAAmBM,GACpC,IAAKJ,EAAOE,OAAOG,GAAUrH,MAAO,OAAOqH,C,CAG/C,OAAO,IACX,CCpCO,SAASC,KAAgBC,GAE5B,OADAA,EAAOA,EAAKC,QAAOC,GAAkB,iBAANA,IACxB,WAAW,eAAuBF,EAAKG,KAAK,MACvD,CCAO,MAAMC,EAAoB,CAAC,YAAa,UAAW,SAAU,SAAU,aCbjEC,EAAmB,CAC5BC,IAAK,aACLC,IAAK,SACLC,IAAK,YACLC,IAAK,WACLC,IAAK,YACLC,IAAK,YACLC,IAAK,eACLC,IAAK,WACLC,IAAK,SACLC,IAAK,YACLC,IAAK,cACLC,IAAK,WACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WACLC,IAAK,YAKIC,GAFsB1E,OAAOmC,KAAKsB,GAEfzD,OAAO2E,OAAOlB,ICbvC,SAASmB,EAAW/F,GACvB,OAAKA,EACEA,EAAI,GAAGN,cAAgBM,EAAIL,MAAM,GADvB,EAErB,CCXO,SAASqG,IACZ,OAAOrF,KAAKsF,MAAMC,IAAsC,0BAC5D,CAEO,SAASC,EAAaC,GACzB,MAAO,sCAAsCA,GACjD,CCNO,SAASC,GAAS5D,EAAc6D,GACnC,OAAIA,EAAa,SAAS7D,MAAS6D,KAC5B,SAAS7D,IACpB,CAEO,SAAS8D,GAAaD,GACzB,MAAO,mMAKmBA,UAC9B,CCVgC,IAAIE,IAAI,CAAC,SAAU,SAAU,SAAU,WAAhE,MAIDC,GAAqC,GACpCC,eAAeC,GAAkBlE,EAAgBmE,EAAyBC,GAAO,GACpF,MAAMC,SAAeC,SAAoBtE,KAAQuE,WACjD,IAAKF,EAAO,OAAO,MAEL,IAAVF,IAAiBA,EAAQE,EAAM5C,OAAO0C,MAAM5J,OAEhD,MAAMiK,EAmBV,SAAiCL,GAC7B,MAAO,iCAAiCM,GAAoBN,IAChE,CArBuBO,CAAwBP,GAC3CH,GAAQG,WAAiBG,SAAyBE,GAElD,MAAMG,EAASX,GAAQG,IAAQI,WAC/B,IAAKI,EAAQ,OAAO,KAEpBN,EAAM5C,OAAOmD,SAASC,gBAAkBV,EAExCQ,EAAOd,KAAO,aAAaQ,EAAMR,eAAeM,KAChDQ,EAAOlD,OAAOqD,UAAYV,EAC1BO,EAAOlD,OAAO4C,MAAQA,EACtBM,EAAOlD,OAAOT,OAAOzG,MAAM0F,QAAQoE,EAAM5C,OAAOsD,WAAWxK,OAE3D,MAAMG,EAAW2J,EAAMW,MAAMC,MAAMvK,SAGnC,OAFIA,IAAUiK,EAAOlD,OAAOyD,YAAY3K,MAAQ,GAAGqJ,GAASlJ,aAAoBiK,EAAOlD,OAAOyD,YAAY3K,SAEnGoK,CACX,CAMA,MAAMF,GAA8C,CAChD,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,EAAG,mBACH,GAAI,oBChCFU,GAAM5G,EAAY,qBA6TxB0F,eAAemB,GAAgCC,GAE3C,OAAOA,SADa,IAAIC,KAAK,KAAKD,EAAQtF,UAAUwF,SAAS,CAAEtB,OAAO,KAASuB,MACzD,EAC1B,CAEA,SAASC,GAAoB5B,EAAc6B,GACvC,MAAM/H,EAAoC,CACtCrC,KAAM,OACNqK,IAAK,4CACL9B,KAAMA,EACNmB,MAAO,CACH,CAAC,GAAY,CAAEF,WAAW,KAMlC,OAFAc,YAAYjI,EAAM,0BAA2B+H,GAEtC/H,CACX,CAEAsG,eAAe4B,GAAoB7F,EAAgB8F,GAC/C,MAAMC,SAAczB,SAAmBtE,KAAQuE,WAC/C,GAAKwB,EAKL,OAHAH,YAAYG,EAAM,uBAAwB,CAAEpC,GAAImC,EAAOnC,GAAIqC,SAAU,YACrEJ,YAAYG,EAAM,SAAS,eAAuB,GAE3CA,CACX,CAYA,SAASE,GAAgBC,EAAeR,GACpC,MAAO,CACHtL,IAAK,mBACL+L,KAAM,UACNrE,KAAM,iBAAiBoE,SACvB3L,MAAO6L,OAAOV,GACd,CAAC,IAAY,EAErB,CAEA,SAASW,GAAqB/K,EAAcf,GAExC,MADc,SAAVA,IAAkBA,EAAQ,gCACvB,CACHH,IAAK,aACLkB,OACAf,QACA,CAAC,IAAY,EAErB,CAEA0J,eAAeqC,GAAwBtG,EAAgBmE,EAAiBoC,GACpE,MAAMlC,SAAeC,SAAoBtE,KAAQuE,WACjD,GAAKF,EAIL,OAFAuB,YAAYvB,EAAO,SAAS,IAAa,CAAEyB,OAAQS,EAAOpC,UAEnDE,CACX,CAEA,SAASmC,GAAwB3C,EAAc4C,EAAcC,GACzD,MAAMH,EAAqC,CACvCjL,KAAM,oBACNqK,IAAK,yDACL9B,OACAmB,MAAO,CACH,CAAC,GAAY,CAAEF,WAAW,KAYlC,OARAc,YAAYW,EAAO,SAAU,CACzBE,OACAE,SAAU,CAAEpM,MAAO,UACnBqM,mBAAoB,CAAErM,OAAO,GAC7BsM,qBAAsB,CAAEtM,OAAO,GAC/BmM,YAAa,CAAEnM,MAAO,EAAGkM,KAAMC,KAG5BH,CACX,CC9ZA,MAAM,GAAWhI,EAAY,UAEtB0F,eAAe6C,GAAgCC,GAClDA,EAAMC,iBAEN,MAAMC,EAAQF,EAAMG,cAAcC,wBAC5B,KAAE7L,GAAS2L,EAAMG,QAEV,cAAT9L,GACA+L,GAAcC,KAAKC,KAE3B,CAEAtD,eAAeoD,KACX,IAAIG,EAAU,GAAS,iBACvBA,GAAW,SAEX,IAAK,MAAMpN,IAAO,CAAC,IAAK,IAAK,IAAK,KAE9BoN,GAAW,iDAAiDpN,MAD9C,GAAS,iBAAiBA,qBAItCqN,OAAOC,KACT,CACIC,MAAO,GAAS,gBAChBH,UACAI,QAAS,CACLC,IAAK,CACDC,KAAM,8BACNC,MAAO,GAAS,iBAChBC,SAAUC,GAAiBC,KAAKX,OAEpCY,GAAI,CACAL,KAAM,+BACNC,MAAO,GAAS,mBAGxBK,MAAO,KAAM,GAEjB,CAAC,EACD,CAAEzE,GAAI,sBAAuB0E,MAAO,KAE5C,CAEApE,eAAegE,GAAyCK,GACpD,MAAMC,EAAYD,EAAK7M,KAAK,uBAAuB+M,MACnD,IAAKD,EAAW,OAAO,GAAS5L,KAAK,4BAErC,MAAM4E,SAAgB+C,SAAqBnF,KAAyBoF,WACpE,IAAKhD,EAAQ,OAAO,GAAS5E,KAAK,wBAElC,MAAM8L,EAAQ3H,EAAkByH,GAEhC3C,YAAYrE,EAAQ,oBAAqBkH,EAAM1H,KAC/C6E,YAAYrE,EAAQ,sBAAuBkH,EAAMzH,OAAO9D,SACxD0I,YAAYrE,EAAQ,qBAAsBkH,EAAMxH,aAE1CsG,KAAKpM,MAAMuN,wBAAwB,OAAQ,CAACnH,IAElDgG,KAAKoB,QACT,CCjEA,MAAMC,GAAY,IAAI/I,IACtB+I,GAAU1I,KAAK,EAAG,IAClB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,EAAG,IACjB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAClB0I,GAAU1I,IAAI,GAAI,IAElB,MAAM2I,GAAgB,IAAIhJ,ICsBnB,SAASiJ,GAA2C7N,EAAgB8N,GAGvE,OAFc9N,EAAK+N,QAAQvH,OAAOwH,MACfxN,MAAKyN,GAAqB,cAAbA,EAAK9O,KAAuB8O,EAAKC,aAAeJ,KACnER,SACjB,CDzBAM,GAAc3I,IAAI,mBAAoB,IACtC2I,GAAc3I,IAAI,aAAc,GAChC2I,GAAc3I,IAAI,QAAS,GAC3B2I,GAAc3I,IAAI,SAAU,GAC5B2I,GAAc3I,IAAI,OAAQ,GAC1B2I,GAAc3I,IAAI,YAAa,GAC/B2I,GAAc3I,IAAI,kBAAmB,IEpC9B,MAAMkJ,GAAgB,CACzB,SACA,WACA,UACA,QACA,UACA,SACA,WACA,QACA,SACA,SACA,cACA,QACA,UACA,QACA,OACA,YACA,aACA,UACA,QACA,mBACA,UACA,WACA,QACA,WACA,QACA,UACA,QACA,UACA,YACA,UACA,WACA,aACA,SACA,UACA,SACA,UACA,UACA,UACA,aACA,QACA,SACA,UACA,SACA,OACA,UACA,QACA,UACA,UACA,WACA,QACA,UACA,QACA,QACA,YACA,UACA,UACA,SACA,UACA,SACA,UACA,WACA,SACA,QACA,SACA,SACA,SACA,UACA,WACA,UACA,OACA,UACA,YACA,UACA,UACA,SACA,eACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,UACA,aACA,QACA,SACA,eACA,OACA,UACA,SACA,WACA,QACA,aACA,UACA,UACA,SACA,YACA,UACA,SACA,WACA,OACA,UACA,WACA,YACA,OACA,UACA,WCzFEC,GAAgB,CAAC,MAAO,QAAS,OAAQ,SACzCC,GAAoB,CAAC,OAAQ,cAAe,SAE5CC,GAAY,IAAIC,MAClB,CACIC,WAAY,EACZC,cAAe,EACfC,aAAc,EACdC,gBAAiB,EACjBC,YAAa,GAEjB,CACIpG,IAAG,CAACqG,EAAKC,IACEA,KAAQD,EAAMA,EAAIC,GAAwB,KAKtD,SAASC,GAAQ7O,GACpB,MAAM8O,EAAa9O,EAAMgJ,MACnBa,EAAQ9K,EAAyBiB,EAAO,UAAY,CAAC,EACrD+O,EdsJH,SAAuB/O,GAC1B,MAAM+O,EAAoC,CAAC,EACrC3O,EAAQL,EAASC,EAAO,CAAC,WAAY,OAAQ,YAAa,WAEhE,IAAK,MAAMF,KAAQM,EAAO,CACtB,MAAMb,EAAWF,EAAsBS,GACvC,IAAKP,GAAaO,EAAKkP,SAAS,eAAoC,IAApBlP,EAAKmP,WAAuB,SAE5E,MAAM7D,EAAQ/G,EAAMiE,IAAI/I,GACxB,IAAK6L,EAAO,SAEZ,MAAM,SAAElH,EAAQ,MAAEjC,EAAK,KAAE9B,GAASiL,EAIlC,GAHA2D,EAAW7K,KAAc,CAAEA,WAAU/D,OAAMyM,MAAO,GAAIxM,MAAO,IAC7D2O,EAAW7K,GAAW9D,MAAM6B,GAASnC,EAEvB,IAAVmC,EAAa,CACb,MAAMhD,EAAM,SAASiF,IACf0I,EAAQ1J,EAAgBjE,GAAO4D,EAAS5D,GAAOa,EAAK4I,KAC1DqG,EAAW7K,GAAW0I,MAAQA,C,EAItC,OAAOrJ,OAAO2E,OAAO6G,GAAYnI,QAAOC,GAAKA,EAAEzG,MAAM,IACzD,Cc7KuB8O,CAAclP,GAC3BmP,EAAoC,GAE1C,GAAInP,EAAMoP,SAAU,CAChB,MAAMlL,EAAW,WACXmL,EAAqD,GACrDC,EAAetP,EAAMuP,WAAWC,kBAAkBpQ,MAClD8K,EAAkC,GAElCuF,EAAUrH,IAAkBnG,MAClC,IAAK,MAAMA,KAASwN,EAChBvF,EAAQpF,KAAK,CAAE1F,MAAO6C,EAAMyN,IAAK9C,MAAO3K,EAAMyG,OAGlD,IAAK,IAAIzG,EAAQ,EAAGA,EAAQqN,EAAcrN,IACtCoN,EAAKvK,KAAK,CACN6K,QAAS,SACTvQ,MAAOyK,EAAM3F,KAAYjC,IAAU,GACnCiI,UACA0C,MAAO/J,EAAS,gBAAiB,CAAE+M,GAAI3N,EAAQ,MAInDoN,EAAKzK,QACLuK,EAAUrK,KAAK,CACX3E,KAAM,kBACN+D,WACA0I,MAAO/J,EAAS,kBAChBwM,Q,CAKZ,MAAMQ,EAAU/L,EAAW9D,GAC3B,GAAI6P,GAASC,KAAK1Q,MAAO,CACrB,MAAM,MAAEA,EAAK,IAAE2Q,GAAQF,EAAQC,KAEzBE,GADWH,EAAQI,SACK,GAAKF,EAAM3Q,EACnC8Q,EAAOF,GAAa,EAEpBG,EAAuC,CACzCR,QAAS,SACTzF,QAAS,CACL,CACI9K,OAAO,EACPwN,MAAO/J,EAAS,yBAEpB,CACIzD,OAAO,EACPwN,MAAOsD,EAAOrN,EAAS,0BAA4BA,EAAS,wBAAyB,CAAE+M,GAAII,MAGnG5Q,OAAO,GAEX+P,EAAUrK,KAAK,CACX3E,KAAM,aACN+D,SAAU,UACV0I,MAAOiD,EAAQnH,KACf2G,KAAM,CAACc,I,CAIf,IAAK,MAAM/E,KAAS2D,EAChB,GAAI5J,EAAmBiG,EAAO,CAAC,cAAe,iBAAkB,CAC5D,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,EAAK,MAAExM,GAAUgL,EACnCiE,EAA0B,GAE1Be,EAAY,CAACpH,EAAe/G,EAAgB+G,EAAQ,KACtD,MAAM,KAAEN,EAAO,GAAE,KAAE7D,EAAO,IAAOgF,EAAM3F,KAAYjC,IAAU,CAAC,EAC9DoN,EAAKvK,KAAK,CACN6K,QAAS,OACTvQ,MAAOsJ,EACPkE,MAAO7J,KAAKC,KAAKH,SAAS,kBAAkBmG,KAC5CiD,QAAS,CAAEpH,OAAMmE,UACnB,EAGN,GAAa,gBAAT7I,EAEAiQ,EAAU,GACNtB,GAAc,GAAGsB,EAAU,GAG3BhQ,EAAM,KACNgQ,EAAU,GACNtB,GAAc,IAAIsB,EAAU,GAC5BtB,GAAc,IAAIsB,EAAU,IAIhChQ,EAAM,KACNgQ,EAAU,GACNtB,GAAc,IAAIsB,EAAU,QAEjC,CACH,MAAM,QAAEC,EAAO,aAAEC,GAAiBC,GAAuBvQ,EAAO,UAG5DsQ,GAAgB,GAAKD,GAAW,GAAGD,EAAUC,EAAU,EAAG,GAG1DC,GAAgB,GAAKD,GAAW,GAAGD,EAAUC,EAAU,EAAG,GAG9DD,EAAUC,EAAU,EAAG,GACvBD,EAAUC,EAAU,EAAG,E,CAG3BlB,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,Q,MACrC,GAAIlK,EAAmBiG,EAAO,gBAAiB,CAClD,MAAMlB,EAAUjC,EAAiBrB,QAAOC,GAAK7G,EAAMwQ,OAAO3J,GAAI0D,KAAQ,IACtE,IAAKL,EAAQtF,OAAQ,SAErB,MAAM,KAAEzE,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,EAElC,IAAI,SAAEqF,EAAW,GAAE,MAAE3E,GAAQ,GAASjC,EAAM3F,IAAa,CAAC,GACtDuM,GAAa3E,GAAU5B,EAAQxK,SAAS+Q,KACxCA,EAAW,GACX3E,GAAQ,GAGZ,MAAMqE,EAAyC,CAC3CR,QAAS,QACTzF,QAASwG,GAAqBxG,GAC9BuG,SAAUA,EACVrR,MAAO0M,EAAQ2E,EAAWtI,EAAWsI,GACrCxE,QAAS,CAAEH,UAEfqD,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,mBAAoB,CACrD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,EAAK,MAAExM,GAAUgL,EACnCiE,EAA8C,GAC9CsB,EAAc3Q,EAAMwQ,OAEpBI,EAAY,CAAC3O,EAAesI,EAAiBL,KAC/C,IAAI,SAAEuG,EAAW,GAAE,MAAE3E,GAAQ,GAASjC,EAAM3F,KAAYjC,IAAU,CAAC,GAC/DwO,GAAa3E,GAAU5B,EAAQxK,SAAS+Q,KACxCA,EAAW,GACX3E,GAAQ,GAGZuD,EAAKvK,KAAK,CACN6K,QAAS,QACT/C,MAAO7F,EAAkBwD,GACzBL,QAASwG,GAAqBxG,GAC9BuG,SAAUA,EACVrR,MAAO0M,EAAQ2E,EAAWtI,EAAWsI,GACrCxE,QAAS,CAAEH,QAAOvB,SACpB,EAGAsG,EAAiB,CAAC5O,EAAe2L,EAA8B,WACjE,MAAM9N,EAAOM,EAAM6B,GACnB,QAAOnC,GAAiD,SAA1C6N,GAAwB7N,EAAM8N,EAA0B,EAI1E,GAAIiD,EAAe,EAAG,WAAY,CAC9B,MAAML,EAASvI,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IAClE,IAAKiG,EAAO5L,OAAQ,SACpBgM,EAAU,EAAG,EAAGJ,GAChBI,EAAU,EAAG,EAAGJ,E,MAIf,GAAIpQ,EAAM,IAAMyQ,EAAe,IAAMA,EAAe,GAAI,CACzD,MAAMC,EAAU7I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IACnE,GAAIuE,GAAc,EAAG,CACjB,IAAKgC,EAAQlM,OAAQ,SACrBgM,EAAU,EAAG,EAAGE,GAChBF,EAAU,EAAG,EAAGE,E,KACb,CACH,MAAMC,EAAU9I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IACnE,IAAKwG,EAAQnM,OAAQ,SACrBgM,EAAU,EAAG,EAAGG,GACZD,EAAQlM,QAAQgM,EAAU,EAAG,EAAGE,E,OAMxC,GAAIhC,GAAc,EAAG,CACjB,MAAMiC,EAAU9I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IACnE,IAAKwG,EAAQnM,OAAQ,SACrBgM,EAAU,EAAG,EAAGG,GAChBH,EAAU,EAAG,EAAGG,E,MACb,GAAIjC,GAAc,EAAG,CACxB,MAAMkC,EAAU/I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IACnE,IAAKyG,EAAQpM,OAAQ,SACrBgM,EAAU,EAAG,EAAGI,GAChB,MAAMD,EAAU9I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IAC/DwG,EAAQnM,QAAQgM,EAAU,EAAG,EAAGG,E,KACjC,CACH,MAAMC,EAAU/I,EAAiBrB,QAAOC,GAAK8J,EAAY9J,GAAG0D,KAAO,IACnE,IAAKyG,EAAQpM,OAAQ,SACrBgM,EAAU,EAAG,EAAGI,GAChBJ,EAAU,EAAG,EAAGI,E,CAIxB7B,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,Q,MACrC,GAAIlK,EAAmBiG,EAAO,eAAgB,CACjD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,EAC5B+E,EAAwC,CAC1CR,QAAS,QACTsB,YAAalO,KAAKC,KAAKH,SAAS,6BAChCzD,MAAOyK,EAAM3F,IAAa,IAE9BiL,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,iBAAkB,CACnD,MAAM8F,EAAiBlR,EAAMsG,OAAOT,OAAOsL,UAAU/R,MAC/C8K,EAAU+D,GAAcrH,QAAOC,IAAMqK,EAAexR,SAASmH,KAAIuK,OACvE,IAAKlH,EAAQtF,OAAQ,SAErB,MAAM,KAAEzE,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,EAC5B+E,EAA0C,CAC5CR,QAAS,SACTzF,QAASwG,GAAqBxG,GAC9B9K,MAAOyK,EAAM3F,IAAa,IAE9BiL,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,mBAAoB,CACrD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,EAC5B+E,EAA4C,CAC9CR,QAAS,SACTzF,QAASwG,GAAqBxC,IAC9B9O,MAAOyK,EAAM3F,IAAa,IAE9BiL,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,qBAAsB,CACvD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,EAAK,MAAExM,GAAUgL,EACnCqF,EAAW5G,EAAM3F,IAAa,GAC9BmL,EAAgD,GAGtDA,EAAKvK,KAAK,CACN6K,QAAS,OACTvQ,MAAOqR,EAAS,IAAI/H,MAAQ,GAC5BkE,MAAO7J,KAAKC,KAAKH,SAAS,eAC1BoJ,QAAS,CACLpH,KAAM4L,EAAS,IAAI5L,MAAQ,GAC3BmE,MAAO,KAKX5I,EAAM,IACNiP,EAAKvK,KAAK,CACN6K,QAAS,OACT/C,MAAO7J,KAAKC,KAAKH,SAAS,gBAC1BzD,MAAOqR,EAAS,IAAI/H,MAAQ,GAC5BuD,QAAS,CACLpH,KAAM4L,EAAS,IAAI5L,MAAQ,GAC3BmE,MAAO,MAKnBmG,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,Q,MACrC,GAAIlK,EAAmBiG,EAAO,gBAAiB,CAClD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,GAC5B,KAAE1C,EAAO,GAAE,KAAE7D,EAAO,IAAOgF,EAAM3F,IAAa,CAAC,EAC/CiM,EAAyC,CAC3CR,QAAS,OACTvQ,MAAOsJ,EACPuD,QAAS,CACLpH,OACAmE,MAAO,IAGfmG,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,iBAAkB,CACnD,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,GAAUxB,EAC5B+E,EAA0C,CAC5CR,QAAS,SACTzF,QAASwG,GAAqBvC,KAElCgB,EAAUrK,KAAK,CAAE3E,OAAM+D,WAAU0I,QAAOyC,KAAM,CAACc,I,MAC5C,GAAIhL,EAAmBiG,EAAO,aAAc,CAC/C,MAAM,KAAEjL,EAAI,SAAE+D,EAAQ,MAAE0I,EAAK,MAAExM,GAAUgL,EACnChF,EAAShG,EAAM,GAEfiR,EAA8B,CAChClR,OACA+D,WACA0I,QACAyC,KAAM,CAAC,CAAEM,QAAS,QAASvQ,MAAOyD,EAAS,6BAK/C,GAHAsM,EAAUrK,KAAKuM,IAGVjL,EAAQ,SAyBb,GAxBAiL,EAAShC,KAAK,GAAK,CACfM,QAAS,SACTzF,QAASwG,GAAqBjL,GAC9BrG,MAAOyK,EAAM3F,IAAWoN,QAAU,GAClC1E,QACAX,QAAS,CACLsF,YAAa,WAKjBnR,EAAM,KACNiR,EAAShC,KAAK,GAAK,CACfM,QAAS,SACTzF,QAASwG,GAAqB3K,GAC9B3G,MAAOyK,EAAM3F,IAAWsN,OAAS,GACjC5E,MAAO/J,EAAS,qBAChBoJ,QAAS,CACLsF,YAAa,YAMpBnR,EAAM,KAAOA,EAAM,GAAI,SAG5B,IAAK+F,EAAoBC,GAAS,SAElC,MAAMqL,EAASrR,EAAM,GAAK6F,EAAuBD,EAC3CyK,EAAW5G,EAAM3F,IAAWwN,MAAQ,GAE1CL,EAAShC,KAAK,GAAK,CACfM,QAAS,SACTzF,QAASuH,EAAME,KAAI9K,IAAK,OAAGzH,MAAOyH,EAAG+F,Ob9TzB8E,Ea8T4C7K,Eb7T7D6K,EAAKjQ,QAAQ,UAAW,cAD5B,IAAqBiQ,Ca8TiD,IAC7DtS,MAAOqR,GAAYgB,EAAM/R,SAAS+Q,GAAYA,EAAW,GACzD7D,MAAO/J,EAAS,mBAChBoJ,QAAS,CACLsF,YAAa,Q,MAGlB,GAAIpM,EAAmBiG,EAAO,aAAc,CAC/C,MAAM,KAAEjL,EAAI,SAAE+D,GAAakH,EACrB+E,EAAsC,CACxCR,QAAS,OACTvQ,MAAOyK,EAAM3F,IAAWwE,MAAQ,GAChCuD,QAAS,CACLpH,KAAMgF,EAAM3F,IAAWW,MAAQ,GAC/BmE,MAAO4I,KAAKC,MAAM/C,EAAa,KAGvCK,EAAUrK,KAAK,CACX3E,OACA+D,WACA0I,MAAO/J,EAAS,qBAChBwM,KAAM,CAACc,I,CAKnB,MAAMd,EAA+B,GAC/ByC,EAAiC,GACvC,IAAK,MAAMT,KAAYlC,EACfkC,EAAShC,KAAKzK,OAAS,EAAGkN,EAAOhN,KAAKuM,GACrChC,EAAKvK,KAAKuM,GAMnB,OAHAhC,EAAK+B,MAAK,CAACW,EAAGC,IAAM5D,GAAU2D,EAAE5R,MAAQiO,GAAU4D,EAAE7R,QACpD2R,EAAOV,MAAK,CAACW,EAAGC,IAAMD,EAAE1C,KAAKzK,OAASoN,EAAE3C,KAAKzK,SAEtC,CAAEyK,OAAMyC,SACnB,CAEA,SAASpB,GAAuCuB,GAC5C,OAAOA,EAAIN,KAAI9K,IAAK,CAAGzH,MAAOyH,EAAG+F,MAAO/F,KAC5C,CAEA,SAAS0J,GAAuBvQ,EAAkBkS,GAC9C,IAAI7B,EAAU,EACVC,EAAe,EAEnB,IAAK,MAAMlF,KAASpL,EAAMmS,aAAc,CACpC,GAAI,gBAAiB/G,EAAMvB,MAAO,SAElC,MAAMuI,EAAQhH,EAAM9E,OAAO8L,MAC3B,IAAK,MAAMnT,KAAOmT,EACDA,EAAMnT,GACV8Q,MAAKM,EAAUuB,KAAK7B,IAAIM,EAASpF,OAAOhM,EAAI8C,MAAM,MAG3DqJ,EAAM8G,YAAcA,IAAW5B,EAAesB,KAAK7B,IAAIO,EAAclF,EAAMb,M,CAGnF,MAAO,CAAE8F,QAASuB,KAAKS,IAAIhC,EAAS,IAAKC,eAC7C,CC1aO,SAASgC,GAAyCC,EAAeC,GACpE,MAAMC,EAAmB,GAEzB,GAAIF,GAASC,EACT,IAAK,IAAIhM,EAAI+L,EAAO/L,GAAKgM,EAAKhM,IAAKiM,EAAO3N,KAAK0B,QAE/C,IAAK,IAAIA,EAAI+L,EAAO/L,GAAKgM,EAAKhM,IAAKiM,EAAO3N,KAAK0B,GAGnD,OAAOiM,CACX,CCRO,MAAMC,GAAkB,CAC3BC,YAAa,CAAEzO,SAAU,CAAC,UAC1B0O,kBAAmB,CAAEC,SAAU,CAAC,SAAUhN,OAAQ,CAAC,YACnDiN,aAAc,CAAE5O,SAAU,CAAC,SAAU0F,WAAY,CAAC,WAClDmJ,aAAc,CAAE7O,SAAU,CAAC,UAAW,UACtC8O,UAAW,CACPC,YAAa,CAAEJ,SAAU,CAAC,SAAUhN,OAAQ,CAAC,gBAI9C,SAASqN,GAAStH,GACrBA,EAAMC,iBAEN,MAAMrJ,EAAOoJ,EAAMG,cAAcE,QAC3BjD,EAAQiC,OAAOzI,EAAKwG,OAE1B,OAAQxG,EAAKrC,MACT,IAAK,cACDgT,GAAY,IAAKT,GAAgBC,YAAa3J,MAAOsJ,GAAwB,EAAGtJ,KAChF,MACJ,IAAK,oBACDoK,GAAW,IAAKV,GAAgBE,kBAAmB5J,MAAO,CAAEqJ,IAAK,EAAGtC,IAAK/G,KACzE,MACJ,IAAK,eACDmK,GAAY,IAAKT,GAAgBI,aAAc9J,MAAOsJ,GAAwB,EAAGtJ,KACjF,MACJ,IAAK,eACDmK,GAAY,IAAKT,GAAgBK,aAAc/J,MAAOsJ,GAAwB,EAAGtJ,KACjF,MACJ,IAAK,aAMb,SAAyB9E,EAAwB8E,GAEpC,gBADD9E,GAEAkP,GAAW,IAAKV,GAAgBM,UAAUC,YAAajK,MAAO,CAAEqJ,IAAK,EAAGtC,IAAK/G,IAGzF,CAXYqK,CAAgB7Q,EAAK0B,SAAU8E,GAG3C,CAUA,SAASmK,IAAY,SAAEjP,EAAW,GAAE,MAAE8E,EAAQ,GAAE,WAAEY,EAAa,IAA4B,CAAC,GACxF,MAAMhD,EAA8B,CAChC1C,WACAoP,QAAS,GACTtK,QACAuK,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACR7J,aACA/D,OAAQ,IAEZ9C,KAAK2Q,KAAKC,kBAAkBC,QAAQ,QAAShN,EACjD,CAEA,SAASwM,IAAW,SAAEP,EAAW,GAAE,MAAE7J,EAAQ,CAAC,EAAC,OAAEnD,EAAS,IAA2B,CAAC,GAClF,MAAMe,EAA6B,CAC/BiM,WACArC,OAAQ,GACR+C,OAAQ,GACRE,OAAQ,GACR5N,SACAmD,SAEJjG,KAAK2Q,KAAKC,kBAAkBC,QAAQ,OAAQhN,EAChD,CClEA,MAAM,GAAWxD,EAAY,wBAqD7B,SAASyQ,GAAmB/T,GACxB,MAAMgU,EAAWhU,EAAKwG,OAAOyN,KAAK3U,MAElC,QAAI0U,EAASpU,SAAS,SAAYoU,EAASpU,SAAS,QAAUsU,SAASF,GAAY,MAC/E,GAAStS,KAAK,iBAAkB,CAAEuS,KAAM,YACjC,EAIf,CAEA,SAASE,GACLC,EACApU,GACA,SAAEoE,EAAW,GAAE,WAAE0F,EAAa,IAA4B,CAAC,EAC3DhD,GAEA,IAAK9G,EAAKkP,SAAS,SAAU,OAAO,GAASxN,KAAK,YAAa,CAAErB,KAAM,UAEvE,GAAIL,EAAKqU,YAAcjQ,EAASxE,SAAS,WAAY,OAAO,GAAS8B,KAAK,WAAY,CAAErB,KAAM,QAASiU,IAAK,YAC5G,GAAItU,EAAKuU,WAAanQ,EAASxE,SAAS,UAAW,OAAO,GAAS8B,KAAK,WAAY,CAAErB,KAAM,QAASiU,IAAK,WAC1G,GAAItU,EAAKwU,eAAiBpQ,EAASxE,SAAS,SAAU,OAAO,GAAS8B,KAAK,WAAY,CAAErB,KAAM,QAASiU,IAAK,UAE7G,GAAIxK,EAAWhF,OAAQ,CACnB,MAAM2P,EAAiBzU,EAAKwG,OAAOsD,WAAWxK,MAC9C,IAAK,MAAM8S,KAAatI,EACpB,IAAK2K,EAAe7U,SAASwS,GACzB,OAAO,GAAS1Q,KAAK,aAAc,CAAErB,KAAM,QAASqR,MAAOU,EAAWhO,SAAU,a,CAI5F,GAAIpE,EAAKkJ,MAAQiC,OAAOiJ,EAAOM,KAAK,eAAgB,OAAO,GAAShT,KAAK,aAAc,CAAErB,KAAM,UAE3FyG,IAAWA,EAAO9G,IAEtB2U,GAAYP,EAAQpU,EACxB,CAEA,SAAS4U,GAAYR,EAAgBpU,GAAgB,SAAE+S,EAAW,GAAE,OAAEhN,EAAS,KAC3E,IAAK/F,EAAKkP,SAAS,SAAWlP,EAAK6U,UAAW,OAAO,GAASnT,KAAK,YAAa,CAAErB,KAAM,SACxF,IAAK0S,EAASnT,SAASI,EAAK8U,UAAW,OAAO,GAASpT,KAAK,WAAY,CAAErB,KAAM,OAAQiU,IAAKtU,EAAK8U,WAElG,GAAI/O,EAAOjB,OAAQ,CACf,MAAMiQ,EAAa/U,EAAKwG,OAAOT,OAAOzG,MACtC,IAAK,MAAMoS,KAAS3L,EAChB,IAAKgP,EAAWnV,SAAS8R,GAAQ,OAAO,GAAShQ,KAAK,aAAc,CAAErB,KAAM,OAAQqR,QAAOtN,SAAU,S,CAI7G,GAAIpE,EAAKkJ,MAAQiC,OAAOiJ,EAAOM,KAAK,eAAgB,OAAO,GAAShT,KAAK,aAAc,CAAErB,KAAM,SAE/FsU,GAAYP,EAAQpU,EACxB,CAEA,SAAS2U,GAAYP,EAAgBpU,GACjCoU,EAAO7G,IAAIvN,EAAK4I,MAChBwL,EAAOM,KAAK,QAAS1U,EAAK4I,MAC1BwL,EAAOM,KAAK,YAAa1U,EAAK+E,MAC9BqP,EAAOY,QAAQ,yBAAyBC,QAAQC,YAAY,WAChE,CCxGA,MAAM,GAAW5R,EAAY,aAEtB,MAAM6R,yBAAyBC,YAC1BC,OACAC,gBAERC,YAAYrV,EAAsBkK,GAC9BoL,MAAMpL,GACNkC,KAAK+I,OAASnV,CAClB,CAEWuV,4BACP,OAAOC,YAAYF,MAAMC,eAAgB,CACrC/M,GAAI,yBACJgE,MAAO,GAAS,SAChB6E,SAAU3K,EAAa,iBACvB+O,OAAQ,OACRC,eAAe,EACfC,gBAAgB,EAChBC,SAAU,CACN,CACIC,aAAc,6BAI9B,CAEI7V,YACA,OAAOoM,KAAK+I,MAChB,CAEAtG,QAAQ3E,GACJ,OAAOsL,YAAYF,MAAMzG,QAAQ3E,GAAU,CACvClH,KAAM,GACN8S,KAAM,EACF7J,UACA7M,QACA6R,kBAMA,IAAIjH,EAAM,GAKV,OAJI5K,IAAO4K,GAAO,WAAW5K,MACzB6R,IAAajH,GAAO,iBAAiBiH,MACrChF,GAAS1I,OAAOwS,QAAQ9J,GAAS+J,SAAQ,EAAE/W,EAAKG,KAAY4K,GAAO,SAAS/K,MAAQG,OACpF4K,IAAKA,GAAO,KACTA,CAAG,KAEX6E,GAAQzC,KAAK+I,SAExB,CAEA3H,OAAOyI,EAA6B/L,GAYhC,OAXIkC,KAAKgJ,iBAAiBc,cAAc9J,KAAKgJ,iBAEzChJ,KAAK+J,QAAQ7V,KAAK,mBAClB8L,KAAKgJ,gBAAkBgB,aAAY,KACfhK,KAAK+J,QAAQ7V,KAAwB,iBAC7C+V,MAAK,CAACC,EAAGC,KACbA,EAAOC,eAAiBD,EAAOC,cAAgB,GAAKD,EAAOrM,QAAQtF,MAAM,GAC3E,GACH,MAGA0Q,MAAM9H,OAAOyI,EAAO/L,EAC/B,CAEA+C,MAAM/C,GAEF,OADIkC,KAAKgJ,iBAAiBc,cAAc9J,KAAKgJ,iBACtCE,MAAMrI,MAAM/C,EACvB,CAEAuM,kBAAkBtJ,GACdmI,MAAMmB,kBAAkBtJ,GAExBA,EAAK7M,KAAwB,uBAAuBoW,GAAG,QAAS/K,GAAQoB,KAAKX,OAE7Ee,EAAK7M,KAAwB,iBAAiBoW,GAAG,SAAUtK,MAAK,EAAqBW,KAAKX,OAC1Fe,EAAK7M,KAA0B,gBAAgBoW,GAAG,SAAUtK,MAAK,EAAoBW,KAAKX,OAE1Fe,EAAK7M,KAAmB,wBAAwBoW,GAAG,QAASxD,IAE5D/F,EAAK7M,KAAwB,uBAAuBoW,GAAG,QAAStK,MAAK,EAASW,KAAKX,OACnFe,EAAK7M,KAAwB,wBAAwBoW,GAAG,QAAStK,MAAK,EAAUW,KAAKX,OACrFe,EAAK7M,KAAwB,wBAAwBoW,GAAG,QAAStK,MAAK,EAAUW,KAAKX,MACzF,CAEUtD,cAAc8C,ID/FrB9C,eAAuB8C,GAC1B,IAAIsI,EAASyC,EAAE/K,EAAMsI,QACjBA,EAAO0C,GAAG,WAAU1C,EAASA,EAAO2C,QAExC,MAAMC,EAAe5C,EAAOM,KAAK,aACjC,GAAKsC,EAEL,IACI,MAAMC,EAAanL,EAAMoL,cAAcnI,QAAQ,cACzCoI,EAAY,IAAM,GAASzV,KAAK,iBAEhCgB,EAAuC0U,KAAKC,MAAMJ,GAExD,GADAxV,QAAQ6V,IAAI5U,IACPA,GAAsB,SAAdA,EAAKrC,MAAwC,iBAAdqC,EAAKqC,KAAmB,OAAOoS,IAE3E,MAAMnX,QAAaqJ,SAAmB3G,EAAKqC,MAC3C,IAAK/E,EAAM,OAAOmX,IAElB,OAAQH,GACJ,IAAK,cACD7C,GAAaC,EAAQpU,EAAM4S,GAAgBC,aAC3C,MACJ,IAAK,oBACD+B,GAAYR,EAAQpU,EAAM4S,GAAgBE,mBAC1C,MACJ,IAAK,eACDqB,GAAaC,EAAQpU,EAAM4S,GAAgBI,cAC3C,MACJ,IAAK,eACDmB,GAAaC,EAAQpU,EAAM4S,GAAgBK,aAAcc,IACzD,MACJ,IAAK,aAOjB,SAA0BK,EAAgBpU,GAGtC,GACS,gBAHQoU,EAAOM,KAAK,iBAGzB,CACI,MAAM6C,EAAU,IAAK3E,GAAgBM,UAAUC,aAC/CoE,EAAQxR,QAAUwR,EAAQxR,QAAU,KAAK9D,QACzCsV,EAAQxR,OAAOf,KAAK,UACpB4P,GAAYR,EAAQpU,EAAMuX,EACrB,CAEjB,CAjBgBC,CAAiBpD,EAAQpU,GAGrB,CAAd,MAAO8D,GAAO,CACpB,CC4DQ2T,CAAQ3L,EACZ,CAEA,GAAqBA,GACjB,MAAM2K,EAAS3K,EAAMG,cACfD,EAAQyK,EAAOiB,mBACrB1L,EAAMG,QAAQH,MAAQ,QACtBA,EAAM1M,MAAQ+I,EAAWoO,EAAOnX,MACpC,CAEA,GAAoBwM,GAChB,MAAME,EAAQF,EAAMG,cACdwK,EAASzK,EAAME,uBACf5M,EAAQ0M,EAAM1M,MAAMsC,cACpBvB,EAAO2L,EAAMG,QAAQ9L,KAGrBsX,EAAWxP,EAGjB,GAFgBrI,MAAM8X,KAAKnB,EAAOrM,SAASyH,KAAI9K,GAAKA,EAAEzH,QAE1CM,SAASN,GACjBmX,EAAOnX,MAAQA,EACf0M,EAAM1M,MAAQ+I,EAAW/I,GACzB0M,EAAMG,QAAQH,MAAQ,aACnB,GAAI2L,EAAS/X,SAASN,GAAQ,CACjC,GAAa,oBAATe,GAAuC,iBAATA,EAAyB,CACvD,MAAMoK,EAAgB,oBAATpK,EAA6B8K,OAAOa,EAAMG,QAAQ1B,MAAQ,EACvE,GAAS/I,KAAK,0BAA2B,CAAE+I,KAAMxD,EAAkBwD,GAAOgB,YAAanM,G,CAG3FmX,EAAOnX,MAAQ,GACf0M,EAAM1M,MAAQ,GACd0M,EAAMG,QAAQH,MAAQ,M,MAEtByK,EAAOnX,MAAQ,GACf0M,EAAMG,QAAQH,MAAQ,MAE9B,CAEA,KACIM,KAAK+J,QAAQwB,SAAS,WAC1B,CAEA,KACI,MAAMC,EAAkB,GAClBC,EAAczL,KAAK+J,QAAQ7V,KAAK,SAASsG,QAAO,CAAC0P,EAAGxK,KAAWA,EAAM1M,QACrE0Y,EAAc1L,KAAK+J,QAAQ7V,KAAK,eAOtC,OALIuX,EAAYjT,QAAQgT,EAAM9S,KAAK,eAC/BgT,EAAYlT,QAAQgT,EAAM9S,KAAK,oBAEnC8S,EAAM5B,SAAQnP,GAAK,GAASrF,KAAKqF,MAEzB+Q,EAAMhT,MAClB,CAEAkE,QAAgB8C,GAGZ,GAFAA,EAAMC,iBAEDO,MAAK,IAAV,CAEAA,MAAK,IAEL,UTlJDtD,eAAsBqE,EAAcnN,GACvC,IAAI+X,EAAU,GACd,MAAMlO,EAAQ,CAAC,EACTmO,EAAS7K,EAAK7M,KAAK,4BAA4BA,KAAK,wCAAwC2X,UAC5FC,EAAYF,EAAOG,MAAKC,GAASrU,EAAWrE,SAAS0Y,EAAMnM,QAAQ9L,QTyJtE,SAAsBH,GACzB,OLlJG,SACHA,EACAT,EACAU,GAEA,OAAOF,EAAeC,EK6IuB,CAAC,OAAQ,YAAa,aL7I3B4G,OAAOjH,EAAyBJ,GAC5E,CK4IW8Y,CAAwBrY,EAAOyE,EAC1C,CS3JmG6T,CAAatY,GAAS,GAC/GuY,EAAyC,GACzCC,EAAqD,GACrDC,EAA+C,IAAI/T,IACnDgU,EAA0B,GAE1BC,EAAY7Y,IACd,MAAM0I,EAAK1I,EAAK0I,GACVoQ,EAAWH,EAAWnQ,IAAIE,GAChC,GAAIoQ,EAAU,OAAOA,EAErB,MAAM9K,EAAQ+K,UAAU/Y,EAAK+N,QAAQvH,OAAOwH,OAE5C,IAAK,IAAItH,EAAIsH,EAAMlJ,OAAS,EAAG4B,GAAK,EAAGA,IAAK,CACxC,MAAMuH,EAAOD,EAAMtH,GACf,KAAauH,GAAMD,EAAMgL,OAAOtS,EAAG,E,CAI3C,OADAiS,EAAW1T,IAAIyD,EAAIsF,GACZA,CAAK,EAGViL,EAAW,CACb5H,UAAW,GACXX,OAAQ,GACRwI,KAAM,GACNC,YAAa,GACbC,MAAO,GACPrQ,QAAS,GACTsQ,OAAQ,GACRC,KAAM,GACNhK,SAAU,IAGd,IAAK,MAAMgJ,KAASJ,EAAQ,CACxB,MAAM7X,EAAOiY,EAAMnM,QAAQ9L,KAE3B,GAAa,gBAATA,GAAmC,iBAATA,EAAyB,CACnD,MAAM,KAAE0E,EAAI,SAAEX,GAAakU,EAAMnM,QAC3BjD,EAAQiC,OAAOmN,EAAMnM,QAAQjD,OAE7BQ,QAAeT,GAAkBlE,EAAMmE,GAAO,GAChDQ,GAAQ+O,EAAQzT,KAAK0E,GAEzBK,EAAM3F,KAAc,GACpB2F,EAAM3F,GAAWY,KAAK,CAAE4D,KAAM0P,EAAMhZ,MAAOyF,Q,MACxC,GAAa,cAAT1E,GAAiC,sBAATA,EAA8B,CAC7D,MAAM,SAAE+D,EAAQ,KAAEW,EAAI,MAAEmE,GAAUoP,EAAMnM,QAClChK,EAAiB,sBAAT9B,EAA0C,MAAV6I,EAAgB,EAAI,EAAK,EACjEqQ,EAAapU,EAAiBf,GAAUjC,GAE9C,GAAIoX,EAAY,CACZ,MAAM1O,EAAStK,EAA8CL,EAAOqZ,EAAY,CAAC,SACjF,GAAI1O,EAAQ,CACR,MAAMC,QAAaF,GAAoB7F,EAAM8F,GACzCC,GAAM2N,EAAQzT,KAAK8F,E,EAIlB,sBAATzK,GACA0J,EAAMuO,EAAMnM,QAAQ/H,YAAc,GAClC2F,EAAMuO,EAAMnM,QAAQ/H,UAAWY,KAAK,CAAE4D,KAAM0P,EAAMhZ,MAAOyF,UAEzDgF,EAAMuO,EAAMnM,QAAQ/H,UAAY,CAAEW,OAAM6D,KAAM0P,EAAMhZ,M,MAErD,GAAa,gBAATe,EAAwB,CAC/B,MAAM+D,EAAWkU,EAAMnM,QAAQ/H,SACzBW,EAAOI,EAAiBf,GAAU,GAClCuM,EAAW2H,EAAMhZ,MAEjBka,EAAOhP,GAAoBmG,EAAU,GAC3C8H,EAAQzT,KAAKwU,GACbP,EAASvI,OAAO1L,KAAK,CAAED,OAAM4L,WAAU7D,MAAO1I,IAE9C2F,EAAM3F,GAAYuM,C,MACf,GAAa,iBAATtQ,EAAyB,CAChC,MAAM,SAAE+D,EAAQ,KAAEW,GAASuT,EAAMnM,QAC3BvD,EAAO0P,EAAMhZ,MAEbma,EAAYnY,EAAS,kBAAmB,CAAEE,MAAO,cACjD4H,QAAciC,GAAwBtG,EAAM,EAAG0U,GAErD,GAAIrQ,EAAO,CACP,MACMkC,EAAQC,GAAwB,kBAAmBkO,EADrCvZ,EAAMwZ,SAASlO,MAAQtL,EAAMyZ,OAAOnO,MAExDiN,EAAQzT,KAAKoE,GACbqP,EAAQzT,KAAKsG,E,CAGjBvB,EAAM3F,GAAY,CAAEwE,OAAM7D,O,MACvB,GAAa,iBAAT1E,GAAoC,oBAATA,EAA4B,CAC9D,MAAM,MAAE2L,EAAK,SAAE5H,GAAakU,EAAMnM,QAC5BwE,EAAW2H,EAAMhZ,MACjByF,EAAOI,EAAiBf,GAAU,GAClCqG,EAAgB,oBAATpK,EAA6B8K,OAAOmN,EAAMnM,QAAQ1B,MAAQ,EACjEmP,EAAoB,SAAV5N,EAEhB,GAAI4N,EAAS,CACT,MAAMJ,EAAOhP,GAAoBmG,EAAUlG,GAC3CgO,EAAQzT,KAAKwU,E,KACV,CACH,MAAMK,EAAWzB,EAAU5X,MAAKR,GAAQR,EAAYQ,EAAM+E,KAC1D,IAAK8U,EAAU,SAEDhB,EAASgB,GACjB7U,KAAKgG,GAAgB2F,EAAS/O,cAAe6I,G,CAGvD,MAAMqP,EAAS,CAAEnJ,SAAUiJ,EAAUjJ,EAAWA,EAAS/O,cAAeoK,MAAO4N,GAE/E,GAAa,iBAATvZ,EACA4Y,EAASvI,OAAO1L,KAAK,CAAED,OAAM4L,WAAU7D,MAAO1I,IAC9C2F,EAAMuO,EAAMnM,QAAQ/H,UAAY0V,OAC7B,GAAa,oBAATzZ,EAA4B,CACnC,MAAM+D,EAAWkU,EAAMnM,QAAQ/H,SAC/B6U,EAASC,KAAKlU,KAAK,CAAE2L,WAAU7D,MAAO7F,EAAkBwD,KACxDV,EAAM3F,KAAc,GACpB2F,EAAM3F,GAAUY,KAAK8U,E,OAEtB,GAAa,cAATzZ,EAAsB,CAC7B,MAAM,SAAE+D,EAAQ,YAAEqN,GAAgB6G,EAAMnM,QAClC9H,EAAQc,EAAiBf,GACzBkC,EAAS/F,EAAgDL,EAAOmE,EAAM,GAAI,CAAC,WACjF,IAAKiC,EAAQ,SAIb,GAFAyD,EAAM3F,KAAc,CAAC,EAED,WAAhBqN,EAA0B,CAC1B,MAAMd,EAAW2H,EAAMhZ,MACvBoZ,EAAW1T,KAAK,CAAE4K,IAAKtJ,EAAOoC,GAAI,2BAA4BiI,EAAU,eAAgBpL,EAAcoL,KACtGsI,EAASK,KAAKtU,KAAK,CAAE2L,WAAU5L,KAAMV,EAAM,GAAIyI,MAAO,cACtD/C,EAAM3F,GAAWqN,GAAed,C,MAC7B,GAAoB,UAAhBc,EAAyB,CAChC,MAAMd,EAAW2H,EAAMhZ,MACjByG,EAASgT,UAAUzS,EAAOyH,QAAQvH,OAAOT,QAAQzG,OAAS,IAC3DyG,EAAOnG,SAAS+Q,IAAW5K,EAAOf,KAAK2L,GAC5C+H,EAAW1T,KAAK,CAAE4K,IAAKtJ,EAAOoC,GAAI,sBAAuB3C,IACzDkT,EAASK,KAAKtU,KAAK,CAAE2L,WAAU5L,KAAMV,EAAM,GAAIyI,MAAO,gBACtD/C,EAAM3F,GAAWqN,GAAed,C,MAC7B,GAAoB,SAAhBc,EAAwB,CAC/B,MAAMsI,EAAe1T,EAAoBC,GACzC,IAAKyT,EAAc,SAEnB,MAAMpJ,EAAW2H,EAAMhZ,MACvBoZ,EAAW1T,KAAK,CAAE4K,IAAKtJ,EAAOoC,GAAI,CAAC,UAAUqR,WAAuBpJ,IACpEsI,EAASK,KAAKtU,KAAK,CAAE2L,WAAU5L,KAAMV,EAAM,GAAIyI,MAAO,cACtD/C,EAAM3F,GAAWqN,GAAed,EAChCtR,EAAQa,EAAO,sBAAuB6Z,E,OAEvC,GAAa,oBAAT1Z,EAA4B,CACnC,MAAM+D,EAAWkU,EAAMnM,QAAQ/H,SACzBsE,EAAK4P,EAAMhZ,MAEbY,EAAMoP,WACNsJ,EAAc5T,KAAKsT,EAAMhZ,OACzB2Z,EAAS3J,SAAStK,KAAK,CAAED,KAAM0D,EAAaC,MAGhDqB,EAAM3F,KAAc,GACpB2F,EAAM3F,GAAUY,KAAK0D,E,MAClB,GAAa,eAATrI,EAAuB,CAC9B,GAAoB,SAAhBiY,EAAMhZ,MAAkB,SAE5B,MAAMyQ,EAAU/L,EAAW9D,GAC3B,IAAK6P,GAASC,KAAK1Q,MAAO,SAE1B,MAAM6Q,EAAWJ,EAAQI,UACnB,MAAE7Q,EAAK,IAAE2Q,GAAQF,EAAQC,KAE3B1Q,GAAS,EACL6Q,GAAY,EACZJ,EAAQiK,SAERtB,EAAW1T,KAAK,CACZ4K,IAAKG,EAAQrH,GACb,kBAAmBoJ,KAAK7B,IAAIF,EAAQI,SAAW,EAAG,GAClD,uBAAwBF,IAIhCyI,EAAW1T,KAAK,CACZ4K,IAAKG,EAAQrH,GACb,uBAAwBoJ,KAAK7B,IAAI3Q,EAAQ,EAAG,KAIpD,MAAM4Q,GAAaC,EAAW,GAAKF,EAAM3Q,EACnCsJ,EAAOsH,GAAa,EAAIrH,GAAakH,EAAQnH,MAAQD,GAASoH,EAAQhL,MACxDkT,GAAhB/H,GAAa,EAAchG,GAAI,eAAgB,CAAEtB,SACjBsB,GAA3BgG,GAAa,EAAkB,iBACpB,eADsC,CAAEtH,OAAMkH,GAAII,EAAY,G,KAE/E,CACH,MAAM9L,EAAWkU,EAAMnM,QAAQ/H,SACzBW,EAAOI,EAAiBf,GAAU,GAClCyV,EAAWzB,EAAU5X,MAAKR,GAAQR,EAAYQ,EAAM+E,KAC1D,IAAK8U,EAAU,SAEf,MAAM7L,EAAQ6K,EAASgB,GAEvB,GAAa,kBAATxZ,EAA0B,CAC1B,MAAMsQ,EAAW2H,EAAMhZ,MACvB0O,EAAMhJ,KA2IX,CACH7F,IAAK,mBACL+L,KAAM,MACNrE,KAAM,gCACNvH,MA/IsCqR,EAgJtC,CAAC,IAAY,IA/ILsI,EAAS5H,UAAUrM,KAAK,CAAED,OAAM4L,WAAU7D,MAAO1I,IACjD2F,EAAMuO,EAAMnM,QAAQ/H,UAAYuM,C,MAC7B,GAAa,oBAATtQ,EAA4B,CACnC,MAAMsQ,EAAW2H,EAAMhZ,MACvB0O,EAAMhJ,KAAKoG,GAAqBuF,EAAU,SAC1CsI,EAASE,YAAYnU,KAAK,CAAED,OAAM4L,WAAU7D,MAAO1I,IACnD2F,EAAMuO,EAAMnM,QAAQ/H,UAAYuM,C,MAC7B,GAAa,kBAATtQ,EAA0B,CACjC,MAAM+J,EAAUtK,MAAM8X,KAAMU,EAA8BlO,SAASyH,KAAI9K,GAAKA,EAAEzH,QACxEqR,QAAiBxG,GAAcC,GACrC4D,EAAMhJ,KAAKoG,GAAqBuF,EAAU,SAC1CsI,EAASE,YAAYnU,KAAK,CAAED,OAAM4L,WAAU7D,MAAO1I,EAAU6V,QAAQ,G,GAKjF,IAAK,MAAOvR,EAAIsF,KAAU2K,EACtBD,EAAW1T,KAAK,CAAE4K,IAAKlH,EAAI,eAAgBsF,IAG/C,MAAMkM,EAAe,CAAC7Z,EAAcV,KAChC,IAAKA,EAAKmF,OAAQ,OAEdmT,IAASA,GAAW,UAExB,MAAMvL,EAAQxC,GAAI7G,IAAIhD,GAAQ6J,GAAI7J,GAAQ6J,GAAI,SAAU,CAAE7J,SAC1D4X,GAAW,cAAcvL,iBAEzB,IAAK,IAAI,KAAE3H,EAAI,SAAE4L,EAAQ,MAAE7D,EAAK,OAAEmN,GAAS,KAAWta,EAClDmN,EAAQA,GAAS1J,EAAgB,SAAS0J,KAAW/J,EAAS,SAAS+J,KAAWA,EAClFA,EAAQzE,EAAWyE,GAEnBmL,GAAW,MACXA,GAAWlT,EAAO,GAAG4D,GAAS5D,EAAM+H,KAAW,WAAWA,aAEtD6D,IAAUsH,GAAW,8CAA8CtH,YACnEsJ,IAAQhC,GAAW,yCACvBA,GAAW,M,EAInB,GAAI/X,EAAMoP,SAAU,CAChB,MAAMA,EAAWpP,EAAMoP,SAGjB6K,EAAM7K,EAASnP,UAAUia,OAAOvI,KAAI9K,GAAKA,EAAE2B,KAGjD,GAFIyR,EAAIrV,QAAQwK,EAAS+K,wBAAwB,OAAQF,GAErDvB,EAAc9T,OAAQ,CACtB,MAAMwV,EAAOhS,IACPhI,EAAwB,GAE9B,IAAK,MAAMoI,KAAMkQ,EAAe,CAC5B,MAAMjF,SAAgB2G,EAAKC,YAAY7R,KAAMY,WACzCqK,GAAQrT,EAAM0E,KAAK2O,E,CAGvBrT,EAAMwE,QAAQwK,EAAS7B,wBAAwB,OAAQnN,E,EAInE,GAAImY,EAAQ3T,OAAQ,CAChB,MAAMxE,QAAeJ,EAAMuN,wBAAwB,OAAQgL,GAC3D,IAAK,MAAMzY,KAAQM,EAAO,CACtB,MAAMyE,EAAO/E,EAAK+E,KAElB,GAAkB,SAAd/E,EAAKK,KAAiB4Y,EAASG,MAAMpU,KAAK,CAAED,cAC3C,GAAkB,eAAd/E,EAAKK,KAAuB4Y,EAASlQ,QAAQ/D,KAAK,CAAED,cAExD,GAAkB,sBAAd/E,EAAKK,KAA8B,CACxC,MAAMmL,EAAOxL,EAAKwL,KACZ6N,EAAS/Y,EAAMwG,QAAOC,GAAgB,UAAXA,EAAE1G,MAAoBpB,EAAQ8H,EAAG,YAAcyE,IAChF,IAAK,MAAMpC,KAASiQ,EAAQ,CACxB,MAAMnQ,EAAQjK,EAAQmK,EAAO,SAC7BsP,EAAW1T,KAAK,CAAE4K,IAAKxG,EAAMV,GAAI,wBAAyB1I,EAAK0I,GAAI,kCAAmCQ,IACtG+P,EAASI,OAAOrU,KAAK,CAAED,KAAMqE,EAAMrE,M,EAK3C,MAAMyV,EAAWxa,EAAKf,QAAgB,OAAQ,gBAC9C,GAAIub,EAAU,CACV,MACM3T,EAAO,yBADAvF,EAAStB,EAAK4I,KAAM,CAAEpH,MAAO,gBAE1CkX,EAAW1T,KAAK,CAAE4K,IAAK4K,EAAU,CAAC3T,GAAO,CAAE6B,GAAI1I,EAAK0I,GAAIqC,SAAU,W,GAK9EmP,EAAa,YAAajB,EAAS5H,WACnC6I,EAAa,SAAUjB,EAASvI,QAChCwJ,EAAa,OAAQjB,EAASC,MAC9BgB,EAAa,YAAajB,EAASK,MACnCY,EAAa,cAAejB,EAASE,aACrCe,EAAa,QAASjB,EAASG,OAC/Bc,EAAa,SAAUjB,EAASI,QAChCa,EAAa,UAAWjB,EAASlQ,SACjCmR,EAAa,WAAYjB,EAAS3J,UAE9BoJ,EAAW5T,cAAc5E,EAAMua,wBAAwB,OAAQ/B,SAE7DrZ,EAAQa,EAAO,QAAS6J,GAE9BkO,EAAUA,EAAU,GAAG/N,GAAI,iBAAiB+N,IAAY/N,GAAI,aAC5DwQ,YAAYC,OAAO,CAAEpO,QAAS0L,EAAS2C,QAASF,YAAYG,WAAW,CAAE3a,WAC7E,CSpKkB4a,CAAOxO,KAAK+J,QAAS/J,KAAK+I,O,CAClC,MAAOvR,GACL,GAASA,MAAM,oBACfrC,QAAQqC,MAAMA,E,CAGlBwI,KAAKa,OAXwB,CAYjC,CAEA,GAASrB,GACLA,EAAMC,iBACN,MAAMqI,EAASyC,EAAE/K,EAAMG,eACjBD,EAAQoI,EAAO2G,QAAQ,SAAS9F,QACtCjJ,EAAMuB,IAAI,IACVvB,EAAM0I,KAAK,QAAS,IACpB1I,EAAM0I,KAAK,YAAa,IACxBN,EAAOyD,SAAS,WACpB,CAEA,GAAU/L,GACNA,EAAMC,iBACNO,KAAKa,OACT,EzBxLK,IAAW,E0BCR,gBAEZ6N,MAAMC,KAAK,SAAS,MCCb,WACH,MAAMtD,EAAW1U,KAAK2Q,KAAKsH,QAAQC,gBACnClY,KAAK2Q,KAAKsH,QAAQC,gBAAkBnS,MAAOoB,IACvC,MAAMgR,QAAezD,EAASvN,GAE9B,OADIgR,EAAOtW,QAAUsF,EAAQiR,QAKrCrS,eAAyBqS,GAGrB,MAAMC,GAFND,EAASvb,MAAMC,QAAQsb,GAAUA,EAAS,CAACA,IAEjBvU,QAAOC,GAAKA,EAAEmI,SAAS,eACjD,IAAK,MAAMhP,KAASob,EAAY,CAC5B,MAAMC,EAAiD,GACjDC,EAAmB,GACnBrb,EAAYD,EAAMC,UAElBsb,EAAiBzb,IACnB,MAAMgO,EAAQ+K,UAAU/Y,EAAK+N,QAAQvH,OAAOwH,OAE5C,IAAI0N,GAAW,EACf,IAAK,IAAIhV,EAAIsH,EAAMlJ,OAAS,EAAG4B,GAAK,EAAGA,IAC7B,KAAasH,EAAMtH,KACzBsH,EAAMgL,OAAOtS,EAAG,GAChBgV,GAAW,GAGXA,GAAUH,EAAOvW,KAAK,CAAE4K,IAAK5P,EAAK0I,GAAI,eAAgBsF,GAAQ,EAGtE,IAAK,MAAMhO,KAAQG,EAAU2K,KAGzB,GAFI1F,EAAWpF,IAAOyb,EAAczb,GAEhCf,EAAQe,EAAM,aAAc,CAC5B,MAAMwa,EAAWxa,EAAKf,QAAgB,OAAQ,gBAC9C,GAAIub,EAAU,CACV,MACM3T,EAAO,2BADAvF,EAAStB,EAAK4I,KAAM,CAAEpH,MAAO,gBAE1C+Z,EAAOvW,KAAK,CAAE4K,IAAK4K,EAAU,CAAC3T,IAAO,G,CAEzC2U,EAAOxW,KAAKhF,EAAK0I,G,CAIzB,IAAK,MAAM1I,KAAQG,EAAUqZ,KACrBva,EAAQe,EAAM,cAAcwb,EAAOxW,KAAKhF,EAAK0I,IAGrD,IAAK,MAAM1I,KAAQG,EAAUwb,UACrBvW,EAAWpF,IAAOyb,EAAczb,GAGxC,IAAK,MAAMA,KAAQG,EAAUyb,SACrBxW,EAAWpF,IAAOyb,EAAczb,GAGxC,IAAK,MAAMA,KAAQG,EAAU0b,kBACrB5c,EAAQe,EAAM,cAAcwb,EAAOxW,KAAKhF,EAAK0I,IAGrD,MAAMoT,EAAavb,EAAqBL,EAAOgE,EAAuB,CAAC,WACvE,GAAI4X,EAAY,CACZ,IAAI/V,EAAS+V,EAAW/N,QAAQvH,OAAOT,QAAQzG,OAAS,GACxDyG,EAASA,EAAOe,QAAOC,IAAMd,EAAcrG,SAASmH,KACpDwU,EAAOvW,KAAK,CAAE4K,IAAKkM,EAAWpT,GAAI,sBAAuB3C,IAEzD,MAAMgW,EAAe9c,EAA8BiB,EAAO,uBACtD6b,GACAR,EAAOvW,KAAK,CAAE4K,IAAKkM,EAAWpT,GAAI,CAAC,UAAUqT,WAAuB,M,CAI5E1c,EAAQa,EAAO,sBAAuB,IAClCqb,EAAOzW,QAAQ5E,EAAMua,wBAAwB,OAAQc,GACrDC,EAAO1W,QAAQ5E,EAAMma,wBAAwB,OAAQmB,E,CAEjE,CAzE6CQ,CAAU5R,EAAQiR,QAChDD,CAAM,CAErB,CDPIa,EAAqB,IAGzBjB,MAAMpE,GAAG,4BENF,SAAkCsF,EAA2B7O,GAChE,MAAMnN,EAAQgc,EAAMhc,MACpB,IAAKA,EAAMic,UrB0JR,SAAwBjc,GAC3B,MAAMC,EAAYD,EAAMC,UACxB,OACI6D,EAAW9D,IAAQ8P,KAAK1Q,OACxBY,EAAMoP,UACNnP,EAAUyb,SAASvD,MAAKrY,GAAQN,EAAiBM,EAAM0E,MACvDvE,EAAU2K,KAAKuN,MAAKrY,GAAQN,EAAiBM,EAAMwE,MACnDrE,EAAUwb,UAAUtD,MAAKrY,MAA8B,IAApBA,EAAKmP,aAAyBzP,EAAiBM,EAAMyE,IAEhG,CqBnK2B2X,CAAelc,GAAQ,OAE9C,MAAMmc,EAAQhP,EAAK7M,KAAK,uCACxB6b,EACKC,OAAO,uCAAuCvZ,EAAS,yDACvDvC,KAAK,YACLoW,GAAG,SAAS,IAAM,IAAIzB,iBAAiBjV,GAAOwN,QAAO,KAG1D2O,EACK7b,KAAK,sBACL+b,IAAI,SACJ3F,GAAG,SAAS9K,GAAS7I,KAAK2Q,KAAKsH,QAAQC,gBAAgB,CAAErP,QAAOuP,OAAQnb,KACjF,G","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/item.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/utils.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/data/consumables.ts","webpack:///./src/categories.ts","webpack:///./src/data/weapon.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/actor.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/skills.ts","webpack:///../../../../foundryVTT-projects/@utils/string.ts","webpack:///./src/data/familiar.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/uuid.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/spell.ts","webpack:///./src/apps/interface/accept.ts","webpack:///./src/apps/interface/alert.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/dc.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/item.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/languages.ts","webpack:///./src/apps/interface/data.ts","webpack:///../../../../foundryVTT-projects/@utils/utils.ts","webpack:///./src/apps/interface/search.ts","webpack:///./src/apps/interface/drop.ts","webpack:///./src/apps/interface.ts","webpack:///./src/main.ts","webpack:///./src/rest.ts","webpack:///./src/sheet.ts"],"sourcesContent":["export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: foundry.abstract.Document) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: foundry.abstract.Document, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId<T extends DocumentUUID>(doc: ClientDocument) {\r\n    return doc.getFlag('core', 'sourceId') as T | undefined\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocument, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocument, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","import { getSourceId, includesSourceId } from '@utils/foundry/flags'\r\n\r\ntype ActorItemTypes<A extends Actor> = (keyof A['itemTypes'])[]\r\n\r\nfunction getItemSourceIdCondition(sourceId: ItemUUID | ItemUUID[]) {\r\n    return Array.isArray(sourceId)\r\n        ? (item: Item) => includesSourceId(item, sourceId)\r\n        : (item: Item) => getSourceId(item) === sourceId\r\n}\r\n\r\nexport function getItems<A extends Actor, I extends Item = CollectionValue<A['items']>>(actor: A, itemTypes?: ActorItemTypes<A>) {\r\n    return (itemTypes ? itemTypes.flatMap(type => actor.itemTypes[type as string]) : actor.items) as Embedded<I>[]\r\n}\r\n\r\nexport function findItemWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID,\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).find(getItemSourceIdCondition(sourceId))\r\n}\r\n\r\nexport function hasItemWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID | ItemUUID[],\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).some(getItemSourceIdCondition(sourceId))\r\n}\r\n\r\nexport function filterItemsWithSourceId<A extends Actor, I extends Item = CollectionValue<A['items']>>(\r\n    actor: A,\r\n    sourceId: ItemUUID | ItemUUID[],\r\n    itemTypes?: ActorItemTypes<A>\r\n) {\r\n    return getItems<A, I>(actor, itemTypes).filter(getItemSourceIdCondition(sourceId))\r\n}\r\n","const wordCharacter = String.raw`[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacter = String.raw`[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacterRE = new RegExp(nonWordCharacter, 'gu')\r\n\r\nconst wordBoundary = String.raw`(?:${wordCharacter})(?=${nonWordCharacter})|(?:${nonWordCharacter})(?=${wordCharacter})`\r\nconst nonWordBoundary = String.raw`(?:${wordCharacter})(?=${wordCharacter})`\r\nconst lowerCaseLetter = String.raw`\\p{Lowercase_Letter}`\r\nconst upperCaseLetter = String.raw`\\p{Uppercase_Letter}`\r\nconst lowerCaseThenUpperCaseRE = new RegExp(`(${lowerCaseLetter})(${upperCaseLetter}${nonWordBoundary})`, 'gu')\r\n\r\nconst nonWordCharacterHyphenOrSpaceRE = /[^-\\p{White_Space}\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]/gu\r\nconst upperOrWordBoundariedLowerRE = new RegExp(`${upperCaseLetter}|(?:${wordBoundary})${lowerCaseLetter}`, 'gu')\r\n\r\n/** Check if an element is present in the provided set. Especially useful for checking against literal sets */\r\nexport function setHasElement<T extends Set<unknown>>(set: T, value: unknown): value is SetElement<T> {\r\n    return set.has(value)\r\n}\r\n\r\n/**\r\n * The system's sluggification algorithm for labels and other terms.\r\n * @param text The text to sluggify\r\n * @param [options.camel=null] The sluggification style to use\r\n */\r\nexport function sluggify(text: string, { camel = null }: { camel?: 'dromedary' | 'bactrian' | null } = {}): string {\r\n    // Sanity check\r\n    if (typeof text !== 'string') {\r\n        console.warn('Non-string argument passed to `sluggify`')\r\n        return ''\r\n    }\r\n\r\n    switch (camel) {\r\n        case null:\r\n            return text\r\n                .replace(lowerCaseThenUpperCaseRE, '$1-$2')\r\n                .toLowerCase()\r\n                .replace(/['’]/g, '')\r\n                .replace(nonWordCharacterRE, ' ')\r\n                .trim()\r\n                .replace(/[-\\s]+/g, '-')\r\n        case 'bactrian': {\r\n            const dromedary = sluggify(text, { camel: 'dromedary' })\r\n            return dromedary.charAt(0).toUpperCase() + dromedary.slice(1)\r\n        }\r\n        case 'dromedary':\r\n            return text\r\n                .replace(nonWordCharacterHyphenOrSpaceRE, '')\r\n                .replace(/[-_]+/g, ' ')\r\n                .replace(upperOrWordBoundariedLowerRE, (part, index) => (index === 0 ? part.toLowerCase() : part.toUpperCase()))\r\n                .replace(/\\s+/g, '')\r\n        default:\r\n            throw ErrorPF2e(\"I don't think that's a real camel.\")\r\n    }\r\n}\r\n\r\nexport function ErrorPF2e(message: string): Error {\r\n    return Error(`PF2e System | ${message}`)\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string>,\r\n    arg2?: boolean | Record<string, string>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n    }\r\n}\r\n","import { findItemWithSourceId } from '@utils/foundry/item'\r\n\r\nconst RATION_UUID = 'Compendium.pf2e.equipment-srd.L9ZV076913otGtiB'\r\n\r\nexport function getRations(actor: CharacterPF2e) {\r\n    return findItemWithSourceId<CharacterPF2e, ConsumablePF2e>(actor, RATION_UUID)\r\n}\r\n","import { getSourceId, includesSourceId } from '@utils/foundry/flags'\r\nimport { filterItemsWithSourceId, getItems } from '@utils/foundry/item'\r\nimport { hasLocalization, localize } from '@utils/foundry/localize'\r\nimport { getRations } from './data/consumables'\r\n\r\nexport const RULE_TYPES = ['addedLanguage', 'trainedSkill', 'addedResistance', 'ganziHeritage', 'thaumaturgeTome'] as const\r\nexport const MINDSMITH_WEAPON_UUID = 'Compendium.pf2e-dailies.equipment.VpmEozw21aRxX15P'\r\n\r\nexport const CATEGORY_DATA = [\r\n    // AddedFeat\r\n    {\r\n        type: 'addedFeat',\r\n        category: 'metamagical',\r\n        uuids: ['Compendium.pf2e.classfeatures.89zWKD2CN7nRu2xp'], // Metamagical Experimentation\r\n    },\r\n    // MindSmith\r\n    {\r\n        type: 'mindSmith',\r\n        category: 'mindsmith',\r\n        uuids: [\r\n            'Compendium.pf2e.feats-srd.juikoiIA0Jy8PboY', // Mind Smith Dedication\r\n            MINDSMITH_WEAPON_UUID, // Mind Weapon\r\n            'Compendium.pf2e.feats-srd.PccekOihIbRWdDky', // Malleable Mental Forge\r\n            'Compendium.pf2e.feats-srd.2uQbQgz1AbjzcFSp', // Runic Mind Smithing\r\n            'Compendium.pf2e.feats-srd.fgnfXwFcn9jZlXGD', // Advanced Runic Mind Smithing\r\n        ],\r\n    },\r\n    // TricksterAce\r\n    {\r\n        type: 'tricksterAce',\r\n        category: 'ace',\r\n        uuids: ['Compendium.pf2e.feats-srd.POrE3ZgBRdBL9MsW'], // Trickster's Ace\r\n    },\r\n    // ThaumaturgeTome\r\n    {\r\n        type: 'thaumaturgeTome',\r\n        category: 'tome',\r\n        uuids: [\r\n            'Compendium.pf2e.classfeatures.MyN1cQgE0HsLF20e', // Tome\r\n            'Compendium.pf2e.classfeatures.Obm4ItMIIr0whYeO', // Implement Adept\r\n            'Compendium.pf2e.classfeatures.ZEUxZ4Ta1kDPHiq5', // Second Adept\r\n            'Compendium.pf2e.feats-srd.yRRM1dsY6jakEMaC', // Intense Implement\r\n            'Compendium.pf2e.classfeatures.QEtgbY8N2V4wTbsI', // Implement Paragon\r\n        ],\r\n    },\r\n    // AddedResistance\r\n    {\r\n        type: 'addedResistance',\r\n        category: 'elementalist',\r\n        uuids: ['Compendium.pf2e.feats-srd.tx9pkrpmtqe4FnvS'], // Elementalist Dedication\r\n    },\r\n    // GanziHeritage\r\n    {\r\n        type: 'ganziHeritage',\r\n        category: 'ganzi',\r\n        uuids: ['Compendium.pf2e.heritages.3reGfXH0S82hM7Gp'], // Ganzi\r\n    },\r\n    // TrainedLore\r\n    {\r\n        type: 'trainedLore',\r\n        category: 'study',\r\n        uuids: ['Compendium.pf2e.feats-srd.aLJsBBZzlUK3G8MW'], // Quick Study\r\n    },\r\n    // TrainedSkill\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'ageless',\r\n        uuids: ['Compendium.pf2e.feats-srd.wylnETwIz32Au46y'], // Ageless Spirit\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'longevity',\r\n        uuids: ['Compendium.pf2e.feats-srd.WoLh16gyDp8y9WOZ'], // Ancestral Longevity\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'memories',\r\n        uuids: ['Compendium.pf2e.feats-srd.ptEOt3lqjxUnAW62'], // Ancient Memories\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'studies',\r\n        uuids: ['Compendium.pf2e.feats-srd.9bgl6qYWKHzqWZj0'], // Flexible Studies\r\n    },\r\n    // AddedLanguage\r\n    {\r\n        type: 'addedLanguage',\r\n        category: 'linguistics',\r\n        uuids: ['Compendium.pf2e.feats-srd.eCWQU16hRLfN1KaX'], // Ancestral Linguistics\r\n    },\r\n    {\r\n        type: 'addedLanguage',\r\n        category: 'borts',\r\n        uuids: ['Compendium.pf2e.equipment-srd.iS7hAQMAaThHYE8g'], // Bort's Blessing\r\n    },\r\n    // CombatFlexibility\r\n    {\r\n        type: 'combatFlexibility',\r\n        category: 'flexibility',\r\n        uuids: [\r\n            'Compendium.pf2e.classfeatures.8g6HzARbhfcgilP8', // Combat Flexibility\r\n            'Compendium.pf2e.classfeatures.W2rwudMNcAxs8VoX', // Improved Flexibility\r\n        ],\r\n    },\r\n    // ScrollSavant\r\n    {\r\n        type: 'scrollSavant',\r\n        category: 'savant',\r\n        uuids: ['Compendium.pf2e.feats-srd.u5DBg0LrBUKP0JsJ'], // Scroll Savant\r\n    },\r\n    // ScrollChain\r\n    {\r\n        type: 'scrollChain',\r\n        category: 'esoterica',\r\n        uuids: [\r\n            'Compendium.pf2e.feats-srd.OqObuRB8oVSAEKFR', // Scroll Esoterica\r\n            'Compendium.pf2e.feats-srd.nWd7m0yRcIEVUy7O', // Elaborate Scroll Esoterica\r\n            'Compendium.pf2e.feats-srd.LHjPTV5vP3MOsPPJ', // Grand Scroll Esoterica\r\n        ],\r\n    },\r\n    {\r\n        type: 'scrollChain',\r\n        category: 'trickster',\r\n        uuids: [\r\n            'Compendium.pf2e.feats-srd.ROAUR1GhC19Pjk9C', // Basic Scroll Cache\r\n            'Compendium.pf2e.feats-srd.UrOj9TROtn8nuxPf', // Expert Scroll Cache\r\n            'Compendium.pf2e.feats-srd.lIg5Gzz7W70jfbk1', // Master Scroll Cache\r\n        ],\r\n    },\r\n] as const\r\n\r\nconst { CATEGORIES, UUIDS, FIRST_FEATS, FIRST_EQUIPMENTS, FIRST_HERITAGES, RULES } = (() => {\r\n    const CATEGORIES = {} as Record<CategoryName, ItemUUID[]>\r\n    const UUIDS: Map<ItemUUID, Category & { index: number }> = new Map()\r\n    const RULES: ItemUUID[] = []\r\n    const FIRST_FEATS: ItemUUID[] = []\r\n    const FIRST_EQUIPMENTS: ItemUUID[] = []\r\n    const FIRST_HERITAGES: ItemUUID[] = []\r\n\r\n    for (const { type, category, uuids } of CATEGORY_DATA) {\r\n        const isRule = RULE_TYPES.includes(type as typeof RULE_TYPES[number])\r\n        CATEGORIES[category] ??= []\r\n\r\n        for (let index = 0; index < uuids.length; index++) {\r\n            const uuid = uuids[index]\r\n            CATEGORIES[category].push(uuid)\r\n            UUIDS.set(uuid, { type, category, index })\r\n            if (isRule) RULES.push(uuid)\r\n        }\r\n\r\n        // for fast check on any category\r\n        const firstUUID = uuids[0]\r\n        if (firstUUID.includes('equipment-srd')) FIRST_EQUIPMENTS.push(firstUUID)\r\n        else if (firstUUID.includes('heritages')) FIRST_HERITAGES.push(firstUUID)\r\n        else FIRST_FEATS.push(firstUUID)\r\n    }\r\n\r\n    return { CATEGORIES, UUIDS, FIRST_FEATS, FIRST_EQUIPMENTS, FIRST_HERITAGES, RULES }\r\n})()\r\n\r\nexport function hasAnyCategory(actor: CharacterPF2e) {\r\n    const itemTypes = actor.itemTypes\r\n    return (\r\n        getRations(actor)?.uses.value ||\r\n        actor.familiar ||\r\n        itemTypes.heritage.some(item => includesSourceId(item, FIRST_HERITAGES)) ||\r\n        itemTypes.feat.some(item => includesSourceId(item, FIRST_FEATS)) ||\r\n        itemTypes.equipment.some(item => !(item.isInvested === false) && includesSourceId(item, FIRST_EQUIPMENTS))\r\n    )\r\n}\r\n\r\nexport function getCategoryUUIDS(category: CategoryName) {\r\n    return CATEGORIES[category] as ItemUUID[]\r\n}\r\n\r\nexport function getRuleItems(actor: CharacterPF2e) {\r\n    return filterItemsWithSourceId(actor, RULES, ['feat', 'equipment', 'heritage'])\r\n}\r\n\r\nexport function isRuleItem(item: ItemPF2e) {\r\n    return includesSourceId(item, RULES)\r\n}\r\n\r\ntype ReturnedCategory<C extends Category = Category> = C & {\r\n    label: string\r\n    items: [ItemPF2e, ...(undefined | ItemPF2e)[]]\r\n}\r\n\r\ntype PreReturnedCategories = Partial<Record<CategoryName, Omit<ReturnedCategory, 'items'> & { items: (undefined | ItemPF2e)[] }>>\r\n\r\nexport function hasCategories(actor: CharacterPF2e) {\r\n    const categories: PreReturnedCategories = {}\r\n    const items = getItems(actor, ['heritage', 'feat', 'equipment', 'weapon'])\r\n\r\n    for (const item of items) {\r\n        const sourceId = getSourceId<ItemUUID>(item)\r\n        if (!sourceId || (item.isOfType('equipment') && item.isInvested === false)) continue\r\n\r\n        const entry = UUIDS.get(sourceId)\r\n        if (!entry) continue\r\n\r\n        const { category, index, type } = entry\r\n        categories[category] ??= { category, type, label: '', items: [] }\r\n        categories[category]!.items[index] = item\r\n\r\n        if (index === 0) {\r\n            const key = `label.${category}`\r\n            const label = hasLocalization(key) ? localize(key) : item.name\r\n            categories[category]!.label = label\r\n        }\r\n    }\r\n\r\n    return Object.values(categories).filter(x => x.items[0]) as ReturnedCategory[]\r\n}\r\n\r\nexport function isReturnedCategory<N extends CategoryType, C extends Category = ExtractedCategory<N>>(\r\n    object: ReturnedCategory,\r\n    category: N | N[]\r\n): object is ReturnedCategory<C> {\r\n    if (typeof category === 'string') return object.type === category\r\n    return category.includes(object.type as N)\r\n}\r\n","export const WEAPON_GROUPS = {\r\n    slashing: 'sword',\r\n    piercing: 'spear',\r\n    bludgeoning: 'club',\r\n} as const\r\n\r\nexport const WEAPON_DAMAGE_TYPES = Object.keys(WEAPON_GROUPS) as MindSmithDamageType[]\r\n\r\nexport const WEAPON_BASE_TYPES = {\r\n    '0': { die: 'd4', traits: ['finesse', 'agile'], usage: 'held-in-one-hand' },\r\n    '1': { die: 'd6', traits: ['finesse'], usage: 'held-in-one-hand' },\r\n    '2': { die: 'd8', traits: [], usage: 'held-in-one-hand' },\r\n    '3': { die: 'd10', traits: ['reach'], usage: 'held-in-two-hands' },\r\n} as const\r\n\r\nexport const WEAPON_TRAITS = ['grapple', 'nonlethal', 'shove', 'trip', 'modular'] as const\r\n\r\nexport const WEAPON_RUNES = ['corrosive', 'disrupting', 'flaming', 'frost', 'shock', 'thundering'] as const\r\n\r\nexport const WEAPON_GREATER_RUNES = [\r\n    'anarchic',\r\n    'axiomatic',\r\n    'greaterCorrosive',\r\n    'greaterDisrupting',\r\n    'greaterFlaming',\r\n    'greaterFrost',\r\n    'greaterShock',\r\n    'greaterThundering',\r\n    'holy',\r\n    'unholy',\r\n] as const\r\n\r\nexport const RUNE_PROPERTY_KEYS = ['propertyRune1', 'propertyRune2', 'propertyRune3', 'propertyRune4'] as const\r\n\r\nexport function getFreePropertySlot(\r\n    weapon: WeaponPF2e\r\n): null | 'propertyRune1' | 'propertyRune2' | 'propertyRune3' | 'propertyRune4' {\r\n    const potency = weapon.system.potencyRune.value\r\n    if (potency === null) return null\r\n\r\n    for (let i = 0; i < potency; i++) {\r\n        const property = RUNE_PROPERTY_KEYS[i]\r\n        if (!weapon.system[property].value) return property\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nexport function runetoLabel(rune: MindSmithWeaponAllRunes | '') {\r\n    return rune.replace('greater', 'greater ') as MindSmithWeaponAllRunes\r\n}\r\n\r\nexport function labelToRune(label: string) {\r\n    return label.replace('greater ', 'greater') as MindSmithWeaponAllRunes\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `modules/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","export function getHighestSpellSlot(actor: ActorPF2e) {\r\n    let maxSlot = 0\r\n    for (const entry of actor.spellcasting) {\r\n        if (entry.flags['pf2e-staves']) continue // we skip staff entries\r\n        const slots = entry.system.slots\r\n        for (const key in slots) {\r\n            const slot = slots[key as SlotKey]\r\n            if (slot.max) maxSlot = Math.max(maxSlot, Number(key.slice(4)))\r\n        }\r\n    }\r\n    return maxSlot as ZeroToEleven\r\n}\r\n\r\nexport const PROFICIENCY_RANKS = ['untrained', 'trained', 'expert', 'master', 'legendary'] as const\r\n","export const SKILL_DICTIONARY = {\r\n    acr: 'acrobatics',\r\n    arc: 'arcana',\r\n    ath: 'athletics',\r\n    cra: 'crafting',\r\n    dec: 'deception',\r\n    dip: 'diplomacy',\r\n    itm: 'intimidation',\r\n    med: 'medicine',\r\n    nat: 'nature',\r\n    occ: 'occultism',\r\n    prf: 'performance',\r\n    rel: 'religion',\r\n    soc: 'society',\r\n    ste: 'stealth',\r\n    sur: 'survival',\r\n    thi: 'thievery',\r\n} as const\r\n\r\nexport const SKILL_ABBREVIATIONS = Object.keys(SKILL_DICTIONARY) as (keyof typeof SKILL_DICTIONARY)[]\r\n\r\nexport const SKILL_LONG_FORMS = Object.values(SKILL_DICTIONARY)\r\n","export function cleanSplit(str: string | undefined) {\r\n    if (!str) return []\r\n    return str\r\n        .split(',')\r\n        .map(x => x.trim())\r\n        .filter(x => x)\r\n}\r\n\r\nexport function capitalize(str?: string) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n","export function getFamiliarPack() {\r\n    return game.packs.get<CompendiumCollection<EffectPF2e>>('pf2e.familiar-abilities')!\r\n}\r\n\r\nexport function familiarUUID(id: string) {\r\n    return `Compendium.pf2e.familiar-abilities.${id}` as ItemUUID\r\n}\r\n","export function chatUUID(uuid: string, name?: string) {\r\n    if (name) return `@UUID[${uuid}]{${name}}`\r\n    return `@UUID[${uuid}]`\r\n}\r\n\r\nexport function fakeChatUUID(name: string) {\r\n    return `<span style=\"background: #DDD;\r\n    padding: 1px 4px;\r\n    border: 1px solid var(--color-border-dark-tertiary);\r\n    border-radius: 2px;\r\n    white-space: nowrap;\r\n    word-break: break-all;\">${name}</span>`\r\n}\r\n","import { chatUUID } from '@utils/foundry/uuid'\r\n\r\nexport const MAGIC_TRADITIONS = new Set(['arcane', 'divine', 'occult', 'primal'] as const)\r\n\r\nexport const SPELL_COMPONENTS = ['focus', 'material', 'somatic', 'verbal'] as const\r\n\r\nconst scrolls: (ConsumablePF2e | null)[] = []\r\nexport async function createSpellScroll(uuid: ItemUUID, level: OneToTen | false, temp = false) {\r\n    const spell = (await fromUuid<SpellPF2e>(uuid))?.toObject()\r\n    if (!spell) return null\r\n\r\n    if (level === false) level = spell.system.level.value\r\n\r\n    const scrollUUID = getScrollCompendiumUUID(level)\r\n    scrolls[level] ??= await fromUuid<ConsumablePF2e>(scrollUUID)\r\n\r\n    const scroll = scrolls[level]?.toObject()\r\n    if (!scroll) return null\r\n\r\n    spell.system.location.heightenedLevel = level\r\n\r\n    scroll.name = `Scroll of ${spell.name} (Level ${level})`\r\n    scroll.system.temporary = temp\r\n    scroll.system.spell = spell\r\n    scroll.system.traits.value.push(...spell.system.traditions.value)\r\n\r\n    const sourceId = spell.flags.core?.sourceId\r\n    if (sourceId) scroll.system.description.value = `${chatUUID(sourceId)}\\n<hr />${scroll.system.description.value}`\r\n\r\n    return scroll\r\n}\r\n\r\nfunction getScrollCompendiumUUID(level: OneToTen): ItemUUID {\r\n    return `Compendium.pf2e.equipment-srd.${scrollCompendiumIds[level]}`\r\n}\r\n\r\nconst scrollCompendiumIds: Record<number, string> = {\r\n    1: 'RjuupS9xyXDLgyIr', // Compendium.pf2e.equipment-srd.RjuupS9xyXDLgyIr\r\n    2: 'Y7UD64foDbDMV9sx',\r\n    3: 'ZmefGBXGJF3CFDbn',\r\n    4: 'QSQZJ5BC3DeHv153',\r\n    5: 'tjLvRWklAylFhBHQ',\r\n    6: '4sGIy77COooxhQuC',\r\n    7: 'fomEZZ4MxVVK3uVu',\r\n    8: 'iPki3yuoucnj7bIt',\r\n    9: 'cFHomF3tty8Wi1e5',\r\n    10: 'o1XIHJ4MJyroAHfF',\r\n}\r\n","import { getFreePropertySlot, WEAPON_GROUPS } from '@data/weapon'\r\nimport { getCategoryUUIDS, getRuleItems, RULE_TYPES } from '@src/categories'\r\nimport { getRations } from '@src/data/consumables'\r\nimport { familiarUUID, getFamiliarPack } from '@src/data/familiar'\r\nimport { getFlag, hasSourceId, setFlag } from '@utils/foundry/flags'\r\nimport { findItemWithSourceId } from '@utils/foundry/item'\r\nimport { hasLocalization, localize, subLocalize } from '@utils/foundry/localize'\r\nimport { chatUUID, fakeChatUUID } from '@utils/foundry/uuid'\r\nimport { MODULE_ID } from '@utils/module'\r\nimport { PROFICIENCY_RANKS } from '@utils/pf2e/actor'\r\nimport { createSpellScroll } from '@utils/pf2e/spell'\r\nimport { sluggify } from '@utils/pf2e/utils'\r\nimport { capitalize } from '@utils/string'\r\n\r\nconst msg = subLocalize('interface.message')\r\n\r\ntype ReturnedMessage = { uuid?: ItemUUID; selected?: string; label?: string; random?: boolean }\r\n\r\nexport async function accept(html: JQuery, actor: CharacterPF2e) {\r\n    let message = ''\r\n    const flags = {} as SavedCategories\r\n    const fields = html.find('.window-content .content').find('input:not(.alert), select[data-type]').toArray() as TemplateField[]\r\n    const ruleItems = fields.some(field => RULE_TYPES.includes(field.dataset.type as RulesName)) ? getRuleItems(actor) : []\r\n    const addData: Partial<BaseItemSourcePF2e>[] = []\r\n    const updateData: EmbeddedDocumentUpdateData<ItemPF2e>[] = []\r\n    const rulesToAdd: Map<string, RuleElementSource[]> = new Map()\r\n    const addToFamiliar: string[] = []\r\n\r\n    const getRules = (item: ItemPF2e) => {\r\n        const id = item.id\r\n        const existing = rulesToAdd.get(id)\r\n        if (existing) return existing\r\n\r\n        const rules = deepClone(item._source.system.rules)\r\n\r\n        for (let i = rules.length - 1; i >= 0; i--) {\r\n            const rule = rules[i]\r\n            if (MODULE_ID in rule) rules.splice(i, 1)\r\n        }\r\n\r\n        rulesToAdd.set(id, rules)\r\n        return rules\r\n    }\r\n\r\n    const messages = {\r\n        languages: [] as ReturnedMessage[],\r\n        skills: [] as ReturnedMessage[],\r\n        tome: [] as ReturnedMessage[],\r\n        resistances: [] as ReturnedMessage[],\r\n        feats: [] as ReturnedMessage[],\r\n        scrolls: [] as ReturnedMessage[],\r\n        spells: [] as ReturnedMessage[],\r\n        mind: [] as ReturnedMessage[],\r\n        familiar: [] as ReturnedMessage[],\r\n    }\r\n\r\n    for (const field of fields) {\r\n        const type = field.dataset.type\r\n\r\n        if (type === 'scrollChain' || type === 'scrollSavant') {\r\n            const { uuid, category } = field.dataset\r\n            const level = Number(field.dataset.level) as OneToTen\r\n\r\n            const scroll = await createSpellScroll(uuid, level, true)\r\n            if (scroll) addData.push(scroll)\r\n\r\n            flags[category] ??= []\r\n            flags[category]!.push({ name: field.value, uuid })\r\n        } else if (type === 'addedFeat' || type === 'combatFlexibility') {\r\n            const { category, uuid, level } = field.dataset\r\n            const index = type === 'combatFlexibility' ? (level === '8' ? 0 : 1) : 0\r\n            const parentUUID = getCategoryUUIDS(category)[index]\r\n\r\n            if (parentUUID) {\r\n                const parent = findItemWithSourceId<CharacterPF2e, FeatPF2e>(actor, parentUUID, ['feat'])\r\n                if (parent) {\r\n                    const feat = await createTemporaryFeat(uuid, parent)\r\n                    if (feat) addData.push(feat)\r\n                }\r\n            }\r\n\r\n            if (type === 'combatFlexibility') {\r\n                flags[field.dataset.category] ??= []\r\n                flags[field.dataset.category]!.push({ name: field.value, uuid })\r\n            } else {\r\n                flags[field.dataset.category] = { uuid, name: field.value }\r\n            }\r\n        } else if (type === 'trainedLore') {\r\n            const category = field.dataset.category\r\n            const uuid = getCategoryUUIDS(category)[0]\r\n            const selected = field.value\r\n\r\n            const lore = createTemporaryLore(selected, 1)\r\n            addData.push(lore)\r\n            messages.skills.push({ uuid, selected, label: category })\r\n\r\n            flags[category] = selected\r\n        } else if (type === 'tricksterAce') {\r\n            const { category, uuid } = field.dataset\r\n            const name = field.value\r\n\r\n            const entrySlug = sluggify(\"Trickster's Ace\", { camel: 'dromedary' })\r\n            const spell = await createSpellcastingSpell(uuid, 4, entrySlug)\r\n\r\n            if (spell) {\r\n                const proficiency = actor.classDC?.slug || actor.class?.slug\r\n                const entry = createSpellcastingEntry(\"Trickster's Ace\", entrySlug, proficiency)\r\n                addData.push(spell)\r\n                addData.push(entry)\r\n            }\r\n\r\n            flags[category] = { name, uuid }\r\n        } else if (type === 'trainedSkill' || type === 'thaumaturgeTome') {\r\n            const { input, category } = field.dataset\r\n            const selected = field.value\r\n            const uuid = getCategoryUUIDS(category)[0]\r\n            const rank = type === 'thaumaturgeTome' ? Number(field.dataset.rank) : 1\r\n            const isInput = input === 'true'\r\n\r\n            if (isInput) {\r\n                const lore = createTemporaryLore(selected, rank)\r\n                addData.push(lore)\r\n            } else {\r\n                const ruleItem = ruleItems.find(item => hasSourceId(item, uuid))\r\n                if (!ruleItem) continue\r\n\r\n                const rules = getRules(ruleItem)\r\n                rules.push(createSkillRule(selected.toLowerCase(), rank))\r\n            }\r\n\r\n            const toSave = { selected: isInput ? selected : selected.toLowerCase(), input: isInput }\r\n\r\n            if (type === 'trainedSkill') {\r\n                messages.skills.push({ uuid, selected, label: category })\r\n                flags[field.dataset.category] = toSave\r\n            } else if (type === 'thaumaturgeTome') {\r\n                const category = field.dataset.category\r\n                messages.tome.push({ selected, label: PROFICIENCY_RANKS[rank] })\r\n                flags[category] ??= []\r\n                flags[category].push(toSave)\r\n            }\r\n        } else if (type === 'mindSmith') {\r\n            const { category, subcategory } = field.dataset\r\n            const uuids = getCategoryUUIDS(category)\r\n            const weapon = findItemWithSourceId<CharacterPF2e, WeaponPF2e>(actor, uuids[1], ['weapon'])\r\n            if (!weapon) continue\r\n\r\n            flags[category] ??= {}\r\n\r\n            if (subcategory === 'damage') {\r\n                const selected = field.value as MindSmithDamageType\r\n                updateData.push({ _id: weapon.id, 'system.damage.damageType': selected, 'system.group': WEAPON_GROUPS[selected] })\r\n                messages.mind.push({ selected, uuid: uuids[0], label: 'mindsmith' })\r\n                flags[category]![subcategory] = selected\r\n            } else if (subcategory === 'trait') {\r\n                const selected = field.value as MindSmithWeaponTrait\r\n                const traits = deepClone(weapon._source.system.traits?.value ?? [])\r\n                if (!traits.includes(selected)) traits.push(selected)\r\n                updateData.push({ _id: weapon.id, 'system.traits.value': traits })\r\n                messages.mind.push({ selected, uuid: uuids[2], label: 'mentalforge' })\r\n                flags[category]![subcategory] = selected\r\n            } else if (subcategory === 'rune') {\r\n                const propertySlot = getFreePropertySlot(weapon)\r\n                if (!propertySlot) continue\r\n\r\n                const selected = field.value as MindSmithWeaponAllRunes\r\n                updateData.push({ _id: weapon.id, [`system.${propertySlot}.value`]: selected })\r\n                messages.mind.push({ selected, uuid: uuids[3], label: 'runicmind' })\r\n                flags[category]![subcategory] = selected\r\n                setFlag(actor, 'weapon.runeProperty', propertySlot)\r\n            }\r\n        } else if (type === 'familiarAbility') {\r\n            const category = field.dataset.category\r\n            const id = field.value\r\n\r\n            if (actor.familiar) {\r\n                addToFamiliar.push(field.value)\r\n                messages.familiar.push({ uuid: familiarUUID(id) })\r\n            }\r\n\r\n            flags[category] ??= []\r\n            flags[category].push(id)\r\n        } else if (type === 'useRations') {\r\n            if (field.value !== 'true') continue\r\n\r\n            const rations = getRations(actor)\r\n            if (!rations?.uses.value) continue\r\n\r\n            const quantity = rations.quantity\r\n            const { value, max } = rations.uses\r\n\r\n            if (value <= 1) {\r\n                if (quantity <= 1) {\r\n                    rations.delete()\r\n                } else {\r\n                    updateData.push({\r\n                        _id: rations.id,\r\n                        'system.quantity': Math.max(rations.quantity - 1, 0),\r\n                        'system.charges.value': max,\r\n                    })\r\n                }\r\n            } else {\r\n                updateData.push({\r\n                    _id: rations.id,\r\n                    'system.charges.value': Math.max(value - 1, 0),\r\n                })\r\n            }\r\n\r\n            const remaining = (quantity - 1) * max + value\r\n            const name = remaining <= 1 ? fakeChatUUID(rations.name) : chatUUID(rations.uuid)\r\n            if (remaining <= 1) message += msg('rations.last', { name })\r\n            else if (remaining <= 3) message += msg('rations.almost', { name, nb: remaining - 1 })\r\n            else message += msg('rations.used', { name, nb: remaining - 1 })\r\n        } else {\r\n            const category = field.dataset.category\r\n            const uuid = getCategoryUUIDS(category)[0]\r\n            const ruleItem = ruleItems.find(item => hasSourceId(item, uuid))\r\n            if (!ruleItem) continue\r\n\r\n            const rules = getRules(ruleItem)\r\n\r\n            if (type === 'addedLanguage') {\r\n                const selected = field.value as Language\r\n                rules.push(createLanguageRule(selected))\r\n                messages.languages.push({ uuid, selected, label: category })\r\n                flags[field.dataset.category] = selected\r\n            } else if (type === 'addedResistance') {\r\n                const selected = field.value as ResistanceType\r\n                rules.push(createResistanceRule(selected, 'half'))\r\n                messages.resistances.push({ uuid, selected, label: category })\r\n                flags[field.dataset.category] = selected\r\n            } else if (type === 'ganziHeritage') {\r\n                const options = Array.from((field as SelectTemplateField).options).map(x => x.value) as ResistanceType[]\r\n                const selected = await randomOptions(options)\r\n                rules.push(createResistanceRule(selected, 'half'))\r\n                messages.resistances.push({ uuid, selected, label: category, random: true })\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const [id, rules] of rulesToAdd) {\r\n        updateData.push({ _id: id, 'system.rules': rules })\r\n    }\r\n\r\n    const pushMessages = (type: string, list: ReturnedMessage[]) => {\r\n        if (!list.length) return\r\n\r\n        if (message) message += '<hr />'\r\n\r\n        const title = msg.has(type) ? msg(type) : msg('gained', { type })\r\n        message += `<p><strong>${title}</strong></p>`\r\n\r\n        for (let { uuid, selected, label, random = false } of list) {\r\n            label = label && hasLocalization(`label.${label}`) ? localize(`label.${label}`) : label\r\n            label = capitalize(label)\r\n\r\n            message += '<p>'\r\n            message += uuid ? `${chatUUID(uuid, label)}` : `<strong>${label}</strong>`\r\n\r\n            if (selected) message += ` <span style=\"text-transform: capitalize;\">${selected}</span>`\r\n            if (random) message += ' <i class=\"fa-solid fa-dice-d20\"></i>'\r\n            message += '</p>'\r\n        }\r\n    }\r\n\r\n    if (actor.familiar) {\r\n        const familiar = actor.familiar\r\n\r\n        // we remove old abilities\r\n        const ids = familiar.itemTypes.effect.map(x => x.id)\r\n        if (ids.length) familiar.deleteEmbeddedDocuments('Item', ids)\r\n\r\n        if (addToFamiliar.length) {\r\n            const pack = getFamiliarPack()\r\n            const items: EffectSource[] = []\r\n\r\n            for (const id of addToFamiliar) {\r\n                const source = (await pack.getDocument(id))?.toObject()\r\n                if (source) items.push(source)\r\n            }\r\n\r\n            if (items.length) familiar.createEmbeddedDocuments('Item', items)\r\n        }\r\n    }\r\n\r\n    if (addData.length) {\r\n        const items = (await actor.createEmbeddedDocuments('Item', addData)) as ItemPF2e[]\r\n        for (const item of items) {\r\n            const uuid = item.uuid\r\n\r\n            if (item.type === 'feat') messages.feats.push({ uuid })\r\n            else if (item.type === 'consumable') messages.scrolls.push({ uuid })\r\n            // we populate the spellcasting entries with the spells\r\n            else if (item.type === 'spellcastingEntry') {\r\n                const slug = item.slug\r\n                const spells = items.filter(x => x.type === 'spell' && getFlag(x, 'parent') === slug) as SpellPF2e[]\r\n                for (const spell of spells) {\r\n                    const level = getFlag(spell, 'level')\r\n                    updateData.push({ _id: spell.id, 'system.location.value': item.id, 'system.location.heightenedLevel': level })\r\n                    messages.spells.push({ uuid: spell.uuid })\r\n                }\r\n            }\r\n\r\n            // we add a flag to the parent feat to have the cascade effect in the tab\r\n            const parentId = item.getFlag<string>('pf2e', 'grantedBy.id')\r\n            if (parentId) {\r\n                const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                const path = `flags.pf2e.itemGrants.${slug}`\r\n                updateData.push({ _id: parentId, [path]: { id: item.id, onDelete: 'detach' } })\r\n            }\r\n        }\r\n    }\r\n\r\n    pushMessages('languages', messages.languages)\r\n    pushMessages('skills', messages.skills)\r\n    pushMessages('tome', messages.tome)\r\n    pushMessages('mindsmith', messages.mind)\r\n    pushMessages('resistances', messages.resistances)\r\n    pushMessages('feats', messages.feats)\r\n    pushMessages('spells', messages.spells)\r\n    pushMessages('scrolls', messages.scrolls)\r\n    pushMessages('familiar', messages.familiar)\r\n\r\n    if (updateData.length) await actor.updateEmbeddedDocuments('Item', updateData)\r\n\r\n    await setFlag(actor, 'saved', flags)\r\n\r\n    message = message ? `${msg('changes')}<hr>${message}` : msg('noChanges')\r\n    ChatMessage.create({ content: message, speaker: ChatMessage.getSpeaker({ actor }) })\r\n}\r\n\r\nasync function randomOptions<T extends string>(options: T[]) {\r\n    const roll = (await new Roll(`1d${options.length}`).evaluate({ async: true })).total\r\n    return options[roll - 1]\r\n}\r\n\r\nfunction createTemporaryLore(name: string, rank: number) {\r\n    const data: Partial<BaseItemSourcePF2e> = {\r\n        type: 'lore',\r\n        img: 'systems/pf2e/icons/default-icons/lore.svg',\r\n        name: name,\r\n        flags: {\r\n            [MODULE_ID]: { temporary: true },\r\n        },\r\n    }\r\n\r\n    setProperty(data, 'system.proficient.value', rank)\r\n\r\n    return data\r\n}\r\n\r\nasync function createTemporaryFeat(uuid: ItemUUID, parent: FeatPF2e) {\r\n    const feat = (await fromUuid<FeatPF2e>(uuid))?.toObject()\r\n    if (!feat) return\r\n\r\n    setProperty(feat, 'flags.pf2e.grantedBy', { id: parent.id, onDelete: 'cascade' })\r\n    setProperty(feat, `flags.${MODULE_ID}.temporary`, true)\r\n\r\n    return feat\r\n}\r\n\r\nfunction createLanguageRule(language: string) {\r\n    return {\r\n        key: 'ActiveEffectLike',\r\n        mode: 'add',\r\n        path: 'system.traits.languages.value',\r\n        value: language,\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n\r\nfunction createSkillRule(skill: string, rank: number) {\r\n    return {\r\n        key: 'ActiveEffectLike',\r\n        mode: 'upgrade',\r\n        path: `system.skills.${skill}.rank`,\r\n        value: Number(rank),\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n\r\nfunction createResistanceRule(type: string, value: number | string | 'half') {\r\n    if (value === 'half') value = 'max(1,floor(@actor.level/2))'\r\n    return {\r\n        key: 'Resistance',\r\n        type,\r\n        value,\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n\r\nasync function createSpellcastingSpell(uuid: ItemUUID, level: OneToTen, entry: string) {\r\n    const spell = (await fromUuid<SpellPF2e>(uuid))?.toObject()\r\n    if (!spell) return\r\n\r\n    setProperty(spell, `flags.${MODULE_ID}`, { parent: entry, level })\r\n\r\n    return spell\r\n}\r\n\r\nfunction createSpellcastingEntry(name: string, slug: string, proficiency: string | undefined | null) {\r\n    const entry: Partial<BaseItemSourcePF2e> = {\r\n        type: 'spellcastingEntry',\r\n        img: 'systems/pf2e/icons/default-icons/spellcastingEntry.svg',\r\n        name,\r\n        flags: {\r\n            [MODULE_ID]: { temporary: true },\r\n        },\r\n    }\r\n\r\n    setProperty(entry, 'system', {\r\n        slug,\r\n        prepared: { value: 'innate' },\r\n        showSlotlessLevels: { value: false },\r\n        showUnpreparedSpells: { value: false },\r\n        proficiency: { value: 1, slug: proficiency },\r\n    })\r\n\r\n    return entry\r\n}\r\n","import { DailiesInterface } from '@apps/interface'\r\nimport { WEAPON_BASE_TYPES } from '@data/weapon'\r\nimport { MINDSMITH_WEAPON_UUID } from '@src/categories'\r\nimport { subLocalize } from '@utils/foundry/localize'\r\n\r\nconst localize = subLocalize('dialog')\r\n\r\nexport async function onAlert(this: DailiesInterface, event: JQuery.ClickEvent) {\r\n    event.preventDefault()\r\n\r\n    const input = event.currentTarget.previousElementSibling as AlertTemplateField\r\n    const { type } = input.dataset\r\n\r\n    if (type === 'mindSmith') {\r\n        onWeaponAlert.call(this)\r\n    }\r\n}\r\n\r\nasync function onWeaponAlert(this: DailiesInterface) {\r\n    let content = localize('weapon.flavor')\r\n    content += '<hr />'\r\n\r\n    for (const key of ['0', '1', '2', '3']) {\r\n        const label = localize(`weapon.option.${key}`)\r\n        content += `<label><input type=\"radio\" name=\"type\" value=\"${key}\">${label}</label>`\r\n    }\r\n\r\n    await Dialog.wait(\r\n        {\r\n            title: localize('weapon.title'),\r\n            content,\r\n            buttons: {\r\n                yes: {\r\n                    icon: '<i class=\"fas fa-save\"></i>',\r\n                    label: localize('weapon.accept'),\r\n                    callback: onWeaponSelected.bind(this),\r\n                },\r\n                no: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: localize('weapon.cancel'),\r\n                },\r\n            },\r\n            close: () => false,\r\n        },\r\n        {},\r\n        { id: 'pf2e-dailies-weapon', width: 600 }\r\n    )\r\n}\r\n\r\nasync function onWeaponSelected(this: DailiesInterface, html: JQuery) {\r\n    const selection = html.find('[name=type]:checked').val() as keyof typeof WEAPON_BASE_TYPES\r\n    if (!selection) return localize.warn('weapon.error.noSelection')\r\n\r\n    const weapon = (await fromUuid<WeaponPF2e>(MINDSMITH_WEAPON_UUID))?.toObject()\r\n    if (!weapon) return localize.warn('weapon.error.missing')\r\n\r\n    const stats = WEAPON_BASE_TYPES[selection]\r\n\r\n    setProperty(weapon, 'system.damage.die', stats.die)\r\n    setProperty(weapon, 'system.traits.value', stats.traits.slice())\r\n    setProperty(weapon, 'system.usage.value', stats.usage)\r\n\r\n    await this.actor.createEmbeddedDocuments('Item', [weapon])\r\n\r\n    this.render()\r\n}\r\n","const dcByLevel = new Map<number, number>()\r\ndcByLevel.set(-1, 13)\r\ndcByLevel.set(0, 14)\r\ndcByLevel.set(1, 15)\r\ndcByLevel.set(2, 16)\r\ndcByLevel.set(3, 18)\r\ndcByLevel.set(4, 19)\r\ndcByLevel.set(5, 20)\r\ndcByLevel.set(6, 22)\r\ndcByLevel.set(7, 23)\r\ndcByLevel.set(8, 24)\r\ndcByLevel.set(9, 26)\r\ndcByLevel.set(10, 27)\r\ndcByLevel.set(11, 28)\r\ndcByLevel.set(12, 30)\r\ndcByLevel.set(13, 31)\r\ndcByLevel.set(14, 32)\r\ndcByLevel.set(15, 34)\r\ndcByLevel.set(16, 35)\r\ndcByLevel.set(17, 36)\r\ndcByLevel.set(18, 38)\r\ndcByLevel.set(19, 39)\r\ndcByLevel.set(20, 40)\r\ndcByLevel.set(21, 42)\r\ndcByLevel.set(22, 44)\r\ndcByLevel.set(23, 46)\r\ndcByLevel.set(24, 48)\r\ndcByLevel.set(25, 50)\r\n\r\nconst dcAdjustments = new Map<DCAdjustment, number>()\r\ndcAdjustments.set('incredibly easy', -10)\r\ndcAdjustments.set('very easy', -5)\r\ndcAdjustments.set('easy', -2)\r\ndcAdjustments.set('normal', 0)\r\ndcAdjustments.set('hard', 2)\r\ndcAdjustments.set('very hard', 5)\r\ndcAdjustments.set('incredibly hard', 10)\r\n\r\n/**\r\n * Normal Level Based DCs\r\n * @param level\r\n * @param proficiencyWithoutLevel\r\n */\r\nexport function calculateDC(level: number, { proficiencyWithoutLevel = false, rarity = 'common' }: DCOptions = {}): number {\r\n    // assume level 0 if garbage comes in. We cast level to number because the backing data may actually have it\r\n    // stored as a string, which we can't catch at compile time\r\n    const dc = dcByLevel.get(level) ?? 14\r\n    if (proficiencyWithoutLevel) {\r\n        // -1 shouldn't be subtracted since it's just\r\n        // a creature level and not related to PC levels\r\n        return adjustDCByRarity(dc - Math.max(level, 0), rarity)\r\n    } else {\r\n        return adjustDCByRarity(dc, rarity)\r\n    }\r\n}\r\n\r\nexport function adjustDCByRarity(dc: number, rarity: Rarity = 'common') {\r\n    return adjustDC(dc, rarityToDCAdjustment(rarity))\r\n}\r\n\r\nexport function adjustDC(dc: number, adjustment: DCAdjustment = 'normal') {\r\n    return dc + (dcAdjustments.get(adjustment) ?? 0)\r\n}\r\n\r\nexport function rarityToDCAdjustment(rarity: Rarity = 'common'): PositiveDCAdjustment {\r\n    if (rarity === 'uncommon') {\r\n        return 'hard'\r\n    } else if (rarity === 'rare') {\r\n        return 'very hard'\r\n    } else if (rarity === 'unique') {\r\n        return 'incredibly hard'\r\n    } else {\r\n        return 'normal'\r\n    }\r\n}\r\n","import { adjustDCByRarity, calculateDC } from '@utils/pf2e/dc'\r\nimport { MAGIC_TRADITIONS } from '@utils/pf2e/spell'\r\nimport { setHasElement } from '@utils/pf2e/utils'\r\n\r\nexport function identifyItem(\r\n    item: PhysicalItemPF2e,\r\n    { proficiencyWithoutLevel = false, notMatchingTraditionModifier }: IdentifyItemOptions\r\n): GenericIdentifyDCs | IdentifyMagicDCs | IdentifyAlchemyDCs {\r\n    const baseDC = calculateDC(item.level, { proficiencyWithoutLevel })\r\n    const rarity = getDcRarity(item)\r\n    const dc = adjustDCByRarity(baseDC, rarity)\r\n    if (item.isMagical) {\r\n        return identifyMagic(item, dc, notMatchingTraditionModifier)\r\n    } else if (item.isAlchemical) {\r\n        return { cra: dc }\r\n    } else {\r\n        return { dc: dc }\r\n    }\r\n}\r\n\r\n/** All cursed items are incredibly hard to identify */\r\nfunction getDcRarity(item: PhysicalItemPF2e): Rarity {\r\n    return item.traits.has('cursed') ? 'unique' : item.rarity\r\n}\r\n\r\nfunction identifyMagic(item: PhysicalItemPF2e, baseDc: number, notMatchingTraditionModifier: number) {\r\n    const result = {\r\n        occult: baseDc,\r\n        primal: baseDc,\r\n        divine: baseDc,\r\n        arcane: baseDc,\r\n    }\r\n    const traditions = getMagicTraditions(item)\r\n    for (const key of MAGIC_TRADITIONS) {\r\n        // once an item has a magic tradition, all skills\r\n        // that don't match the tradition are hard\r\n        if (traditions.size > 0 && !traditions.has(key)) {\r\n            result[key] = baseDc + notMatchingTraditionModifier\r\n        }\r\n    }\r\n    return { arc: result.arcane, nat: result.primal, rel: result.divine, occ: result.occult }\r\n}\r\n\r\n/**\r\n * Extract all traits from an item, that match a magic tradition\r\n */\r\nfunction getMagicTraditions(item: PhysicalItemPF2e): Set<MagicTradition> {\r\n    const traits: string[] = item.system.traits.value\r\n    return new Set(traits.filter((t): t is MagicTradition => setHasElement(MAGIC_TRADITIONS, t)))\r\n}\r\n\r\nexport function getChoiSetRuleSelection<T extends unknown>(item: ItemPF2e, option: string) {\r\n    const rules = item._source.system.rules as ChoiceSetSource[]\r\n    const rule = rules.find(rule => rule.key === 'ChoiceSet' && rule.rollOption === option)\r\n    return rule?.selection as T | undefined\r\n}\r\n","export const LANGUAGE_LIST = [\r\n    'common',\r\n    'draconic',\r\n    'dwarven',\r\n    'elven',\r\n    'gnomish',\r\n    'goblin',\r\n    'halfling',\r\n    'jotun',\r\n    'orcish',\r\n    'sylvan',\r\n    'undercommon',\r\n    'ysoki',\r\n    'abyssal',\r\n    'adlet',\r\n    'aklo',\r\n    'akitonian',\r\n    'alghollthu',\r\n    'amurrun',\r\n    'anadi',\r\n    'ancient-osiriani',\r\n    'anugobu',\r\n    'arcadian',\r\n    'aquan',\r\n    'arboreal',\r\n    'auran',\r\n    'boggard',\r\n    'calda',\r\n    'caligni',\r\n    'celestial',\r\n    'cyclops',\r\n    'daemonic',\r\n    'destrachan',\r\n    'drooni',\r\n    'dziriak',\r\n    'ekujae',\r\n    'erutaki',\r\n    'formian',\r\n    'garundi',\r\n    'girtablilu',\r\n    'gnoll',\r\n    'goloma',\r\n    'grippli',\r\n    'hallit',\r\n    'hwan',\r\n    'iblydan',\r\n    'ignan',\r\n    'ikeshti',\r\n    'immolis',\r\n    'infernal',\r\n    'iruxi',\r\n    'jistkan',\r\n    'jyoti',\r\n    'kaava',\r\n    'kashrishi',\r\n    'kibwani',\r\n    'kitsune',\r\n    'kelish',\r\n    'lirgeni',\r\n    'mahwek',\r\n    'minaten',\r\n    'minkaian',\r\n    'mwangi',\r\n    'mzunu',\r\n    'nagaji',\r\n    'necril',\r\n    'ocotan',\r\n    'okaiyan',\r\n    'osiriani',\r\n    'protean',\r\n    'rasu',\r\n    'ratajin',\r\n    'razatlani',\r\n    'requian',\r\n    'russian',\r\n    'senzar',\r\n    'shadowtongue',\r\n    'shobhad',\r\n    'shisk',\r\n    'shoanti',\r\n    'shoony',\r\n    'skald',\r\n    'sphinx',\r\n    'strix',\r\n    'taldane',\r\n    'tekritanin',\r\n    'tengu',\r\n    'terran',\r\n    'thassilonian',\r\n    'tien',\r\n    'utopian',\r\n    'vanara',\r\n    'varisian',\r\n    'varki',\r\n    'vishkanyan',\r\n    'vudrani',\r\n    'wyrwood',\r\n    'xanmba',\r\n    'androffan',\r\n    'azlanti',\r\n    'grioth',\r\n    'kovintal',\r\n    'migo',\r\n    'munavri',\r\n    'samsaran',\r\n    'sasquatch',\r\n    'shae',\r\n    'yithian',\r\n    'druidic',\r\n] as const\r\n","import { hasCategories, isReturnedCategory } from '@src/categories'\r\nimport { getRations } from '@src/data/consumables'\r\nimport { getFamiliarPack } from '@src/data/familiar'\r\nimport {\r\n    getFreePropertySlot,\r\n    runetoLabel,\r\n    WEAPON_DAMAGE_TYPES,\r\n    WEAPON_GREATER_RUNES,\r\n    WEAPON_RUNES,\r\n    WEAPON_TRAITS,\r\n} from '@src/data/weapon'\r\nimport { getFlag } from '@utils/foundry/flags'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { PROFICIENCY_RANKS } from '@utils/pf2e/actor'\r\nimport { getChoiSetRuleSelection } from '@utils/pf2e/item'\r\nimport { LANGUAGE_LIST } from '@utils/pf2e/languages'\r\nimport { SKILL_LONG_FORMS } from '@utils/pf2e/skills'\r\nimport { capitalize } from '@utils/string'\r\n\r\nconst FOUR_ELEMENTS = ['air', 'earth', 'fire', 'water'] as const\r\nconst GANZI_RESISTANCES = ['acid', 'electricity', 'sonic'] as const\r\n\r\nconst sortOrder = new Proxy(\r\n    {\r\n        useRations: 0,\r\n        addedLanguage: 1,\r\n        trainedSkill: 2,\r\n        addedResistance: 3,\r\n        trainedLore: 4,\r\n    } as Partial<Record<CategoryType | symbol, number>>,\r\n    {\r\n        get(obj, prop) {\r\n            return prop in obj ? obj[prop as CategoryType] : 99\r\n        },\r\n    }\r\n) as Record<CategoryType, number>\r\n\r\nexport function getData(actor: CharacterPF2e) {\r\n    const actorLevel = actor.level\r\n    const flags = getFlag<SavedCategories>(actor, 'saved') ?? {}\r\n    const categories = hasCategories(actor)\r\n    const templates: BaseCategoryTemplate[] = []\r\n\r\n    if (actor.familiar) {\r\n        const category = 'familiar'\r\n        const rows: SelectRowTemplate<FamiliarAbility, string>[] = []\r\n        const nbAbilityies = actor.attributes.familiarAbilities.value\r\n        const options: SelectOption<string>[] = []\r\n\r\n        const indexes = getFamiliarPack().index\r\n        for (const index of indexes) {\r\n            options.push({ value: index._id, label: index.name })\r\n        }\r\n\r\n        for (let index = 0; index < nbAbilityies; index++) {\r\n            rows.push({\r\n                rowType: 'select',\r\n                value: flags[category]?.[index] ?? '',\r\n                options,\r\n                label: localize('label.ability', { nb: index + 1 }),\r\n            })\r\n        }\r\n\r\n        if (rows.length) {\r\n            templates.push({\r\n                type: 'familiarAbility',\r\n                category,\r\n                label: localize('label.familiar'),\r\n                rows,\r\n            })\r\n        }\r\n    }\r\n\r\n    const rations = getRations(actor)\r\n    if (rations?.uses.value) {\r\n        const { value, max } = rations.uses\r\n        const quantity = rations.quantity\r\n        const remaining = (quantity - 1) * max + value\r\n        const last = remaining <= 1\r\n\r\n        const row: TemplateRow<UseRationsTemplate> = {\r\n            rowType: 'select',\r\n            options: [\r\n                {\r\n                    value: false,\r\n                    label: localize('interface.rations.no'),\r\n                },\r\n                {\r\n                    value: true,\r\n                    label: last ? localize('interface.rations.last') : localize('interface.rations.yes', { nb: remaining }),\r\n                },\r\n            ],\r\n            value: false,\r\n        }\r\n        templates.push({\r\n            type: 'useRations',\r\n            category: 'rations',\r\n            label: rations.name,\r\n            rows: [row],\r\n        })\r\n    }\r\n\r\n    for (const entry of categories) {\r\n        if (isReturnedCategory(entry, ['scrollChain', 'scrollSavant'])) {\r\n            const { type, category, label, items } = entry\r\n            const rows: DropRowTemplate[] = []\r\n\r\n            const spellSlot = (level: number, index: number = level - 1) => {\r\n                const { name = '', uuid = '' } = flags[category]?.[index] ?? {}\r\n                rows.push({\r\n                    rowType: 'drop',\r\n                    value: name,\r\n                    label: game.i18n.localize(`PF2E.SpellLevel${level}`),\r\n                    dataset: { uuid, level },\r\n                })\r\n            }\r\n\r\n            if (type === 'scrollChain') {\r\n                // first feat\r\n                spellSlot(1)\r\n                if (actorLevel >= 8) spellSlot(2)\r\n\r\n                // second feat\r\n                if (items[1]) {\r\n                    spellSlot(3)\r\n                    if (actorLevel >= 14) spellSlot(4)\r\n                    if (actorLevel >= 16) spellSlot(5)\r\n                }\r\n\r\n                // third feat\r\n                if (items[2]) {\r\n                    spellSlot(6)\r\n                    if (actorLevel >= 20) spellSlot(7)\r\n                }\r\n            } else {\r\n                const { maxSlot, maxTradition } = getSpellcastingDetails(actor, 'arcane')\r\n\r\n                // legendary arcane\r\n                if (maxTradition >= 4 && maxSlot >= 6) spellSlot(maxSlot - 5, 3)\r\n\r\n                // master arcane\r\n                if (maxTradition >= 3 && maxSlot >= 5) spellSlot(maxSlot - 4, 2)\r\n\r\n                // no proficiency\r\n                spellSlot(maxSlot - 3, 1)\r\n                spellSlot(maxSlot - 2, 0)\r\n            }\r\n\r\n            templates.push({ type, category, label, rows })\r\n        } else if (isReturnedCategory(entry, 'trainedSkill')) {\r\n            const options = SKILL_LONG_FORMS.filter(x => actor.skills[x]!.rank! < 1)\r\n            if (!options.length) continue\r\n\r\n            const { type, category, label } = entry\r\n\r\n            let { selected = '', input = true } = flags[category] ?? {}\r\n            if (selected && !input && !options.includes(selected as SkillLongForm)) {\r\n                selected = ''\r\n                input = true\r\n            }\r\n\r\n            const row: TemplateRow<TrainedSkillTemplate> = {\r\n                rowType: 'combo',\r\n                options: arrayToSelectOptions(options),\r\n                selected: selected,\r\n                value: input ? selected : capitalize(selected),\r\n                dataset: { input },\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'thaumaturgeTome')) {\r\n            const { type, category, label, items } = entry\r\n            const rows: TemplateRows<ThaumaturgeTomeTemplate> = []\r\n            const actorSkills = actor.skills as Record<SkillLongForm, { rank: OneToFour }>\r\n\r\n            const skillSlot = (index: number, rank: OneToFour, options: SkillLongForm[]) => {\r\n                let { selected = '', input = true } = flags[category]?.[index] ?? {}\r\n                if (selected && !input && !options.includes(selected as SkillLongForm)) {\r\n                    selected = ''\r\n                    input = true\r\n                }\r\n\r\n                rows.push({\r\n                    rowType: 'combo',\r\n                    label: PROFICIENCY_RANKS[rank],\r\n                    options: arrayToSelectOptions(options),\r\n                    selected: selected,\r\n                    value: input ? selected : capitalize(selected),\r\n                    dataset: { input, rank },\r\n                })\r\n            }\r\n\r\n            const isTomeSelected = (index: number, option: 'adept' | 'paragon' = 'adept') => {\r\n                const item = items[index]\r\n                return item ? getChoiSetRuleSelection(item, option) === 'tome' : false\r\n            }\r\n\r\n            // Implement Paragon\r\n            if (isTomeSelected(4, 'paragon')) {\r\n                const skills = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 4)\r\n                if (!skills.length) continue\r\n                skillSlot(0, 4, skills)\r\n                skillSlot(1, 4, skills)\r\n            }\r\n\r\n            // Intense Implement or Second Adept or Implement Adept\r\n            else if (items[3] || isTomeSelected(2) || isTomeSelected(1)) {\r\n                const masters = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 3)\r\n                if (actorLevel >= 9) {\r\n                    if (!masters.length) continue\r\n                    skillSlot(0, 3, masters)\r\n                    skillSlot(1, 3, masters)\r\n                } else {\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (!experts.length) continue\r\n                    skillSlot(0, 2, experts)\r\n                    if (masters.length) skillSlot(1, 3, masters)\r\n                }\r\n            }\r\n\r\n            // base Tome\r\n            else {\r\n                if (actorLevel >= 5) {\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (!experts.length) continue\r\n                    skillSlot(0, 2, experts)\r\n                    skillSlot(1, 2, experts)\r\n                } else if (actorLevel >= 3) {\r\n                    const trained = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 1)\r\n                    if (!trained.length) continue\r\n                    skillSlot(0, 1, trained)\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (experts.length) skillSlot(1, 2, experts)\r\n                } else {\r\n                    const trained = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 1)\r\n                    if (!trained.length) continue\r\n                    skillSlot(0, 1, trained)\r\n                    skillSlot(1, 1, trained)\r\n                }\r\n            }\r\n\r\n            templates.push({ type, category, label, rows })\r\n        } else if (isReturnedCategory(entry, 'trainedLore')) {\r\n            const { type, category, label } = entry\r\n            const row: TemplateRow<TrainedLoreTemplate> = {\r\n                rowType: 'input',\r\n                placeholder: game.i18n.localize('PF2E.NewPlaceholders.Lore'),\r\n                value: flags[category] ?? '',\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'addedLanguage')) {\r\n            const actorLanguages = actor.system.traits.languages.value\r\n            const options = LANGUAGE_LIST.filter(x => !actorLanguages.includes(x)).sort()\r\n            if (!options.length) continue\r\n\r\n            const { type, category, label } = entry\r\n            const row: TemplateRow<AddedLanguageTemplate> = {\r\n                rowType: 'select',\r\n                options: arrayToSelectOptions(options),\r\n                value: flags[category] ?? '',\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'addedResistance')) {\r\n            const { type, category, label } = entry\r\n            const row: TemplateRow<AddedResistanceTemplate> = {\r\n                rowType: 'select',\r\n                options: arrayToSelectOptions(FOUR_ELEMENTS),\r\n                value: flags[category] ?? '',\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'combatFlexibility')) {\r\n            const { type, category, label, items } = entry\r\n            const selected = flags[category] ?? []\r\n            const rows: TemplateRows<CombatFlexibilityTemplate> = []\r\n\r\n            // Combat Flexibility\r\n            rows.push({\r\n                rowType: 'drop',\r\n                value: selected[0]?.name ?? '',\r\n                label: game.i18n.localize(`PF2E.Level8`),\r\n                dataset: {\r\n                    uuid: selected[0]?.uuid ?? '',\r\n                    level: 8,\r\n                },\r\n            })\r\n\r\n            // Improved Flexibility\r\n            if (items[1]) {\r\n                rows.push({\r\n                    rowType: 'drop',\r\n                    label: game.i18n.localize(`PF2E.Level14`),\r\n                    value: selected[1]?.name ?? '',\r\n                    dataset: {\r\n                        uuid: selected[1]?.uuid ?? '',\r\n                        level: 14,\r\n                    },\r\n                })\r\n            }\r\n\r\n            templates.push({ type, category, label, rows })\r\n        } else if (isReturnedCategory(entry, 'tricksterAce')) {\r\n            const { type, category, label } = entry\r\n            const { name = '', uuid = '' } = flags[category] ?? {}\r\n            const row: TemplateRow<TricksterAceTemplate> = {\r\n                rowType: 'drop',\r\n                value: name,\r\n                dataset: {\r\n                    uuid,\r\n                    level: 4,\r\n                },\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'ganziHeritage')) {\r\n            const { type, category, label } = entry\r\n            const row: TemplateRow<GanziHeritageTemplate> = {\r\n                rowType: 'random',\r\n                options: arrayToSelectOptions(GANZI_RESISTANCES),\r\n            }\r\n            templates.push({ type, category, label, rows: [row] })\r\n        } else if (isReturnedCategory(entry, 'mindSmith')) {\r\n            const { type, category, label, items } = entry\r\n            const weapon = items[1] as WeaponPF2e\r\n\r\n            const template: MindSmithTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: [{ rowType: 'alert', value: localize('interface.alert.weapon') }],\r\n            }\r\n            templates.push(template)\r\n\r\n            // we missing the weapon\r\n            if (!weapon) continue\r\n            template.rows[0] = {\r\n                rowType: 'select',\r\n                options: arrayToSelectOptions(WEAPON_DAMAGE_TYPES),\r\n                value: flags[category]?.damage ?? '',\r\n                label,\r\n                dataset: {\r\n                    subcategory: 'damage',\r\n                },\r\n            }\r\n\r\n            // Malleable Mental Forge\r\n            if (items[2]) {\r\n                template.rows[1] = {\r\n                    rowType: 'select',\r\n                    options: arrayToSelectOptions(WEAPON_TRAITS),\r\n                    value: flags[category]?.trait ?? '',\r\n                    label: localize('label.mentalforge'),\r\n                    dataset: {\r\n                        subcategory: 'trait',\r\n                    },\r\n                }\r\n            }\r\n\r\n            // we don't have the next feats\r\n            if (!items[3] && !items[4]) continue\r\n\r\n            // the weapon doesn't have any free property rune slot\r\n            if (!getFreePropertySlot(weapon)) continue\r\n\r\n            const runes = (items[4] ? WEAPON_GREATER_RUNES : WEAPON_RUNES) as readonly MindSmithWeaponAllRunes[]\r\n            const selected = flags[category]?.rune ?? ''\r\n\r\n            template.rows[2] = {\r\n                rowType: 'select',\r\n                options: runes.map(x => ({ value: x, label: runetoLabel(x) })),\r\n                value: selected && runes.includes(selected) ? selected : '',\r\n                label: localize('label.runicmind'),\r\n                dataset: {\r\n                    subcategory: 'rune',\r\n                },\r\n            }\r\n        } else if (isReturnedCategory(entry, 'addedFeat')) {\r\n            const { type, category } = entry\r\n            const row: TemplateRow<AddedFeatTemplate> = {\r\n                rowType: 'drop',\r\n                value: flags[category]?.name ?? '',\r\n                dataset: {\r\n                    uuid: flags[category]?.uuid ?? '',\r\n                    level: Math.floor(actorLevel / 2),\r\n                },\r\n            }\r\n            templates.push({\r\n                type,\r\n                category,\r\n                label: localize('label.metamagical'),\r\n                rows: [row],\r\n            })\r\n        }\r\n    }\r\n\r\n    const rows: BaseCategoryTemplate[] = []\r\n    const groups: BaseCategoryTemplate[] = []\r\n    for (const template of templates) {\r\n        if (template.rows.length > 1) groups.push(template)\r\n        else rows.push(template)\r\n    }\r\n\r\n    rows.sort((a, b) => sortOrder[a.type] - sortOrder[b.type])\r\n    groups.sort((a, b) => a.rows.length - b.rows.length)\r\n\r\n    return { rows, groups }\r\n}\r\n\r\nfunction arrayToSelectOptions<T extends string>(arr: readonly T[] | T[]) {\r\n    return arr.map(x => ({ value: x, label: x })) as SelectOption<T>[]\r\n}\r\n\r\nfunction getSpellcastingDetails(actor: ActorPF2e, tradition: MagicTradition) {\r\n    let maxSlot = 1\r\n    let maxTradition = 0\r\n\r\n    for (const entry of actor.spellcasting) {\r\n        if ('pf2e-staves' in entry.flags) continue // we skip staff entries\r\n\r\n        const slots = entry.system.slots\r\n        for (const key in slots) {\r\n            const slot = slots[key as SlotKey]\r\n            if (slot.max) maxSlot = Math.max(maxSlot, Number(key.slice(4)))\r\n        }\r\n\r\n        if (entry.tradition === tradition) maxTradition = Math.max(maxTradition, entry.rank)\r\n    }\r\n\r\n    return { maxSlot: Math.min(maxSlot, 10), maxTradition }\r\n}\r\n","export function sequenceArray<N extends number = number>(start: number, end: number) {\r\n    const levels: number[] = []\r\n\r\n    if (start <= end) {\r\n        for (let i = start; i <= end; i++) levels.push(i)\r\n    } else {\r\n        for (let i = start; i >= end; i--) levels.push(i)\r\n    }\r\n\r\n    return levels as N[]\r\n}\r\n","import { sequenceArray } from '@utils/utils'\r\n\r\nexport const CATEGORY_SEARCH = {\r\n    scrollChain: { category: ['spell'] } as InitialSpellFilters,\r\n    combatFlexibility: { feattype: ['class'], traits: ['fighter'] } as InitialFeatFilters,\r\n    scrollSavant: { category: ['spell'], traditions: ['arcane'] } as InitialSpellFilters,\r\n    tricksterAce: { category: ['cantrip', 'spell'] } as InitialSpellFilters,\r\n    addedFeat: {\r\n        metamagical: { feattype: ['class'], traits: ['metamagic'] } as InitialFeatFilters,\r\n    },\r\n} as const\r\n\r\nexport function onSearch(event: JQuery.ClickEvent<any, any, SearchButton>) {\r\n    event.preventDefault()\r\n\r\n    const data = event.currentTarget.dataset\r\n    const level = Number(data.level)\r\n\r\n    switch (data.type) {\r\n        case 'scrollChain':\r\n            searchSpell({ ...CATEGORY_SEARCH.scrollChain, level: sequenceArray<OneToTen>(1, level) })\r\n            break\r\n        case 'combatFlexibility':\r\n            searchFeat({ ...CATEGORY_SEARCH.combatFlexibility, level: { min: 1, max: level } })\r\n            break\r\n        case 'scrollSavant':\r\n            searchSpell({ ...CATEGORY_SEARCH.scrollSavant, level: sequenceArray<OneToTen>(1, level) })\r\n            break\r\n        case 'tricksterAce':\r\n            searchSpell({ ...CATEGORY_SEARCH.tricksterAce, level: sequenceArray<OneToTen>(1, level) })\r\n            break\r\n        case 'addedFeat':\r\n            searchAddedFeat(data.category, level)\r\n            break\r\n    }\r\n}\r\n\r\nfunction searchAddedFeat(category: CategoryName, level: number) {\r\n    switch (category) {\r\n        case 'metamagical':\r\n            searchFeat({ ...CATEGORY_SEARCH.addedFeat.metamagical, level: { min: 1, max: level } })\r\n            break\r\n    }\r\n}\r\n\r\nfunction searchSpell({ category = [], level = [], traditions = [] }: InitialSpellFilters = {}) {\r\n    const filter: InitialSpellFilters = {\r\n        category,\r\n        classes: [],\r\n        level,\r\n        rarity: [],\r\n        school: [],\r\n        source: [],\r\n        traditions,\r\n        traits: [],\r\n    }\r\n    game.pf2e.compendiumBrowser.openTab('spell', filter)\r\n}\r\n\r\nfunction searchFeat({ feattype = [], level = {}, traits = [] }: InitialFeatFilters = {}) {\r\n    const filter: InitialFeatFilters = {\r\n        feattype,\r\n        skills: [],\r\n        rarity: [],\r\n        source: [],\r\n        traits,\r\n        level,\r\n    }\r\n    game.pf2e.compendiumBrowser.openTab('feat', filter)\r\n}\r\n","import { subLocalize } from '@utils/foundry/localize'\r\nimport { CATEGORY_SEARCH } from './search'\r\n\r\nconst localize = subLocalize('interface.error.drop')\r\n\r\nexport async function dropped(event: ElementDragEvent) {\r\n    let target = $(event.target)\r\n    if (target.is('label')) target = target.next()\r\n\r\n    const categoryType = target.attr('data-type') as CategoryType | undefined\r\n    if (!categoryType) return\r\n\r\n    try {\r\n        const dataString = event.dataTransfer?.getData('text/plain')\r\n        const typeError = () => localize.warn('wrongDataType')\r\n\r\n        const data: { type: string; uuid: string } = JSON.parse(dataString)\r\n        console.log(data)\r\n        if (!data || data.type !== 'Item' || typeof data.uuid !== 'string') return typeError()\r\n\r\n        const item = await fromUuid<ItemPF2e>(data.uuid)\r\n        if (!item) return typeError()\r\n\r\n        switch (categoryType) {\r\n            case 'scrollChain':\r\n                droppedSpell(target, item, CATEGORY_SEARCH.scrollChain)\r\n                break\r\n            case 'combatFlexibility':\r\n                droppedFeat(target, item, CATEGORY_SEARCH.combatFlexibility)\r\n                break\r\n            case 'scrollSavant':\r\n                droppedSpell(target, item, CATEGORY_SEARCH.scrollSavant)\r\n                break\r\n            case 'tricksterAce':\r\n                droppedSpell(target, item, CATEGORY_SEARCH.tricksterAce, tricksterAceFilter)\r\n                break\r\n            case 'addedFeat':\r\n                droppedAddedFeat(target, item)\r\n                break\r\n        }\r\n    } catch (error) {}\r\n}\r\n\r\nfunction droppedAddedFeat(target: JQuery, item: ItemPF2e) {\r\n    const category = target.attr('data-category') as CategoryName\r\n\r\n    switch (category) {\r\n        case 'metamagical':\r\n            const filters = { ...CATEGORY_SEARCH.addedFeat.metamagical }\r\n            filters.traits = (filters.traits ?? [])?.slice()\r\n            filters.traits.push('wizard')\r\n            droppedFeat(target, item, filters)\r\n            break\r\n    }\r\n}\r\n\r\nfunction tricksterAceFilter(item: SpellPF2e) {\r\n    const castTime = item.system.time.value\r\n\r\n    if (castTime.includes('hour') || (castTime.includes('min') && parseInt(castTime) > 10)) {\r\n        localize.warn('wrongSpellTime', { time: '10 min' })\r\n        return false\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction droppedSpell(\r\n    target: JQuery,\r\n    item: ItemPF2e,\r\n    { category = [], traditions = [] }: InitialSpellFilters = {},\r\n    filter?: (item: SpellPF2e) => boolean\r\n) {\r\n    if (!item.isOfType('spell')) return localize.warn('wrongType', { type: 'spell' })\r\n\r\n    if (item.isCantrip && !category.includes('cantrip')) return localize.warn('cannotBe', { type: 'spell', not: 'cantrip' })\r\n    if (item.isRitual && !category.includes('ritual')) return localize.warn('cannotBe', { type: 'spell', not: 'ritual' })\r\n    if (item.isFocusSpell && !category.includes('focus')) return localize.warn('cannotBe', { type: 'spell', not: 'focus' })\r\n\r\n    if (traditions.length) {\r\n        const itemTraditions = item.system.traditions.value\r\n        for (const tradition of traditions) {\r\n            if (!itemTraditions.includes(tradition))\r\n                return localize.warn('wrongTrait', { type: 'spell', trait: tradition, category: 'tradition' })\r\n        }\r\n    }\r\n\r\n    if (item.level > Number(target.attr('data-level'))) return localize.warn('wrongLevel', { type: 'spell' })\r\n\r\n    if (filter && !filter(item)) return\r\n\r\n    droppedItem(target, item)\r\n}\r\n\r\nfunction droppedFeat(target: JQuery, item: ItemPF2e, { feattype = [], traits = [] }: InitialFeatFilters) {\r\n    if (!item.isOfType('feat') || item.isFeature) return localize.warn('wrongType', { type: 'feat' })\r\n    if (!feattype.includes(item.featType)) return localize.warn('cannotBe', { type: 'feat', not: item.featType })\r\n\r\n    if (traits.length) {\r\n        const itemTraits = item.system.traits.value\r\n        for (const trait of traits) {\r\n            if (!itemTraits.includes(trait)) return localize.warn('wrongTrait', { type: 'feat', trait, category: 'trait' })\r\n        }\r\n    }\r\n\r\n    if (item.level > Number(target.attr('data-level'))) return localize.warn('wrongLevel', { type: 'feat' })\r\n\r\n    droppedItem(target, item)\r\n}\r\n\r\nfunction droppedItem(target: JQuery, item: ItemPF2e) {\r\n    target.val(item.name)\r\n    target.attr('value', item.name)\r\n    target.attr('data-uuid', item.uuid)\r\n    target.nextAll('[data-action=\"clear\"]').first().removeClass('disabled')\r\n}\r\n","import { subLocalize } from '@utils/foundry/localize'\r\nimport { templatePath } from '@utils/foundry/path'\r\nimport { PROFICIENCY_RANKS } from '@utils/pf2e/actor'\r\nimport { SKILL_LONG_FORMS } from '@utils/pf2e/skills'\r\nimport { capitalize } from '@utils/string'\r\nimport { accept } from './interface/accept'\r\nimport { onAlert } from './interface/alert'\r\nimport { getData } from './interface/data'\r\nimport { dropped } from './interface/drop'\r\nimport { onSearch } from './interface/search'\r\n\r\nconst localize = subLocalize('interface')\r\n\r\nexport class DailiesInterface extends Application {\r\n    private _actor: CharacterPF2e\r\n    private _randomInterval?: NodeJS.Timer\r\n\r\n    constructor(actor: CharacterPF2e, options?: Partial<ApplicationOptions>) {\r\n        super(options)\r\n        this._actor = actor\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: 'pf2e-dailies-interface',\r\n            title: localize('title'),\r\n            template: templatePath('interface.hbs'),\r\n            height: 'auto',\r\n            submitOnClose: false,\r\n            submitOnChange: false,\r\n            dragDrop: [\r\n                {\r\n                    dropSelector: '[data-droppable=\"true\"]',\r\n                },\r\n            ],\r\n        })\r\n    }\r\n\r\n    get actor() {\r\n        return this._actor\r\n    }\r\n\r\n    getData(options?: Partial<FormApplicationOptions> | undefined) {\r\n        return mergeObject(super.getData(options), {\r\n            i18n: localize,\r\n            dump: ({\r\n                dataset,\r\n                value,\r\n                placeholder,\r\n            }: {\r\n                value?: string\r\n                placeholder?: string\r\n                dataset?: Record<string, string>\r\n            }) => {\r\n                let msg = ''\r\n                if (value) msg += ` value=\"${value}\"`\r\n                if (placeholder) msg += ` placeholder=\"${placeholder}\"`\r\n                if (dataset) Object.entries(dataset).forEach(([key, value]) => (msg += ` data-${key}=\"${value}\"`))\r\n                if (msg) msg += ' '\r\n                return msg\r\n            },\r\n            ...getData(this._actor),\r\n        })\r\n    }\r\n\r\n    render(force?: boolean | undefined, options?: RenderOptions | undefined): this | Promise<this> {\r\n        if (this._randomInterval) clearInterval(this._randomInterval)\r\n\r\n        if (this.element.find('select.random')) {\r\n            this._randomInterval = setInterval(() => {\r\n                const randoms = this.element.find<HTMLSelectElement>('select.random')\r\n                randoms.each((_, select) => {\r\n                    select.selectedIndex = (select.selectedIndex + 1) % select.options.length\r\n                })\r\n            }, 2000)\r\n        }\r\n\r\n        return super.render(force, options)\r\n    }\r\n\r\n    close(options?: ({ force?: boolean | undefined } & Record<string, unknown>) | undefined): Promise<void> {\r\n        if (this._randomInterval) clearInterval(this._randomInterval)\r\n        return super.close(options)\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html)\r\n\r\n        html.find<HTMLAnchorElement>('[data-action=alert]').on('click', onAlert.bind(this))\r\n\r\n        html.find<HTMLSelectElement>('.combo select').on('change', this.#onComboSelectChange.bind(this))\r\n        html.find<ComboTemplateFields>('.combo input').on('change', this.#onComboInputChange.bind(this))\r\n\r\n        html.find<SearchButton>('[data-action=search]').on('click', onSearch)\r\n\r\n        html.find<HTMLAnchorElement>('[data-action=clear]').on('click', this.#onClear.bind(this))\r\n        html.find<HTMLButtonElement>('[data-action=accept]').on('click', this.#onAccept.bind(this))\r\n        html.find<HTMLButtonElement>('[data-action=cancel]').on('click', this.#onCancel.bind(this))\r\n    }\r\n\r\n    protected async _onDrop(event: ElementDragEvent) {\r\n        dropped(event)\r\n    }\r\n\r\n    #onComboSelectChange(event: JQuery.ChangeEvent) {\r\n        const select = event.currentTarget\r\n        const input = select.nextElementSibling as HTMLInputElement\r\n        input.dataset.input = 'false'\r\n        input.value = capitalize(select.value)\r\n    }\r\n\r\n    #onComboInputChange(event: JQuery.ChangeEvent<any, any, ComboTemplateFields>) {\r\n        const input = event.currentTarget\r\n        const select = input.previousElementSibling as HTMLSelectElement\r\n        const value = input.value.toLowerCase()\r\n        const type = input.dataset.type\r\n\r\n        // TODO original should be conditional on type if more are to come\r\n        const original = SKILL_LONG_FORMS as string[]\r\n        const options = Array.from(select.options).map(x => x.value)\r\n\r\n        if (options.includes(value)) {\r\n            select.value = value\r\n            input.value = capitalize(value)\r\n            input.dataset.input = 'false'\r\n        } else if (original.includes(value)) {\r\n            if (type === 'thaumaturgeTome' || type === 'trainedSkill') {\r\n                const rank = type === 'thaumaturgeTome' ? Number(input.dataset.rank) : 1\r\n                localize.warn('error.input.proficiency', { rank: PROFICIENCY_RANKS[rank], proficiency: value })\r\n            }\r\n\r\n            select.value = ''\r\n            input.value = ''\r\n            input.dataset.input = 'true'\r\n        } else {\r\n            select.value = ''\r\n            input.dataset.input = 'true'\r\n        }\r\n    }\r\n\r\n    #lock() {\r\n        this.element.addClass('disabled')\r\n    }\r\n\r\n    #validate() {\r\n        const warns: string[] = []\r\n        const emptyInputs = this.element.find('input').filter((_, input) => !input.value)\r\n        const errorInputs = this.element.find('input.alert')\r\n\r\n        if (emptyInputs.length) warns.push('error.empty')\r\n        if (errorInputs.length) warns.push('error.unattended')\r\n\r\n        warns.forEach(x => localize.warn(x))\r\n\r\n        return !warns.length\r\n    }\r\n\r\n    async #onAccept(event: JQuery.ClickEvent) {\r\n        event.preventDefault()\r\n\r\n        if (!this.#validate()) return\r\n\r\n        this.#lock()\r\n\r\n        try {\r\n            await accept(this.element, this._actor)\r\n        } catch (error) {\r\n            localize.error('error.unexpected')\r\n            console.error(error)\r\n        }\r\n\r\n        this.close()\r\n    }\r\n\r\n    #onClear(event: JQuery.ClickEvent<any, any, HTMLAnchorElement>) {\r\n        event.preventDefault()\r\n        const target = $(event.currentTarget)\r\n        const input = target.prevAll('input').first()\r\n        input.val('')\r\n        input.attr('value', '')\r\n        input.attr('data-uuid', '')\r\n        target.addClass('disabled')\r\n    }\r\n\r\n    #onCancel(event: JQuery.ClickEvent) {\r\n        event.preventDefault()\r\n        this.close()\r\n    }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { wrapRestForTheNight } from './rest'\r\nimport { renderCharacterSheetPF2e } from './sheet'\r\n\r\nsetModuleID('pf2e-dailies')\r\n\r\nHooks.once('ready', () => {\r\n    wrapRestForTheNight()\r\n})\r\n\r\nHooks.on('renderCharacterSheetPF2e', renderCharacterSheetPF2e)\r\n","import { getFlag, setFlag } from '@utils/foundry/flags'\r\nimport { findItemWithSourceId } from '@utils/foundry/item'\r\nimport { MODULE_ID } from '@utils/module'\r\nimport { sluggify } from '@utils/pf2e/utils'\r\nimport { isRuleItem, MINDSMITH_WEAPON_UUID } from './categories'\r\nimport { WEAPON_TRAITS } from './data/weapon'\r\n\r\nexport function wrapRestForTheNight() {\r\n    const original = game.pf2e.actions.restForTheNight\r\n    game.pf2e.actions.restForTheNight = async (options: ActionDefaultOptions) => {\r\n        const result = await original(options)\r\n        if (result.length && options.actors) afterRest(options.actors)\r\n        return result\r\n    }\r\n}\r\n\r\nasync function afterRest(actors: ActorPF2e | ActorPF2e[]) {\r\n    actors = Array.isArray(actors) ? actors : [actors]\r\n\r\n    const characters = actors.filter(x => x.isOfType('character')) as CharacterPF2e[]\r\n    for (const actor of characters) {\r\n        const update: EmbeddedDocumentUpdateData<ItemPF2e>[] = []\r\n        const remove: string[] = []\r\n        const itemTypes = actor.itemTypes\r\n\r\n        const cleanRuleItem = (item: ItemPF2e) => {\r\n            const rules = deepClone(item._source.system.rules)\r\n\r\n            let modified = false\r\n            for (let i = rules.length - 1; i >= 0; i--) {\r\n                if (!(MODULE_ID in rules[i])) continue\r\n                rules.splice(i, 1)\r\n                modified = true\r\n            }\r\n\r\n            if (modified) update.push({ _id: item.id, 'system.rules': rules })\r\n        }\r\n\r\n        for (const item of itemTypes.feat) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n\r\n            if (getFlag(item, 'temporary')) {\r\n                const parentId = item.getFlag<string>('pf2e', 'grantedBy.id')\r\n                if (parentId) {\r\n                    const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                    const path = `flags.pf2e.itemGrants.-=${slug}`\r\n                    update.push({ _id: parentId, [path]: true })\r\n                }\r\n                remove.push(item.id)\r\n            }\r\n        }\r\n\r\n        for (const item of itemTypes.lore) {\r\n            if (getFlag(item, 'temporary')) remove.push(item.id)\r\n        }\r\n\r\n        for (const item of itemTypes.equipment) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n        }\r\n\r\n        for (const item of itemTypes.heritage) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n        }\r\n\r\n        for (const item of itemTypes.spellcastingEntry) {\r\n            if (getFlag(item, 'temporary')) remove.push(item.id)\r\n        }\r\n\r\n        const mindWeapon = findItemWithSourceId(actor, MINDSMITH_WEAPON_UUID, ['weapon'])\r\n        if (mindWeapon) {\r\n            let traits = mindWeapon._source.system.traits?.value ?? []\r\n            traits = traits.filter(x => !WEAPON_TRAITS.includes(x as MindSmithWeaponTrait))\r\n            update.push({ _id: mindWeapon.id, 'system.traits.value': traits })\r\n\r\n            const runeProperty = getFlag<RunePropertyKey | ''>(actor, 'weapon.runeProperty')\r\n            if (runeProperty) {\r\n                update.push({ _id: mindWeapon.id, [`system.${runeProperty}.value`]: null })\r\n            }\r\n        }\r\n\r\n        setFlag(actor, 'weapon.runeProperty', '')\r\n        if (update.length) actor.updateEmbeddedDocuments('Item', update)\r\n        if (remove.length) actor.deleteEmbeddedDocuments('Item', remove)\r\n    }\r\n}\r\n","import { DailiesInterface } from '@apps/interface'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { hasAnyCategory } from './categories'\r\n\r\nexport function renderCharacterSheetPF2e(sheet: CharacterSheetPF2e, html: JQuery) {\r\n    const actor = sheet.actor\r\n    if (!actor.isOwner || !hasAnyCategory(actor)) return\r\n\r\n    const small = html.find('aside .sidebar .hitpoints .hp-small')\r\n    small\r\n        .append(`<a class=\"roll-icon dailies\" title=\"${localize('sheet.title')}\"><i class=\"fas fa-mug-saucer\"></i></a>`)\r\n        .find('.dailies')\r\n        .on('click', () => new DailiesInterface(actor).render(true))\r\n\r\n    // TODO remove with next system update\r\n    small\r\n        .find('[data-action=rest]')\r\n        .off('click')\r\n        .on('click', event => game.pf2e.actions.restForTheNight({ event, actors: actor }))\r\n}\r\n"],"names":["getFlag","doc","key","fallback","setFlag","value","getSourceId","hasSourceId","sourceId","includesSourceId","list","includes","getItemSourceIdCondition","Array","isArray","item","getItems","actor","itemTypes","flatMap","type","items","findItemWithSourceId","find","wordCharacter","String","raw","nonWordCharacter","nonWordCharacterRE","RegExp","wordBoundary","nonWordBoundary","lowerCaseLetter","upperCaseLetter","lowerCaseThenUpperCaseRE","nonWordCharacterHyphenOrSpaceRE","upperOrWordBoundariedLowerRE","sluggify","text","camel","console","warn","replace","toLowerCase","trim","dromedary","charAt","toUpperCase","slice","part","index","Error","notify","str","arg1","arg2","arg3","data","undefined","permanent","ui","notifications","localize","args","game","i18n","format","hasLocalization","has","subLocalize","subKey","fn","Object","defineProperties","enumerable","configurable","info","error","RATION_UUID","getRations","RULE_TYPES","MINDSMITH_WEAPON_UUID","CATEGORY_DATA","category","uuids","CATEGORIES","UUIDS","FIRST_FEATS","FIRST_EQUIPMENTS","FIRST_HERITAGES","RULES","Map","isRule","length","uuid","push","set","firstUUID","getCategoryUUIDS","isRuleItem","isReturnedCategory","object","WEAPON_GROUPS","slashing","piercing","bludgeoning","WEAPON_DAMAGE_TYPES","keys","WEAPON_BASE_TYPES","die","traits","usage","WEAPON_TRAITS","WEAPON_RUNES","WEAPON_GREATER_RUNES","RUNE_PROPERTY_KEYS","getFreePropertySlot","weapon","potency","system","potencyRune","i","property","templatePath","path","filter","x","join","PROFICIENCY_RANKS","SKILL_DICTIONARY","acr","arc","ath","cra","dec","dip","itm","med","nat","occ","prf","rel","soc","ste","sur","thi","SKILL_LONG_FORMS","values","capitalize","getFamiliarPack","packs","get","familiarUUID","id","chatUUID","name","fakeChatUUID","Set","scrolls","async","createSpellScroll","level","temp","spell","fromUuid","toObject","scrollUUID","scrollCompendiumIds","getScrollCompendiumUUID","scroll","location","heightenedLevel","temporary","traditions","flags","core","description","msg","randomOptions","options","Roll","evaluate","total","createTemporaryLore","rank","img","setProperty","createTemporaryFeat","parent","feat","onDelete","createSkillRule","skill","mode","Number","createResistanceRule","createSpellcastingSpell","entry","createSpellcastingEntry","slug","proficiency","prepared","showSlotlessLevels","showUnpreparedSpells","onAlert","event","preventDefault","input","currentTarget","previousElementSibling","dataset","onWeaponAlert","call","this","content","Dialog","wait","title","buttons","yes","icon","label","callback","onWeaponSelected","bind","no","close","width","html","selection","val","stats","createEmbeddedDocuments","render","dcByLevel","dcAdjustments","getChoiSetRuleSelection","option","_source","rules","rule","rollOption","LANGUAGE_LIST","FOUR_ELEMENTS","GANZI_RESISTANCES","sortOrder","Proxy","useRations","addedLanguage","trainedSkill","addedResistance","trainedLore","obj","prop","getData","actorLevel","categories","isOfType","isInvested","hasCategories","templates","familiar","rows","nbAbilityies","attributes","familiarAbilities","indexes","_id","rowType","nb","rations","uses","max","remaining","quantity","last","row","spellSlot","maxSlot","maxTradition","getSpellcastingDetails","skills","selected","arrayToSelectOptions","actorSkills","skillSlot","isTomeSelected","masters","experts","trained","placeholder","actorLanguages","languages","sort","template","damage","subcategory","trait","runes","rune","map","Math","floor","groups","a","b","arr","tradition","spellcasting","slots","min","sequenceArray","start","end","levels","CATEGORY_SEARCH","scrollChain","combatFlexibility","feattype","scrollSavant","tricksterAce","addedFeat","metamagical","onSearch","searchSpell","searchFeat","searchAddedFeat","classes","rarity","school","source","pf2e","compendiumBrowser","openTab","tricksterAceFilter","castTime","time","parseInt","droppedSpell","target","isCantrip","not","isRitual","isFocusSpell","itemTraditions","attr","droppedItem","droppedFeat","isFeature","featType","itemTraits","nextAll","first","removeClass","DailiesInterface","Application","_actor","_randomInterval","constructor","super","defaultOptions","mergeObject","height","submitOnClose","submitOnChange","dragDrop","dropSelector","dump","entries","forEach","force","clearInterval","element","setInterval","each","_","select","selectedIndex","activateListeners","on","$","is","next","categoryType","dataString","dataTransfer","typeError","JSON","parse","log","filters","droppedAddedFeat","dropped","nextElementSibling","original","from","addClass","warns","emptyInputs","errorInputs","message","fields","toArray","ruleItems","some","field","filterItemsWithSourceId","getRuleItems","addData","updateData","rulesToAdd","addToFamiliar","getRules","existing","deepClone","splice","messages","tome","resistances","feats","spells","mind","parentUUID","lore","entrySlug","classDC","class","isInput","ruleItem","toSave","propertySlot","delete","random","pushMessages","ids","effect","deleteEmbeddedDocuments","pack","getDocument","parentId","updateEmbeddedDocuments","ChatMessage","create","speaker","getSpeaker","accept","prevAll","Hooks","once","actions","restForTheNight","result","actors","characters","update","remove","cleanRuleItem","modified","equipment","heritage","spellcastingEntry","mindWeapon","runeProperty","afterRest","wrapRestForTheNight","sheet","isOwner","hasAnyCategory","small","append","off"],"sourceRoot":""}