{"version":3,"file":"main.js","mappings":"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F,EAAiBgF,EAAMZ,EAClC,CA2BO,SAASa,EACZC,EACApB,GAEA,OAAOoB,EAAO7C,OAASyB,CAC3B,CC3KO,SAASqB,KAAgBC,GAE5B,OADAA,EAAOA,EAAKC,QAAOC,GAAkB,iBAANA,IACxB,WAAW,eAAuBF,EAAKG,KAAK,MACvD,CCAO,MAAMC,EAAoB,CAAC,YAAa,UAAW,SAAU,SAAU,aCX9C,IAAIC,IAAI,CAAC,SAAU,SAAU,SAAU,WCS3DvC,EAAY,qBCXjB,MAAMwC,EAAgB,CACzB,SACA,WACA,UACA,QACA,UACA,SACA,WACA,QACA,SACA,SACA,cACA,QACA,UACA,QACA,OACA,YACA,aACA,UACA,QACA,mBACA,UACA,WACA,QACA,WACA,QACA,UACA,QACA,UACA,YACA,UACA,WACA,aACA,SACA,UACA,SACA,UACA,UACA,UACA,aACA,QACA,SACA,UACA,SACA,OACA,UACA,QACA,UACA,UACA,WACA,QACA,UACA,QACA,QACA,YACA,UACA,UACA,SACA,UACA,SACA,UACA,WACA,SACA,QACA,SACA,SACA,SACA,UACA,WACA,UACA,OACA,UACA,YACA,UACA,UACA,SACA,eACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,UACA,aACA,QACA,SACA,eACA,OACA,UACA,SACA,WACA,QACA,aACA,UACA,UACA,SACA,YACA,UACA,SACA,WACA,OACA,UACA,WACA,YACA,OACA,UACA,WC5GSC,EAAmB,CAC5BC,IAAK,aACLC,IAAK,SACLC,IAAK,YACLC,IAAK,WACLC,IAAK,YACLC,IAAK,YACLC,IAAK,eACLC,IAAK,WACLC,IAAK,SACLC,IAAK,YACLC,IAAK,cACLC,IAAK,WACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WACLC,IAAK,YAKIC,GAFsBvD,OAAOwD,KAAKlB,GAEftC,OAAOyD,OAAOnB,ICfxCoB,EAAgB,CAAC,MAAO,QAAS,OAAQ,SACzCC,EAAoB,CAAC,OAAQ,cAAe,SAE5CC,EAAY,IAAIC,MAClB,CACIC,cAAe,EACfC,aAAc,EACdC,gBAAiB,EACjBC,YA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","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/flags.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/utils.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/notification.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/localize.ts","webpack:///./src/categories.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/actor.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/spell.ts","webpack:///./src/apps/interface/accept.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/languages.ts","webpack:///../../../../foundryVTT-projects/@utils/pf2e/skills.ts","webpack:///./src/apps/interface/data.ts","webpack:///../../../../foundryVTT-projects/@utils/utils.ts","webpack:///./src/apps/interface/search.ts","webpack:///./src/apps/interface/drop.ts","webpack:///./src/apps/interface.ts","webpack:///./src/main.ts","webpack:///./src/rest.ts","webpack:///./src/sheet.ts"],"sourcesContent":["export let MODULE_ID = ''\r\n\r\nexport function setModuleID(id: string) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function hasModuleFlag(doc: foundry.abstract.Document) {\r\n    return getProperty(doc, `flags.${MODULE_ID}`) !== undefined\r\n}\r\n\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string): T | undefined\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback: T): T\r\nexport function getFlag<T extends unknown>(doc: foundry.abstract.Document, key: string, fallback?: T): T | undefined {\r\n    return (doc.getFlag(MODULE_ID, key) as T | undefined) ?? fallback\r\n}\r\n\r\n/**\r\n * @template {foundry.Document} T\r\n * @param {T} doc\r\n * @param {string} key\r\n * @param {any} value\r\n * @returns T\r\n */\r\nexport function setFlag(doc: foundry.abstract.Document, key: string, value: unknown) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function getSourceId<T extends DocumentUUID>(doc: ClientDocument) {\r\n    return doc.getFlag('core', 'sourceId') as T | undefined\r\n}\r\n\r\nexport function hasSourceId(doc: ClientDocument, sourceId: DocumentUUID) {\r\n    return getSourceId(doc) === sourceId\r\n}\r\n\r\nexport function includesSourceId(doc: ClientDocument, list: DocumentUUID[]) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n","const wordCharacter = String.raw`[\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacter = String.raw`[^\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]`\r\nconst nonWordCharacterRE = new RegExp(nonWordCharacter, 'gu')\r\n\r\nconst wordBoundary = String.raw`(?:${wordCharacter})(?=${nonWordCharacter})|(?:${nonWordCharacter})(?=${wordCharacter})`\r\nconst nonWordBoundary = String.raw`(?:${wordCharacter})(?=${wordCharacter})`\r\nconst lowerCaseLetter = String.raw`\\p{Lowercase_Letter}`\r\nconst upperCaseLetter = String.raw`\\p{Uppercase_Letter}`\r\nconst lowerCaseThenUpperCaseRE = new RegExp(`(${lowerCaseLetter})(${upperCaseLetter}${nonWordBoundary})`, 'gu')\r\n\r\nconst nonWordCharacterHyphenOrSpaceRE = /[^-\\p{White_Space}\\p{Alphabetic}\\p{Mark}\\p{Decimal_Number}\\p{Join_Control}]/gu\r\nconst upperOrWordBoundariedLowerRE = new RegExp(`${upperCaseLetter}|(?:${wordBoundary})${lowerCaseLetter}`, 'gu')\r\n\r\n/** Check if an element is present in the provided set. Especially useful for checking against literal sets */\r\nexport function setHasElement<T extends Set<unknown>>(set: T, value: unknown): value is SetElement<T> {\r\n    return set.has(value)\r\n}\r\n\r\n/**\r\n * The system's sluggification algorithm for labels and other terms.\r\n * @param text The text to sluggify\r\n * @param [options.camel=null] The sluggification style to use\r\n */\r\nexport function sluggify(text: string, { camel = null }: { camel?: 'dromedary' | 'bactrian' | null } = {}): string {\r\n    // Sanity check\r\n    if (typeof text !== 'string') {\r\n        console.warn('Non-string argument passed to `sluggify`')\r\n        return ''\r\n    }\r\n\r\n    switch (camel) {\r\n        case null:\r\n            return text\r\n                .replace(lowerCaseThenUpperCaseRE, '$1-$2')\r\n                .toLowerCase()\r\n                .replace(/['’]/g, '')\r\n                .replace(nonWordCharacterRE, ' ')\r\n                .trim()\r\n                .replace(/[-\\s]+/g, '-')\r\n        case 'bactrian': {\r\n            const dromedary = sluggify(text, { camel: 'dromedary' })\r\n            return dromedary.charAt(0).toUpperCase() + dromedary.slice(1)\r\n        }\r\n        case 'dromedary':\r\n            return text\r\n                .replace(nonWordCharacterHyphenOrSpaceRE, '')\r\n                .replace(/[-_]+/g, ' ')\r\n                .replace(upperOrWordBoundariedLowerRE, (part, index) => (index === 0 ? part.toLowerCase() : part.toUpperCase()))\r\n                .replace(/\\s+/g, '')\r\n        default:\r\n            throw ErrorPF2e(\"I don't think that's a real camel.\")\r\n    }\r\n}\r\n\r\nexport function ErrorPF2e(message: string): Error {\r\n    return Error(`PF2e System | ${message}`)\r\n}\r\n","import { localize } from '@utils/foundry/localize'\r\n\r\nexport type NotifyArgs = [str: string, arg1?: boolean | Record<string, string>, arg2?: boolean]\r\n\r\nfunction notify(\r\n    str: string,\r\n    arg1?: 'warning' | 'info' | 'error' | boolean | Record<string, string>,\r\n    arg2?: boolean | Record<string, string>,\r\n    arg3?: boolean\r\n) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args: NotifyArgs) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { warn, NotifyArgs, info, error } from '@utils/foundry/notification'\r\n\r\nexport type LocalizeArgs = [key: string, data?: Record<string, string | number>]\r\n\r\nexport function localize(...args: LocalizeArgs) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key: string) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key: string) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function subLocalize(subKey: string) {\r\n    const fn = (...args: LocalizeArgs) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args: NotifyArgs) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args: NotifyArgs) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args: NotifyArgs) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: (key: string) => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn as ((...args: LocalizeArgs) => string) & {\r\n        warn: (...args: NotifyArgs) => void\r\n        info: (...args: NotifyArgs) => void\r\n        error: (...args: NotifyArgs) => void\r\n        has: (key: string) => boolean\r\n    }\r\n}\r\n","import { getSourceId, includesSourceId } from '@utils/foundry/flags'\r\nimport { filterItemsWithSourceId } from '@utils/foundry/item'\r\nimport { hasLocalization, localize } from '@utils/foundry/localize'\r\n\r\nexport const RULE_TYPES = ['addedLanguage', 'trainedSkill', 'addedResistance', 'thaumaturgeTome'] as const\r\n\r\nexport const CATEGORIES = [\r\n    // ThaumaturgeTome\r\n    {\r\n        type: 'thaumaturgeTome',\r\n        category: 'tome',\r\n        uuids: [\r\n            'Compendium.pf2e.classfeatures.MyN1cQgE0HsLF20e', // Tome\r\n            'Compendium.pf2e.classfeatures.Obm4ItMIIr0whYeO', // Implement Adept\r\n            'Compendium.pf2e.classfeatures.ZEUxZ4Ta1kDPHiq5', // Second Adept\r\n            'Compendium.pf2e.feats-srd.yRRM1dsY6jakEMaC', // Intense Implement\r\n            'Compendium.pf2e.classfeatures.QEtgbY8N2V4wTbsI', // Implement Paragon\r\n        ],\r\n    },\r\n    // Redistsance\r\n    {\r\n        type: 'addedResistance',\r\n        category: 'elementalist',\r\n        uuids: ['Compendium.pf2e.feats-srd.tx9pkrpmtqe4FnvS'],\r\n    },\r\n    {\r\n        type: 'addedResistance',\r\n        category: 'ganzi',\r\n        uuids: ['Compendium.pf2e.heritages.3reGfXH0S82hM7Gp'],\r\n    },\r\n    // TrainedLore\r\n    {\r\n        type: 'trainedLore',\r\n        category: 'study',\r\n        uuids: ['Compendium.pf2e.feats-srd.aLJsBBZzlUK3G8MW'],\r\n    },\r\n    // TrainedSkill\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'ageless',\r\n        uuids: ['Compendium.pf2e.feats-srd.wylnETwIz32Au46y'],\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'longevity',\r\n        uuids: ['Compendium.pf2e.feats-srd.WoLh16gyDp8y9WOZ'],\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'memories',\r\n        uuids: ['Compendium.pf2e.feats-srd.ptEOt3lqjxUnAW62'],\r\n    },\r\n    {\r\n        type: 'trainedSkill',\r\n        category: 'studies',\r\n        uuids: ['Compendium.pf2e.feats-srd.9bgl6qYWKHzqWZj0'],\r\n    },\r\n    // AddedLanguage\r\n    {\r\n        type: 'addedLanguage',\r\n        category: 'linguistics',\r\n        uuids: ['Compendium.pf2e.feats-srd.eCWQU16hRLfN1KaX'],\r\n    },\r\n    {\r\n        type: 'addedLanguage',\r\n        category: 'borts',\r\n        uuids: ['Compendium.pf2e.equipment-srd.iS7hAQMAaThHYE8g'],\r\n    },\r\n    // CombatFlexibility\r\n    {\r\n        type: 'combatFlexibility',\r\n        category: 'flexibility',\r\n        uuids: [\r\n            'Compendium.pf2e.classfeatures.8g6HzARbhfcgilP8', // Combat Flexibility\r\n            'Compendium.pf2e.classfeatures.W2rwudMNcAxs8VoX', // Improved Flexibility\r\n        ],\r\n    },\r\n    // ScrollSavant\r\n    {\r\n        type: 'scrollSavant',\r\n        category: 'savant',\r\n        uuids: ['Compendium.pf2e.feats-srd.u5DBg0LrBUKP0JsJ'],\r\n    },\r\n    // ScrollChain\r\n    {\r\n        type: 'scrollChain',\r\n        category: 'esoterica',\r\n        uuids: [\r\n            'Compendium.pf2e.feats-srd.OqObuRB8oVSAEKFR', // Scroll Esoterica\r\n            'Compendium.pf2e.feats-srd.nWd7m0yRcIEVUy7O', // Elaborate Scroll Esoterica\r\n            'Compendium.pf2e.feats-srd.LHjPTV5vP3MOsPPJ', // Grand Scroll Esoterica\r\n        ],\r\n    },\r\n    {\r\n        type: 'scrollChain',\r\n        category: 'trickster',\r\n        uuids: [\r\n            'Compendium.pf2e.feats-srd.ROAUR1GhC19Pjk9C', // Basic Scroll Cache\r\n            'Compendium.pf2e.feats-srd.UrOj9TROtn8nuxPf', // Expert Scroll Cache\r\n            'Compendium.pf2e.feats-srd.lIg5Gzz7W70jfbk1', // Master Scroll Cache\r\n        ],\r\n    },\r\n] as const\r\n\r\ntype UuidsType = [ItemUUID, Omit<Category, 'uuids'> & { index: number }]\r\nconst [UUIDS, EQUIP_UUID, FEATS_UUID, HERITAGES_UUID, RULES_UUIDS, FLATTENED] = (() => {\r\n    const UUIDS: UuidsType[] = []\r\n    const FLATTENED = {} as Record<CategoryName, ItemUUID[]>\r\n    const FEATS: ItemUUID[] = []\r\n    const EQUIP: ItemUUID[] = []\r\n    const HERITAGES: ItemUUID[] = []\r\n    const RULES: ItemUUID[] = []\r\n\r\n    for (const { type, category, uuids } of CATEGORIES) {\r\n        FLATTENED[category] ??= []\r\n        FLATTENED[category].push(...uuids)\r\n        UUIDS.push(...uuids.map((uuid, index) => [uuid, { type, category, index }] as UuidsType))\r\n\r\n        if (RULE_TYPES.includes(type as typeof RULE_TYPES[number])) RULES.push(...uuids)\r\n\r\n        // for fast check on any category\r\n        const firstUUID = uuids[0]\r\n        if (firstUUID.includes('equipment-srd')) EQUIP.push(firstUUID)\r\n        else if (firstUUID.includes('heritages')) HERITAGES.push(firstUUID)\r\n        else FEATS.push(firstUUID)\r\n    }\r\n\r\n    return [new Map(UUIDS), EQUIP, FEATS, HERITAGES, RULES, FLATTENED]\r\n})()\r\n\r\nexport function hasAnyCategory(actor: CharacterPF2e) {\r\n    const itemTypes = actor.itemTypes\r\n    return (\r\n        itemTypes.heritage.some(item => includesSourceId(item, HERITAGES_UUID)) ||\r\n        itemTypes.feat.some(item => includesSourceId(item, FEATS_UUID)) ||\r\n        itemTypes.equipment.some(item => !(item.isInvested === false) && includesSourceId(item, EQUIP_UUID))\r\n    )\r\n}\r\n\r\nexport function getCategoryUUIDS(category: CategoryName) {\r\n    return FLATTENED[category]\r\n}\r\n\r\nexport function getRuleItems(actor: CharacterPF2e) {\r\n    return filterItemsWithSourceId(actor, RULES_UUIDS, ['feat', 'equipment', 'heritage'])\r\n}\r\n\r\nexport function isRuleItem(item: ItemPF2e) {\r\n    return includesSourceId(item, RULES_UUIDS)\r\n}\r\n\r\nexport function hasCategories(actor: CharacterPF2e) {\r\n    const itemTypes = actor.itemTypes\r\n    const categories = {} as Record<CategoryName, Omit<ReturnedCategory, 'items'> & { items: (undefined | ItemPF2e)[] }>\r\n    const items = [...itemTypes.heritage, ...itemTypes.feat, ...itemTypes.equipment]\r\n\r\n    for (const item of items) {\r\n        const sourceId = getSourceId<ItemUUID>(item)\r\n        if (!sourceId || (item.isOfType('equipment') && !item.isInvested)) continue\r\n\r\n        const entry = UUIDS.get(sourceId)\r\n        if (!entry) continue\r\n\r\n        const { category, index, type } = entry\r\n        categories[category] ??= { category, type, label: '', items: [] }\r\n        categories[category].items[index] = item\r\n        if (index === 0) {\r\n            const key = `label.${category}`\r\n            const label = hasLocalization(key) ? localize(key) : item.name\r\n            categories[category].label = label\r\n        }\r\n    }\r\n\r\n    return Object.values(categories).filter(x => x.items[0]) as ReturnedCategory[]\r\n}\r\n\r\nexport function isCategory<N extends CategoryType, C extends Category = ExtractedCategory<N>>(\r\n    object: ReturnedCategory,\r\n    category: N\r\n): object is ReturnedCategory<C> {\r\n    return object.type === category\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `modules/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","export function getHighestSpellSlot(actor: ActorPF2e) {\r\n    let maxSlot = 0\r\n    for (const entry of actor.spellcasting) {\r\n        if (entry.flags['pf2e-staves']) continue // we skip staff entries\r\n        const slots = entry.system.slots\r\n        for (const key in slots) {\r\n            const slot = slots[key as SlotKey]\r\n            if (slot.max) maxSlot = Math.max(maxSlot, Number(key.slice(4)))\r\n        }\r\n    }\r\n    return maxSlot as ZeroToEleven\r\n}\r\n\r\nexport const PROFICIENCY_RANKS = ['untrained', 'trained', 'expert', 'master', 'legendary'] as const\r\n","import { chatUUID } from '@utils/foundry/uuid'\r\n\r\nexport const MAGIC_TRADITIONS = new Set(['arcane', 'divine', 'occult', 'primal'] as const)\r\n\r\nexport const SPELL_COMPONENTS = ['focus', 'material', 'somatic', 'verbal'] as const\r\n\r\nconst scrolls: (ConsumablePF2e | null)[] = []\r\nexport async function createSpellScroll(uuid: ItemUUID, level: OneToTen | false, temp = false) {\r\n    const spell = (await fromUuid<SpellPF2e>(uuid))?.toObject()\r\n    if (!spell) return null\r\n\r\n    if (level === false) level = spell.system.level.value\r\n\r\n    const scrollUUID = getScrollCompendiumUUID(level)\r\n    scrolls[level] ??= await fromUuid<ConsumablePF2e>(scrollUUID)\r\n\r\n    const scroll = scrolls[level]?.toObject()\r\n    if (!scroll) return null\r\n\r\n    spell.system.location.heightenedLevel = level\r\n\r\n    scroll.name = `Scroll of ${spell.name} (Level ${level})`\r\n    scroll.system.temporary = temp\r\n    scroll.system.spell = spell\r\n    scroll.system.traits.value.push(...spell.system.traditions.value)\r\n\r\n    const sourceId = spell.flags.core?.sourceId\r\n    if (sourceId) scroll.system.description.value = `${chatUUID(sourceId)}\\n<hr />${scroll.system.description.value}`\r\n\r\n    return scroll\r\n}\r\n\r\nfunction getScrollCompendiumUUID(level: OneToTen): ItemUUID {\r\n    return `Compendium.pf2e.equipment-srd.${scrollCompendiumIds[level]}`\r\n}\r\n\r\nconst scrollCompendiumIds: Record<number, string> = {\r\n    1: 'RjuupS9xyXDLgyIr', // Compendium.pf2e.equipment-srd.RjuupS9xyXDLgyIr\r\n    2: 'Y7UD64foDbDMV9sx',\r\n    3: 'ZmefGBXGJF3CFDbn',\r\n    4: 'QSQZJ5BC3DeHv153',\r\n    5: 'tjLvRWklAylFhBHQ',\r\n    6: '4sGIy77COooxhQuC',\r\n    7: 'fomEZZ4MxVVK3uVu',\r\n    8: 'iPki3yuoucnj7bIt',\r\n    9: 'cFHomF3tty8Wi1e5',\r\n    10: 'o1XIHJ4MJyroAHfF',\r\n}\r\n","import { getCategoryUUIDS, getRuleItems, RULE_TYPES } from '@src/categories'\r\nimport { hasSourceId, setFlag } from '@utils/foundry/flags'\r\nimport { findItemWithSourceId } from '@utils/foundry/item'\r\nimport { hasLocalization, localize, subLocalize } from '@utils/foundry/localize'\r\nimport { chatUUID } from '@utils/foundry/uuid'\r\nimport { MODULE_ID } from '@utils/module'\r\nimport { PROFICIENCY_RANKS } from '@utils/pf2e/actor'\r\nimport { createSpellScroll } from '@utils/pf2e/spell'\r\nimport { sluggify } from '@utils/pf2e/utils'\r\nimport { capitalize } from '@utils/string'\r\n\r\nconst msg = subLocalize('interface.message')\r\n\r\ntype ReturnedMessage = { uuid: ItemUUID; selected?: string; category?: CategoryName; label?: string }\r\n\r\nexport async function accept(html: JQuery, actor: CharacterPF2e) {\r\n    let message = ''\r\n    const flags = {} as SavedCategories\r\n    const fields = html.find('.window-content .content').find('input, select').toArray() as TemplateField[]\r\n    const ruleItems = fields.some(field => RULE_TYPES.includes(field.dataset.type as RulesName)) ? getRuleItems(actor) : []\r\n    const addData: Partial<BaseItemSourcePF2e>[] = []\r\n    const updateData: EmbeddedDocumentUpdateData<ItemPF2e>[] = []\r\n    const rulesToAdd: Map<string, RuleElementSource[]> = new Map()\r\n\r\n    const getRules = (item: ItemPF2e) => {\r\n        const id = item.id\r\n        const existing = rulesToAdd.get(id)\r\n        if (existing) return existing\r\n\r\n        const rules = deepClone(item._source.system.rules)\r\n\r\n        for (let i = rules.length - 1; i >= 0; i--) {\r\n            const rule = rules[i]\r\n            if ('pf2e-dailies' in rule) rules.splice(i, 1)\r\n        }\r\n\r\n        rulesToAdd.set(id, rules)\r\n        return rules\r\n    }\r\n\r\n    const messages = {\r\n        languages: [] as ReturnedMessage[],\r\n        skills: [] as ReturnedMessage[],\r\n        tome: [] as ReturnedMessage[],\r\n        resistances: [] as ReturnedMessage[],\r\n        feats: [] as ReturnedMessage[],\r\n        scrolls: [] as ReturnedMessage[],\r\n    }\r\n\r\n    for (const field of fields) {\r\n        const type = field.dataset.type\r\n\r\n        if (type === 'scrollChain' || type === 'scrollSavant') {\r\n            const { uuid, category } = field.dataset\r\n            const level = Number(field.dataset.level) as OneToTen\r\n            const name = field.value\r\n\r\n            if (uuid) {\r\n                const scroll = await createSpellScroll(uuid, level, true)\r\n                if (scroll) addData.push(scroll)\r\n            }\r\n\r\n            flags[category] ??= []\r\n            flags[category]!.push({ name, uuid })\r\n        } else if (type === 'combatFlexibility') {\r\n            const { category, uuid, level } = field.dataset\r\n            const name = field.value\r\n            const index = level === '8' ? 0 : 1\r\n            const parentUUID = getCategoryUUIDS(category)[index]\r\n\r\n            if (parentUUID) {\r\n                const parent = findItemWithSourceId(actor, parentUUID) as FeatPF2e\r\n                const feat = await createTemporaryFeat(uuid, parent)\r\n                if (feat) addData.push(feat)\r\n            }\r\n\r\n            flags[category] ??= []\r\n            flags[category]!.push({ name, uuid })\r\n        } else if (type === 'trainedLore') {\r\n            const category = field.dataset.category\r\n            const uuid = getCategoryUUIDS(category)[0]\r\n            const selected = field.value\r\n\r\n            if (uuid) {\r\n                const lore = createTemporaryLore(selected, 1)\r\n                addData.push(lore)\r\n                messages.skills.push({ uuid, selected, category })\r\n            }\r\n\r\n            flags[category] = selected\r\n        } else {\r\n            const category = field.dataset.category\r\n            const uuid = getCategoryUUIDS(category)[0]\r\n            const ruleItem = ruleItems.find(item => hasSourceId(item, uuid))\r\n            if (!ruleItem) continue\r\n\r\n            const selected = field.value\r\n            const rules = getRules(ruleItem)\r\n\r\n            if (type === 'addedLanguage') {\r\n                rules.push(createLanguageRule(selected))\r\n                messages.languages.push({ uuid, selected, category })\r\n            } else if (type === 'trainedSkill') {\r\n                rules.push(createSkillRule(selected, 1))\r\n                messages.skills.push({ uuid, selected, category })\r\n            } else if (type === 'addedResistance') {\r\n                rules.push(createResistanceRule(selected, 'half'))\r\n                messages.resistances.push({ uuid, selected, category })\r\n            } else if (type === 'thaumaturgeTome') {\r\n                const rank = field.dataset.rank\r\n                rules.push(createSkillRule(selected, rank))\r\n                messages.tome.push({ uuid, selected, category, label: PROFICIENCY_RANKS[rank] })\r\n            }\r\n\r\n            if (type === 'thaumaturgeTome') {\r\n                const category = field.dataset.category\r\n                flags[category] ??= []\r\n                flags[category]!.push(selected as SkillLongForm)\r\n            } else {\r\n                // @ts-ignore\r\n                flags[category] = selected\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const [id, rules] of rulesToAdd) {\r\n        updateData.push({ _id: id, 'system.rules': rules })\r\n    }\r\n\r\n    const pushMessages = (type: string, list: ReturnedMessage[]) => {\r\n        if (!list.length) return\r\n\r\n        if (message) message += '<hr />'\r\n\r\n        const title = msg.has(type) ? msg(type) : msg('gained', { type })\r\n        message += `<p><strong>${title}</strong></p>`\r\n\r\n        for (const { uuid, selected, category, label } of list) {\r\n            if (label) {\r\n                message += `<p><strong>${capitalize(label)}:</strong>`\r\n            } else {\r\n                const label = category && hasLocalization(`label.${category}`) ? localize(`label.${category}`) : undefined\r\n                message += `<p>${chatUUID(uuid, label)}`\r\n            }\r\n\r\n            if (selected) message += ` <span style=\"text-transform: capitalize;\">${selected}</span>`\r\n            message += '</p>'\r\n        }\r\n    }\r\n\r\n    if (addData.length) {\r\n        const items = (await actor.createEmbeddedDocuments('Item', addData)) as ItemPF2e[]\r\n        for (const item of items) {\r\n            const uuid = item.uuid\r\n\r\n            if (item.type === 'feat') messages.feats.push({ uuid })\r\n            else if (item.type !== 'lore') messages.scrolls.push({ uuid })\r\n\r\n            // we add a flag to the parent feat to have the cascade effect in the tab\r\n            const parentId = item.getFlag<string>('pf2e', 'grantedBy.id')\r\n            if (parentId) {\r\n                const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                const path = `flags.pf2e.itemGrants.${slug}`\r\n                updateData.push({ _id: parentId, [path]: { id: item.id, onDelete: 'detach' } })\r\n            }\r\n        }\r\n    }\r\n\r\n    pushMessages('languages', messages.languages)\r\n    pushMessages('skills', messages.skills)\r\n    pushMessages('tome', messages.tome)\r\n    pushMessages('resistances', messages.resistances)\r\n    pushMessages('feats', messages.feats)\r\n    pushMessages('scrolls', messages.scrolls)\r\n\r\n    if (updateData.length) await actor.updateEmbeddedDocuments('Item', updateData)\r\n\r\n    await setFlag(actor, 'saved', flags)\r\n\r\n    message = `${msg('changes')}<hr>${message}`\r\n    ChatMessage.create({ content: message, speaker: ChatMessage.getSpeaker({ actor }) })\r\n}\r\n\r\nfunction createTemporaryLore(name: string, rank: OneToFour) {\r\n    const data: Partial<BaseItemSourcePF2e> = {\r\n        type: 'lore',\r\n        img: 'systems/pf2e/icons/default-icons/lore.svg',\r\n        name: name,\r\n    }\r\n\r\n    setProperty(data, `flags.${MODULE_ID}.temporary`, true)\r\n    setProperty(data, 'system.proficient.value', rank)\r\n\r\n    return data\r\n}\r\n\r\nasync function createTemporaryFeat(uuid: ItemUUID, parent: FeatPF2e) {\r\n    const feat = ((await fromUuid(uuid)) as FeatPF2e | null)?.toObject()\r\n    if (!feat) return\r\n\r\n    setProperty(feat, 'flags.pf2e.grantedBy', { id: parent.id, onDelete: 'cascade' })\r\n    setProperty(feat, `flags.${MODULE_ID}.temporary`, true)\r\n\r\n    return feat\r\n}\r\n\r\nfunction createLanguageRule(language: string) {\r\n    return {\r\n        key: 'ActiveEffectLike',\r\n        mode: 'add',\r\n        path: 'system.traits.languages.value',\r\n        value: language,\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n\r\nfunction createSkillRule(skill: string, rank: OneToFour | `${OneToFour}`) {\r\n    return {\r\n        key: 'ActiveEffectLike',\r\n        mode: 'upgrade',\r\n        path: `system.skills.${skill}.rank`,\r\n        value: Number(rank),\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n\r\nfunction createResistanceRule(type: string, value: number | string | 'half') {\r\n    if (value === 'half') value = 'max(1,floor(@actor.level/2))'\r\n    return {\r\n        key: 'Resistance',\r\n        type,\r\n        value,\r\n        [MODULE_ID]: true,\r\n    } as const\r\n}\r\n","export const LANGUAGE_LIST = [\r\n    'common',\r\n    'draconic',\r\n    'dwarven',\r\n    'elven',\r\n    'gnomish',\r\n    'goblin',\r\n    'halfling',\r\n    'jotun',\r\n    'orcish',\r\n    'sylvan',\r\n    'undercommon',\r\n    'ysoki',\r\n    'abyssal',\r\n    'adlet',\r\n    'aklo',\r\n    'akitonian',\r\n    'alghollthu',\r\n    'amurrun',\r\n    'anadi',\r\n    'ancient-osiriani',\r\n    'anugobu',\r\n    'arcadian',\r\n    'aquan',\r\n    'arboreal',\r\n    'auran',\r\n    'boggard',\r\n    'calda',\r\n    'caligni',\r\n    'celestial',\r\n    'cyclops',\r\n    'daemonic',\r\n    'destrachan',\r\n    'drooni',\r\n    'dziriak',\r\n    'ekujae',\r\n    'erutaki',\r\n    'formian',\r\n    'garundi',\r\n    'girtablilu',\r\n    'gnoll',\r\n    'goloma',\r\n    'grippli',\r\n    'hallit',\r\n    'hwan',\r\n    'iblydan',\r\n    'ignan',\r\n    'ikeshti',\r\n    'immolis',\r\n    'infernal',\r\n    'iruxi',\r\n    'jistkan',\r\n    'jyoti',\r\n    'kaava',\r\n    'kashrishi',\r\n    'kibwani',\r\n    'kitsune',\r\n    'kelish',\r\n    'lirgeni',\r\n    'mahwek',\r\n    'minaten',\r\n    'minkaian',\r\n    'mwangi',\r\n    'mzunu',\r\n    'nagaji',\r\n    'necril',\r\n    'ocotan',\r\n    'okaiyan',\r\n    'osiriani',\r\n    'protean',\r\n    'rasu',\r\n    'ratajin',\r\n    'razatlani',\r\n    'requian',\r\n    'russian',\r\n    'senzar',\r\n    'shadowtongue',\r\n    'shobhad',\r\n    'shisk',\r\n    'shoanti',\r\n    'shoony',\r\n    'skald',\r\n    'sphinx',\r\n    'strix',\r\n    'taldane',\r\n    'tekritanin',\r\n    'tengu',\r\n    'terran',\r\n    'thassilonian',\r\n    'tien',\r\n    'utopian',\r\n    'vanara',\r\n    'varisian',\r\n    'varki',\r\n    'vishkanyan',\r\n    'vudrani',\r\n    'wyrwood',\r\n    'xanmba',\r\n    'androffan',\r\n    'azlanti',\r\n    'grioth',\r\n    'kovintal',\r\n    'migo',\r\n    'munavri',\r\n    'samsaran',\r\n    'sasquatch',\r\n    'shae',\r\n    'yithian',\r\n    'druidic',\r\n] as const\r\n","export const SKILL_DICTIONARY = {\r\n    acr: 'acrobatics',\r\n    arc: 'arcana',\r\n    ath: 'athletics',\r\n    cra: 'crafting',\r\n    dec: 'deception',\r\n    dip: 'diplomacy',\r\n    itm: 'intimidation',\r\n    med: 'medicine',\r\n    nat: 'nature',\r\n    occ: 'occultism',\r\n    prf: 'performance',\r\n    rel: 'religion',\r\n    soc: 'society',\r\n    ste: 'stealth',\r\n    sur: 'survival',\r\n    thi: 'thievery',\r\n} as const\r\n\r\nexport const SKILL_ABBREVIATIONS = Object.keys(SKILL_DICTIONARY) as (keyof typeof SKILL_DICTIONARY)[]\r\n\r\nexport const SKILL_LONG_FORMS = Object.values(SKILL_DICTIONARY)\r\n","import { hasCategories, isCategory } from '@src/categories'\r\nimport { getFlag } from '@utils/foundry/flags'\r\nimport { PROFICIENCY_RANKS } from '@utils/pf2e/actor'\r\nimport { LANGUAGE_LIST } from '@utils/pf2e/languages'\r\nimport { SKILL_LONG_FORMS } from '@utils/pf2e/skills'\r\n\r\nconst FOUR_ELEMENTS = ['air', 'earth', 'fire', 'water'] as const\r\nconst GANZI_RESISTANCES = ['acid', 'electricity', 'sonic'] as const\r\n\r\nconst sortOrder = new Proxy(\r\n    {\r\n        addedLanguage: 0,\r\n        trainedSkill: 1,\r\n        addedResistance: 2,\r\n        trainedLore: 3,\r\n        combatFlexibility: 4,\r\n    } as Partial<Record<CategoryType | symbol, number>>,\r\n    {\r\n        get(obj, prop) {\r\n            return prop in obj ? obj[prop as CategoryType] : 99\r\n        },\r\n    }\r\n) as Record<CategoryType, number>\r\n\r\nexport function getData(actor: CharacterPF2e) {\r\n    const actorLevel = actor.level\r\n    const flags = (getFlag(actor, 'saved') ?? {}) as SavedCategories\r\n    const categories = hasCategories(actor)\r\n    const templates: BaseCategoryTemplate[] = []\r\n\r\n    for (const entry of categories) {\r\n        if (isCategory(entry, 'scrollChain')) {\r\n            const { type, category, label, items } = entry\r\n            const slots: DropTemplate[] = []\r\n\r\n            const spellSlot = (level: OneToTen) => {\r\n                const { name, uuid } = flags[category]?.[level - 1] ?? { name: '', uuid: '' }\r\n                slots.push({ type: 'drop', level, name, uuid, label: game.i18n.localize(`PF2E.SpellLevel${level}`) })\r\n            }\r\n\r\n            // first feat\r\n            spellSlot(1)\r\n            if (actorLevel >= 8) spellSlot(2)\r\n\r\n            // second feat\r\n            if (items[1]) {\r\n                spellSlot(3)\r\n                if (actorLevel >= 14) spellSlot(4)\r\n                if (actorLevel >= 16) spellSlot(5)\r\n            }\r\n\r\n            // third feat\r\n            if (items[2]) {\r\n                spellSlot(6)\r\n                if (actorLevel >= 20) spellSlot(7)\r\n            }\r\n\r\n            const template: ScrollChainTemplate = { type, category, label, rows: slots }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'scrollSavant')) {\r\n            const { maxSlot, maxTradition } = getSpellcastingDetails(actor, 'arcane')\r\n            if (maxSlot < 4) continue\r\n\r\n            const { type, category, label } = entry\r\n            const slots: DropTemplate[] = []\r\n            const spellSlot = (index: number, level: number): DropTemplate => {\r\n                const { name, uuid } = flags[category]?.[index] ?? { name: '', uuid: '' }\r\n                return { type: 'drop', level, name, uuid, label: game.i18n.localize(`PF2E.SpellLevel${level}`) }\r\n            }\r\n\r\n            // legendary arcane\r\n            if (maxTradition >= 4 && maxSlot >= 6) slots.push(spellSlot(3, maxSlot - 5))\r\n\r\n            // master arcane\r\n            if (maxTradition >= 3 && maxSlot >= 5) slots.push(spellSlot(2, maxSlot - 4))\r\n\r\n            // no proficiency\r\n            slots.push(spellSlot(1, maxSlot - 3))\r\n            slots.push(spellSlot(0, maxSlot - 2))\r\n\r\n            const template: ScrollSavantTemplate = { type, category, label, rows: slots }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'trainedSkill')) {\r\n            const options = SKILL_LONG_FORMS.filter(x => actor.skills[x]!.rank! < 1)\r\n            if (!options.length) continue\r\n\r\n            const { type, category, label } = entry\r\n            const selected = flags[category] ?? ''\r\n            const template: TrainedSkillTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: [{ type: 'select', options, selected }],\r\n            }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'thaumaturgeTome')) {\r\n            const { type, category, label, items } = entry\r\n            const slots: ThaumaturgeTomeTemplateItem[] = []\r\n            const actorSkills = actor.skills as Record<SkillLongForm, { rank: OneToFour }>\r\n\r\n            const skillSlot = (index: number, rank: OneToFour, options: SkillLongForm[]) => {\r\n                const selected = flags[category]?.[index] ?? ''\r\n                slots.push({ type: 'select', label: PROFICIENCY_RANKS[rank], options, selected, rank })\r\n            }\r\n\r\n            const isTomeSelected = (index: number, option: 'adept' | 'paragon' = 'adept') => {\r\n                const item = items[index]\r\n                return item ? getRuleSelection(item, option) === 'tome' : false\r\n            }\r\n\r\n            // Implement Paragon\r\n            if (isTomeSelected(4, 'paragon')) {\r\n                const skills = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 4)\r\n                if (!skills.length) continue\r\n\r\n                skillSlot(0, 4, skills)\r\n                skillSlot(1, 4, skills)\r\n            }\r\n            // Intense Implement or Second Adept or Implement Adept\r\n            else if (items[3] || isTomeSelected(2) || isTomeSelected(1)) {\r\n                const masters = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 3)\r\n\r\n                if (actorLevel >= 9) {\r\n                    if (!masters.length) continue\r\n\r\n                    skillSlot(0, 3, masters)\r\n                    skillSlot(1, 3, masters)\r\n                } else {\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (!experts.length) continue\r\n\r\n                    skillSlot(0, 2, experts)\r\n                    if (masters.length) skillSlot(1, 3, masters)\r\n                }\r\n            } else {\r\n                if (actorLevel >= 5) {\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (!experts.length) continue\r\n\r\n                    skillSlot(0, 2, experts)\r\n                    skillSlot(1, 2, experts)\r\n                } else if (actorLevel >= 3) {\r\n                    const trained = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 1)\r\n                    if (!trained.length) continue\r\n\r\n                    skillSlot(0, 1, trained)\r\n\r\n                    const experts = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 2)\r\n                    if (experts.length) skillSlot(1, 2, experts)\r\n                } else {\r\n                    const trained = SKILL_LONG_FORMS.filter(x => actorSkills[x].rank < 1)\r\n                    if (!trained.length) continue\r\n\r\n                    skillSlot(0, 1, trained)\r\n                    skillSlot(1, 1, trained)\r\n                }\r\n            }\r\n\r\n            const template: ThaumaturgeTomeTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: slots,\r\n            }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'trainedLore')) {\r\n            const { type, category, label } = entry\r\n            const selected = flags[category] ?? ''\r\n            const template: TrainedLoreTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: [{ type: 'input', selected, placeholder: game.i18n.localize('PF2E.NewPlaceholders.Lore') }],\r\n            }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'addedLanguage')) {\r\n            const actorLanguages = actor.system.traits.languages.value\r\n            const options = LANGUAGE_LIST.filter(x => !actorLanguages.includes(x)).sort()\r\n            if (!options.length) continue\r\n\r\n            const { type, category, label } = entry\r\n            const selected = flags[category] ?? ''\r\n\r\n            const template: AddedLanguageTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: [{ type: 'select', options, selected }],\r\n            }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'addedResistance')) {\r\n            const { type, category, label } = entry\r\n            const selected = flags[category] ?? ''\r\n            const options = category === 'elementalist' ? FOUR_ELEMENTS : GANZI_RESISTANCES\r\n            const template: AddedResistanceTemplate = {\r\n                type,\r\n                category,\r\n                label,\r\n                rows: [{ type: 'select', options, selected }],\r\n            }\r\n            templates.push(template)\r\n        } else if (isCategory(entry, 'combatFlexibility')) {\r\n            const { type, category, label, items } = entry\r\n            const selected = flags[category] ?? []\r\n            // first feat\r\n            const slots: DropTemplate[] = [\r\n                {\r\n                    type: 'drop',\r\n                    label: game.i18n.localize(`PF2E.Level8`),\r\n                    name: selected[0]?.name ?? '',\r\n                    uuid: selected[0]?.uuid ?? '',\r\n                    level: 8,\r\n                },\r\n            ]\r\n            // second feat\r\n            if (items[1])\r\n                slots.push({\r\n                    type: 'drop',\r\n                    label: game.i18n.localize(`PF2E.Level14`),\r\n                    name: selected[1]?.name ?? '',\r\n                    uuid: selected[1]?.uuid ?? '',\r\n                    level: 14,\r\n                })\r\n            const template: CombatFlexibilityTemplate = { type, category, label, rows: slots }\r\n            templates.push(template)\r\n        }\r\n    }\r\n\r\n    const rows: BaseCategoryTemplate[] = []\r\n    const groups: BaseCategoryTemplate[] = []\r\n    for (const template of templates) {\r\n        if (template.rows.length > 1) groups.push(template)\r\n        else rows.push(template)\r\n    }\r\n\r\n    rows.sort((a, b) => sortOrder[a.type] - sortOrder[b.type])\r\n    groups.sort((a, b) => a.rows.length - b.rows.length)\r\n\r\n    return { rows, groups }\r\n}\r\n\r\nfunction getRuleSelection<T extends unknown>(item: ItemPF2e, option: string) {\r\n    const rules = item._source.system.rules as ChoiceSetSource[]\r\n    const rule = rules.find(rule => rule.key === 'ChoiceSet' && rule.rollOption === option)\r\n    return rule?.selection as T | undefined\r\n}\r\n\r\nfunction getSpellcastingDetails(actor: ActorPF2e, tradition: MagicTradition) {\r\n    let maxSlot = 0\r\n    let maxTradition = 0\r\n\r\n    for (const entry of actor.spellcasting) {\r\n        if ('pf2e-staves' in entry.flags) continue // we skip staff entries\r\n\r\n        const slots = entry.system.slots\r\n        for (const key in slots) {\r\n            const slot = slots[key as SlotKey]\r\n            if (slot.max) maxSlot = Math.max(maxSlot, Number(key.slice(4)))\r\n        }\r\n\r\n        if (entry.tradition === tradition) maxTradition = Math.max(maxTradition, entry.rank)\r\n    }\r\n\r\n    return { maxSlot: Math.clamped(maxSlot, 1, 10), maxTradition }\r\n}\r\n","export function sequenceArray<N extends number = number>(start: number, end: number) {\r\n    const levels: number[] = []\r\n\r\n    if (start <= end) {\r\n        for (let i = start; i <= end; i++) levels.push(i)\r\n    } else {\r\n        for (let i = start; i >= end; i--) levels.push(i)\r\n    }\r\n\r\n    return levels as N[]\r\n}\r\n","import { sequenceArray } from '@utils/utils'\r\n\r\nexport const CATEGORY_SEARCH = {\r\n    scrollChain: { category: ['spell'] } as InitialSpellFilters,\r\n    combatFlexibility: { feattype: ['class'], traits: ['fighter'] } as InitialFeatFilters,\r\n    scrollSavant: { category: ['spell'], traditions: ['arcane'] } as InitialSpellFilters,\r\n} as const\r\n\r\nexport function search(event: JQuery.ClickEvent<any, any, SearchTemplateButton>) {\r\n    event.preventDefault()\r\n\r\n    const data = event.currentTarget.dataset\r\n    const level = Number(data.level)\r\n\r\n    switch (data.type) {\r\n        case 'scrollChain':\r\n            searchSpell({\r\n                ...CATEGORY_SEARCH.scrollChain,\r\n                level: sequenceArray<OneToTen>(1, level),\r\n            })\r\n            break\r\n        case 'combatFlexibility':\r\n            searchFeat({\r\n                ...CATEGORY_SEARCH.combatFlexibility,\r\n                level: { min: 1, max: level },\r\n            })\r\n            break\r\n        case 'scrollSavant':\r\n            searchSpell({\r\n                ...CATEGORY_SEARCH.scrollSavant,\r\n                level: sequenceArray<OneToTen>(1, level),\r\n            })\r\n            break\r\n    }\r\n}\r\n\r\nfunction searchSpell({ category = [], level = [], traditions = [] }: InitialSpellFilters = {}) {\r\n    const filter: InitialSpellFilters = {\r\n        category,\r\n        classes: [],\r\n        level,\r\n        rarity: [],\r\n        school: [],\r\n        source: [],\r\n        traditions,\r\n        traits: [],\r\n    }\r\n    game.pf2e.compendiumBrowser.openTab('spell', filter)\r\n}\r\n\r\nfunction searchFeat({ feattype = [], level = {}, traits = [] }: InitialFeatFilters = {}) {\r\n    const filter: InitialFeatFilters = {\r\n        feattype,\r\n        skills: [],\r\n        rarity: [],\r\n        source: [],\r\n        traits,\r\n        level,\r\n    }\r\n    game.pf2e.compendiumBrowser.openTab('feat', filter)\r\n}\r\n","import { subLocalize } from '@utils/foundry/localize'\r\nimport { CATEGORY_SEARCH } from './search'\r\n\r\nconst localize = subLocalize('interface.error.drop')\r\n\r\nexport async function dropped(event: ElementDragEvent) {\r\n    let target = $(event.target)\r\n    if (target.is('label')) target = target.next()\r\n\r\n    const categoryType = target.attr('data-type') as CategoryType | undefined\r\n    if (!categoryType) return\r\n\r\n    try {\r\n        const dataString = event.dataTransfer?.getData('text/plain')\r\n        const typeError = () => localize.warn('wrongDataType')\r\n\r\n        const data: { type: string; uuid: string } = JSON.parse(dataString)\r\n        if (!data || data.type !== 'Item' || typeof data.uuid !== 'string') return typeError()\r\n\r\n        const item = await fromUuid<ItemPF2e>(data.uuid)\r\n        if (!item) return typeError()\r\n\r\n        switch (categoryType) {\r\n            case 'scrollChain':\r\n                droppedSpell(target, item, CATEGORY_SEARCH.scrollChain)\r\n                break\r\n            case 'combatFlexibility':\r\n                droppedFeat(target, item, CATEGORY_SEARCH.combatFlexibility)\r\n                break\r\n            case 'scrollSavant':\r\n                droppedSpell(target, item, CATEGORY_SEARCH.scrollSavant)\r\n                break\r\n        }\r\n    } catch (error) {}\r\n}\r\n\r\nfunction droppedSpell(target: JQuery, item: ItemPF2e, { category = [], traditions = [] }: InitialSpellFilters = {}) {\r\n    if (!item.isOfType('spell')) return localize.warn('wrongType', { type: 'spell' })\r\n\r\n    if (item.isCantrip && !category.includes('cantrip')) return localize.warn('cannotBe', { type: 'spell', not: 'cantrip' })\r\n    if (item.isRitual && !category.includes('ritual')) return localize.warn('cannotBe', { type: 'spell', not: 'ritual' })\r\n    if (item.isFocusSpell && !category.includes('focus')) return localize.warn('cannotBe', { type: 'spell', not: 'focus' })\r\n\r\n    if (traditions.length) {\r\n        const itemTraditions = item.system.traditions.value\r\n        for (const tradition of traditions) {\r\n            if (!itemTraditions.includes(tradition))\r\n                return localize.warn('wrongTrait', { type: 'spell', trait: tradition, category: 'tradition' })\r\n        }\r\n    }\r\n\r\n    if (item.level > Number(target.attr('data-level'))) return localize.warn('wrongLevel', { type: 'spell' })\r\n\r\n    droppedItem(target, item)\r\n}\r\n\r\nfunction droppedFeat(target: JQuery, item: ItemPF2e, { feattype = [], traits = [] }: InitialFeatFilters) {\r\n    if (!item.isOfType('feat') || item.isFeature) return localize.warn('wrongType', { type: 'feat' })\r\n    if (!feattype.includes(item.featType)) return localize.warn('cannotBe', { type: 'feat', not: item.featType })\r\n\r\n    if (traits.length) {\r\n        const itemTraits = item.system.traits.value\r\n        for (const trait of traits) {\r\n            if (!itemTraits.includes(trait)) return localize.warn('wrongTrait', { type: 'feat', trait, category: 'trait' })\r\n        }\r\n    }\r\n\r\n    if (item.level > Number(target.attr('data-level'))) return localize.warn('wrongLevel', { type: 'feat' })\r\n\r\n    droppedItem(target, item)\r\n}\r\n\r\nfunction droppedItem(target: JQuery, item: ItemPF2e) {\r\n    target.val(item.name)\r\n    target.attr('value', item.name)\r\n    target.attr('data-uuid', item.uuid)\r\n    target.nextAll('[data-action=\"clear\"]').first().removeClass('disabled')\r\n}\r\n","import { subLocalize } from '@utils/foundry/localize'\r\nimport { templatePath } from '@utils/foundry/path'\r\nimport { accept } from './interface/accept'\r\nimport { getData } from './interface/data'\r\nimport { dropped } from './interface/drop'\r\nimport { search } from './interface/search'\r\n\r\nconst localize = subLocalize('interface')\r\n\r\nexport class DailiesInterface extends Application {\r\n    private _actor: CharacterPF2e\r\n\r\n    constructor(actor: CharacterPF2e, options?: Partial<ApplicationOptions>) {\r\n        super(options)\r\n        this._actor = actor\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            title: localize('title'),\r\n            template: templatePath('interface.hbs'),\r\n            height: 'auto',\r\n            submitOnClose: false,\r\n            submitOnChange: false,\r\n            dragDrop: [\r\n                {\r\n                    dropSelector: '[data-droppable=\"true\"]',\r\n                },\r\n            ],\r\n        })\r\n    }\r\n\r\n    getData(options?: Partial<FormApplicationOptions> | undefined) {\r\n        return mergeObject(super.getData(options), {\r\n            i18n: localize,\r\n            ...getData(this._actor),\r\n        })\r\n    }\r\n\r\n    activateListeners(html: JQuery<HTMLElement>): void {\r\n        super.activateListeners(html)\r\n\r\n        html.find<SearchTemplateButton>('[data-action=search]').on('click', search)\r\n        html.find<HTMLAnchorElement>('[data-action=clear]').on('click', this.#onClear.bind(this))\r\n        html.find<HTMLButtonElement>('[data-action=accept]').on('click', this.#onAccept.bind(this))\r\n        html.find<HTMLButtonElement>('[data-action=cancel]').on('click', this.#onCancel.bind(this))\r\n    }\r\n\r\n    protected async _onDrop(event: ElementDragEvent) {\r\n        dropped(event)\r\n    }\r\n\r\n    #lock() {\r\n        this.element.addClass('disabled')\r\n    }\r\n\r\n    #validate() {\r\n        const warns: string[] = []\r\n        const emptyInputs = this.element.find('input').filter((_, input) => !input.value)\r\n\r\n        if (emptyInputs.length) warns.push('error.empty')\r\n\r\n        warns.forEach(x => localize.warn(x))\r\n\r\n        return !warns.length\r\n    }\r\n\r\n    async #onAccept(event: JQuery.ClickEvent) {\r\n        event.preventDefault()\r\n\r\n        if (!this.#validate()) return\r\n\r\n        return this.#lock()\r\n\r\n        try {\r\n            await accept(this.element, this._actor)\r\n        } catch (error) {\r\n            localize.error('error.unexpected')\r\n            console.error(error)\r\n        }\r\n\r\n        this.close()\r\n    }\r\n\r\n    #onClear(event: JQuery.ClickEvent<any, any, HTMLAnchorElement>) {\r\n        event.preventDefault()\r\n        const target = $(event.currentTarget)\r\n        const input = target.prevAll('input').first()\r\n        input.val('')\r\n        input.attr('value', '')\r\n        input.attr('data-uuid', '')\r\n        target.addClass('disabled')\r\n    }\r\n\r\n    #onCancel(event: JQuery.ClickEvent) {\r\n        event.preventDefault()\r\n        this.close()\r\n    }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { wrapRestForTheNight } from './rest'\r\nimport { renderCharacterSheetPF2e } from './sheet'\r\n\r\nsetModuleID('pf2e-dailies')\r\n\r\nHooks.once('ready', () => {\r\n    wrapRestForTheNight()\r\n})\r\n\r\nHooks.on('renderCharacterSheetPF2e', renderCharacterSheetPF2e)\r\n","import { getFlag } from '@utils/foundry/flags'\r\nimport { sluggify } from '@utils/pf2e/utils'\r\nimport { isRuleItem } from './categories'\r\n\r\nexport function wrapRestForTheNight() {\r\n    const original = game.pf2e.actions.restForTheNight\r\n    game.pf2e.actions.restForTheNight = async (options: ActionDefaultOptions) => {\r\n        const result = await original(options)\r\n        if (result.length && options.actors) afterRest(options.actors)\r\n        return result\r\n    }\r\n}\r\n\r\nasync function afterRest(actors: ActorPF2e | ActorPF2e[]) {\r\n    actors = Array.isArray(actors) ? actors : [actors]\r\n\r\n    const characters = actors.filter(x => x.isOfType('character')) as CharacterPF2e[]\r\n    for (const actor of characters) {\r\n        const update: EmbeddedDocumentUpdateData<ItemPF2e>[] = []\r\n        const remove: string[] = []\r\n        const itemTypes = actor.itemTypes\r\n\r\n        const cleanRuleItem = (item: ItemPF2e) => {\r\n            const rules = deepClone(item._source.system.rules)\r\n\r\n            let modified = false\r\n            for (let i = rules.length - 1; i >= 0; i--) {\r\n                if (!('pf2e-dailies' in rules[i])) continue\r\n                rules.splice(i, 1)\r\n                modified = true\r\n            }\r\n\r\n            if (modified) update.push({ _id: item.id, 'system.rules': rules })\r\n        }\r\n\r\n        for (const item of itemTypes.feat) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n\r\n            if (getFlag(item, 'temporary')) {\r\n                const parentId = item.getFlag<string>('pf2e', 'grantedBy.id')\r\n                if (parentId) {\r\n                    const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                    const path = `flags.pf2e.itemGrants.-=${slug}`\r\n                    update.push({ _id: parentId, [path]: true })\r\n                }\r\n                remove.push(item.id)\r\n            }\r\n        }\r\n\r\n        for (const item of itemTypes.lore) {\r\n            if (getFlag(item, 'temporary')) remove.push(item.id)\r\n        }\r\n\r\n        for (const item of itemTypes.equipment) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n        }\r\n\r\n        for (const item of itemTypes.heritage) {\r\n            if (isRuleItem(item)) cleanRuleItem(item)\r\n        }\r\n\r\n        if (update.length) actor.updateEmbeddedDocuments('Item', update)\r\n        if (remove.length) actor.deleteEmbeddedDocuments('Item', remove)\r\n    }\r\n}\r\n","import { DailiesInterface } from '@apps/interface'\r\nimport { localize } from '@utils/foundry/localize'\r\nimport { hasAnyCategory } from './categories'\r\n\r\nexport function renderCharacterSheetPF2e(sheet: CharacterSheetPF2e, html: JQuery) {\r\n    const actor = sheet.actor\r\n    if (!actor.isOwner || !hasAnyCategory(actor)) return\r\n\r\n    const small = html.find('aside .sidebar .hitpoints .hp-small')\r\n    small\r\n        .append(`<a class=\"roll-icon dailies\" title=\"${localize('sheet.title')}\"><i class=\"fas fa-mug-saucer\"></i></a>`)\r\n        .find('.dailies')\r\n        .on('click', () => new DailiesInterface(actor).render(true, { id: `pf2e-dailies-interface-${actor.id}` }))\r\n\r\n    // TODO remove with next system update\r\n    small\r\n        .find('[data-action=rest]')\r\n        .off('click')\r\n        .on('click', event => game.pf2e.actions.restForTheNight({ event, actors: actor }))\r\n}\r\n"],"names":["getFlag","doc","key","fallback","getSourceId","includesSourceId","list","sourceId","includes","wordCharacter","String","raw","nonWordCharacter","nonWordCharacterRE","RegExp","wordBoundary","nonWordBoundary","lowerCaseLetter","upperCaseLetter","lowerCaseThenUpperCaseRE","nonWordCharacterHyphenOrSpaceRE","upperOrWordBoundariedLowerRE","sluggify","text","camel","console","warn","replace","toLowerCase","trim","dromedary","charAt","toUpperCase","slice","part","index","Error","notify","str","arg1","arg2","arg3","type","data","undefined","permanent","ui","notifications","localize","args","game","i18n","format","hasLocalization","has","subLocalize","subKey","fn","Object","defineProperties","value","enumerable","configurable","info","error","RULE_TYPES","CATEGORIES","category","uuids","UUIDS","EQUIP_UUID","FEATS_UUID","HERITAGES_UUID","RULES_UUIDS","FLATTENED","FEATS","EQUIP","HERITAGES","RULES","push","map","uuid","firstUUID","Map","isRuleItem","item","isCategory","object","templatePath","path","filter","x","join","PROFICIENCY_RANKS","Set","LANGUAGE_LIST","SKILL_DICTIONARY","acr","arc","ath","cra","dec","dip","itm","med","nat","occ","prf","rel","soc","ste","sur","thi","SKILL_LONG_FORMS","keys","values","FOUR_ELEMENTS","GANZI_RESISTANCES","sortOrder","Proxy","addedLanguage","trainedSkill","addedResistance","trainedLore","combatFlexibility","get","obj","prop","getData","actor","actorLevel","level","flags","categories","itemTypes","items","heritage","feat","equipment","isOfType","isInvested","entry","label","name","hasCategories","templates","slots","spellSlot","template","rows","maxSlot","maxTradition","getSpellcastingDetails","options","skills","rank","length","selected","actorSkills","skillSlot","isTomeSelected","option","getRuleSelection","masters","experts","trained","placeholder","actorLanguages","system","traits","languages","sort","groups","a","b","_source","rules","find","rule","rollOption","selection","tradition","spellcasting","max","Math","Number","clamped","sequenceArray","start","end","levels","i","CATEGORY_SEARCH","scrollChain","feattype","scrollSavant","traditions","search","event","preventDefault","currentTarget","dataset","searchSpell","rarity","source","pf2e","compendiumBrowser","openTab","searchFeat","min","classes","school","droppedSpell","target","isCantrip","not","isRitual","isFocusSpell","itemTraditions","trait","attr","droppedItem","val","nextAll","first","removeClass","DailiesInterface","Application","_actor","constructor","super","this","defaultOptions","mergeObject","title","height","submitOnClose","submitOnChange","dragDrop","dropSelector","activateListeners","html","on","bind","async","$","is","next","categoryType","dataString","dataTransfer","typeError","JSON","parse","fromUuid","isFeature","featType","itemTraits","droppedFeat","dropped","element","addClass","warns","_","input","forEach","prevAll","close","Hooks","once","original","actions","restForTheNight","result","actors","characters","Array","isArray","update","remove","cleanRuleItem","deepClone","modified","splice","_id","id","parentId","lore","updateEmbeddedDocuments","deleteEmbeddedDocuments","afterRest","wrapRestForTheNight","sheet","isOwner","some","hasAnyCategory","small","append","render","off"],"sourceRoot":""}