{
  "version": 3,
  "sources": ["../src/module.js", "../src/data/spell.js", "../src/data/ace.js", "../src/data/blade.js", "../src/data/ceremonial.js", "../src/data/chain.js", "../src/data/feat.js", "../src/data/flexibility.js", "../src/data/language.js", "../src/data/mind.js", "../src/data/resistance.js", "../src/data/root.js", "../src/data/staves.js", "../src/spellcasting.js", "../src/data/savant.js", "../src/data/skill.js", "../src/data/tome.js", "../src/dailies.js", "../src/data/familiar.js", "../src/data/rations.js", "../src/pf2e/utils.js", "../src/pf2e/predicate.js", "../src/apps/interface/data.js", "../src/pf2e/skills.js", "../src/apps/interface/shared.js", "../src/apps/interface/drop.js", "../src/apps/interface/process.js", "../src/apps/interface.js", "../src/chat.js", "../src/pf2e/spell.js", "../src/api.js", "../src/actor.js", "../src/apps/custom/flexibility.js", "../src/apps/custom/mind.js", "../src/apps/custom/savant.js", "../src/apps/custom/tome.js", "../src/apps/custom.js", "../src/rest.js", "../src/main.js"],
  "sourcesContent": ["export const MODULE_ID = 'pf2e-dailies'\r\n\r\nexport const AsyncFunction = async function () {}.constructor\r\n\r\nexport function getSetting(key) {\r\n    return game.settings.get(MODULE_ID, key)\r\n}\r\n\r\nexport function setSetting(key, value) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\nfunction getSettingLocalizationPath(...path) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function registerSetting(options) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? true\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {})\r\n    }\r\n    game.settings.register(MODULE_ID, name, options)\r\n}\r\n\r\nexport function registerSettingMenu(options) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options)\r\n}\r\n\r\nexport function templatePath(...path) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `modules/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function getFlag(doc, key, fallback) {\r\n    return doc.getFlag(MODULE_ID, key) ?? fallback\r\n}\r\n\r\nexport function setFlag(doc, key, value) {\r\n    return doc.setFlag(MODULE_ID, key, value)\r\n}\r\n\r\nexport function localize(...args) {\r\n    let [key, data] = args\r\n    key = `${MODULE_ID}.${key}`\r\n    if (data) return game.i18n.format(key, data)\r\n    return game.i18n.localize(key)\r\n}\r\n\r\nexport function hasLocalization(key) {\r\n    return game.i18n.has(`${MODULE_ID}.${key}`, false)\r\n}\r\n\r\nexport function localizePath(key) {\r\n    return `${MODULE_ID}.${key}`\r\n}\r\n\r\nexport function subLocalize(subKey) {\r\n    const fn = (...args) => localize(`${subKey}.${args[0]}`, args[1])\r\n\r\n    Object.defineProperties(fn, {\r\n        warn: {\r\n            value: (...args) => warn(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        info: {\r\n            value: (...args) => info(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        error: {\r\n            value: (...args) => error(`${subKey}.${args[0]}`, args[1], args[2]),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        has: {\r\n            value: key => hasLocalization(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        path: {\r\n            value: key => localizePath(`${subKey}.${key}`),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n        template: {\r\n            value: (key, { hash }) => fn(key, hash),\r\n            enumerable: false,\r\n            configurable: false,\r\n        },\r\n    })\r\n\r\n    return fn\r\n}\r\n\r\nexport function getChatMessageClass() {\r\n    return CONFIG.ChatMessage.documentClass\r\n}\r\n\r\nfunction notify(str, arg1, arg2, arg3) {\r\n    const type = typeof arg1 === 'string' ? arg1 : 'info'\r\n    const data = typeof arg1 === 'object' ? arg1 : typeof arg2 === 'object' ? arg2 : undefined\r\n    const permanent = typeof arg1 === 'boolean' ? arg1 : typeof arg2 === 'boolean' ? arg2 : arg3 ?? false\r\n\r\n    ui.notifications.notify(localize(str, data), type, { permanent })\r\n}\r\n\r\nexport function warn(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'warning', arg1, arg2)\r\n}\r\n\r\nexport function info(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'info', arg1, arg2)\r\n}\r\n\r\nexport function error(...args) {\r\n    const [str, arg1, arg2] = args\r\n    notify(str, 'error', arg1, arg2)\r\n}\r\n\r\nexport function getSourceId(doc) {\r\n    return doc.getFlag('core', 'sourceId')\r\n}\r\n\r\nexport function includesSourceId(doc, list) {\r\n    const sourceId = getSourceId(doc)\r\n    return sourceId ? list.includes(sourceId) : false\r\n}\r\n\r\nfunction getItemSourceIdCondition(sourceId) {\r\n    return Array.isArray(sourceId) ? item => includesSourceId(item, sourceId) : item => getSourceId(item) === sourceId\r\n}\r\n\r\nexport function getItems(actor, itemTypes) {\r\n    if (typeof itemTypes === 'string') itemTypes = [itemTypes]\r\n    return itemTypes ? itemTypes.flatMap(type => actor.itemTypes[type]) : actor.items\r\n}\r\n\r\nexport function findItemWithSourceId(actor, sourceId, itemTypes = []) {\r\n    if (typeof itemTypes === 'string') itemTypes = [itemTypes]\r\n\r\n    for (const type of itemTypes) {\r\n        const item = actor.itemTypes[type].find(item => item.sourceId === sourceId)\r\n        if (item) return item\r\n    }\r\n}\r\n\r\nexport function sequenceArray(start, end) {\r\n    const levels = []\r\n\r\n    if (start <= end) {\r\n        for (let i = start; i <= end; i++) levels.push(i)\r\n    } else {\r\n        for (let i = start; i >= end; i--) levels.push(i)\r\n    }\r\n\r\n    return levels\r\n}\r\n\r\nexport function capitalize(str) {\r\n    if (!str) return ''\r\n    return str[0].toUpperCase() + str.slice(1)\r\n}\r\n\r\nexport function chatUUID(uuid, name) {\r\n    if (name) return `@UUID[${uuid}]{${name}}`\r\n    return `@UUID[${uuid}]`\r\n}\r\n\r\nexport function fakeChatUUID(name) {\r\n    return `<span style=\"background: #DDD;\r\n    padding: 1px 4px;\r\n    border: 1px solid var(--color-border-dark-tertiary);\r\n    border-radius: 2px;\r\n    white-space: nowrap;\r\n    word-break: break-all;\">${name}</span>`\r\n}\r\n\r\nexport function isInstanceOf(obj, name) {\r\n    if (typeof obj !== 'object') return false\r\n\r\n    while ((obj = Reflect.getPrototypeOf(obj))) {\r\n        if (obj.constructor.name === name) return true\r\n    }\r\n\r\n    return false\r\n}\r\n", "export function createSpellDaily(key, uuid, filter = {}, level, label) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: 'drop',\r\n                slug: 'spell',\r\n                filter: {\r\n                    type: 'spell',\r\n                    search: filter,\r\n                },\r\n            },\r\n        ],\r\n        process: async ({ addSpell, utils, fields, messages }) => {\r\n            const uuid = fields.spell.uuid\r\n            const source = await utils.createSpellSource(uuid)\r\n            const label = `${source.name} (Level ${level || source.system.level.value})`\r\n            addSpell(source, level)\r\n            messages.add('spells', { uuid, label })\r\n        },\r\n    }\r\n    return daily\r\n}\r\n", "import { localizePath } from '../module'\r\nimport { createSpellDaily } from './spell'\r\n\r\nexport function tricksterAce() {\r\n    const daily = createSpellDaily(\r\n        'ace',\r\n        'Compendium.pf2e.feats-srd.Item.POrE3ZgBRdBL9MsW',\r\n        {\r\n            category: ['cantrip', 'spell'],\r\n            level: 4,\r\n        },\r\n        4\r\n    )\r\n\r\n    const row = daily.rows[0]\r\n    row.filter.drop = item => {\r\n        const castTime = item.system.time.value\r\n        if (castTime.includes('hour') || (castTime.includes('min') && parseInt(castTime) > 10)) {\r\n            return { error: localizePath('interface.error.drop.wrongSpellTime'), data: { time: '10 min' } }\r\n        }\r\n        return true\r\n    }\r\n\r\n    return daily\r\n}\r\n", "import { localize } from '../module'\r\n\r\nexport const bladeAlly = {\r\n    key: 'blade',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.classfeatures.Item.EtltLdiy9kNfHU0c', // Blade Ally\r\n    },\r\n    children: [\r\n        {\r\n            slug: 'good',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.nxZYP3KGfTSkaW6J', // The Tenets of Good\r\n        },\r\n        {\r\n            slug: 'evil',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.JiY2ZB4FkK8RJm4T', // The Tenets of Evil\r\n        },\r\n        {\r\n            slug: 'liberator',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.FCoMFUsth4xB4veC', // Liberator\r\n        },\r\n        {\r\n            slug: 'paladin',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.peEXunfbSD8WcMFk', // Paladin\r\n        },\r\n        {\r\n            slug: 'antipaladin',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.EQ6DVIQHAUXUhY6Y', // Antipaladin\r\n        },\r\n        {\r\n            slug: 'tyrant',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.HiIvez0TqESbleB5', // Tyrant\r\n        },\r\n        {\r\n            slug: 'spirit',\r\n            uuid: 'Compendium.pf2e.feats-srd.Item.h5ksUZlrVGBjq6p4', // Radiant Blade Spirit\r\n        },\r\n        {\r\n            slug: 'master',\r\n            uuid: 'Compendium.pf2e.feats-srd.Item.jYEMVfrXJLpXS6aC', // Radiant Blade Master\r\n        },\r\n    ],\r\n    rows: [\r\n        {\r\n            type: 'select',\r\n            slug: 'weapon',\r\n            label: () => localize('label.blade.weapon'),\r\n            options: ({ actor }) => {\r\n                return actor.itemTypes.weapon\r\n                    .filter(weapon => !weapon.isAlchemical)\r\n                    .map(weapon => ({ value: weapon.id, label: weapon.name }))\r\n            },\r\n        },\r\n        {\r\n            type: 'select',\r\n            slug: 'rune',\r\n            label: () => localize('label.blade.rune'),\r\n            options: ({ children }) => {\r\n                const runes = ['returning', 'shifting']\r\n\r\n                const { antipaladin, evil, good, liberator, master, paladin, spirit, tyrant } = children\r\n\r\n                if (spirit) {\r\n                    runes.push('flaming')\r\n                    if (good) runes.push('holy')\r\n                    if (evil) runes.push('unholy')\r\n                    if (liberator || antipaladin) runes.push('anarchic')\r\n                    if (paladin || tyrant) runes.push('axiomatic')\r\n                }\r\n\r\n                if (good) runes.push('disrupting', 'ghost-touch')\r\n                if (master) runes.push('greater-disrupting', 'keen')\r\n                if (evil) runes.push('fearsome')\r\n\r\n                return runes.map(value => ({\r\n                    value,\r\n                    label: localizeRune(value),\r\n                }))\r\n            },\r\n            condition: ({ actor }) => actor.itemTypes.weapon.filter(weapon => !weapon.isAlchemical).length,\r\n        },\r\n    ],\r\n    process: async ({ actor, fields, addRule, messages }) => {\r\n        const weaponId = fields.weapon.value\r\n        const rune = fields.rune.value\r\n\r\n        const weapon = actor.items.get(weaponId)\r\n        if (!weapon) return\r\n\r\n        addRule(\r\n            {\r\n                definition: [`item:id:${weaponId}`],\r\n                key: 'AdjustStrike',\r\n                mode: 'add',\r\n                property: 'property-runes',\r\n                value: rune,\r\n            },\r\n            weapon\r\n        )\r\n\r\n        addRule(\r\n            {\r\n                key: 'CriticalSpecialization',\r\n                predicate: [\r\n                    {\r\n                        or: [`item:category:${weapon.category}`, `item:id:${weaponId}`],\r\n                    },\r\n                ],\r\n            },\r\n            weapon\r\n        )\r\n\r\n        const name = weapon.name !== weapon._source.name ? `... ${weapon._source.name}` : weapon.name\r\n\r\n        messages.addGroup('blade')\r\n        messages.add('blade', {\r\n            uuid: weapon.uuid,\r\n            label: name,\r\n            selected: localizeRune(rune),\r\n        })\r\n    },\r\n}\r\n\r\nfunction localizeRune(value) {\r\n    const slugged = value.replace(/-\\w/, match => match[1].toUpperCase())\r\n    return game.i18n.localize(`PF2E.WeaponPropertyRune.${slugged}.Name`)\r\n}\r\n", "const ICON = 'systems/pf2e/icons/equipment/weapons/wish-knife.webp'\r\n\r\nexport const ceremonialKnife = {\r\n    key: 'ceremonial',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.feats-srd.Item.78pkCdFaY8hI07Lj',\r\n        condition: ({ actor }) => actor.itemTypes.weapon.some(weapon => weapon.group === 'knife'),\r\n    },\r\n    rows: [\r\n        {\r\n            type: 'drop',\r\n            slug: 'spell',\r\n            label: ({ utils, actor }) => utils.spellRankLabel(calculateRank(actor)),\r\n            filter: {\r\n                type: 'spell',\r\n                search: ({ actor }) => ({\r\n                    category: ['spell'],\r\n                    level: calculateRank(actor),\r\n                }),\r\n            },\r\n        },\r\n    ],\r\n    process: async ({ actor, fields, utils, item, addItem, messages }) => {\r\n        const uuid = fields.spell.uuid\r\n        const level = calculateRank(actor)\r\n        const source = await utils.createWandSource({ uuid, level, itemName: item.name, itemImg: ICON })\r\n\r\n        addItem(source)\r\n\r\n        messages.addGroup('ceremonial')\r\n        messages.add('ceremonial', { uuid, label: source.name })\r\n    },\r\n}\r\n\r\nfunction calculateRank(actor) {\r\n    return Math.ceil((actor.level - 5) / 2)\r\n}\r\n", "const rows = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh']\r\n\r\nexport function createScrollChain(key, uuids, label) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid: uuids[0],\r\n        },\r\n        children: [\r\n            {\r\n                slug: 'expert',\r\n                uuid: uuids[1],\r\n            },\r\n            {\r\n                slug: 'master',\r\n                uuid: uuids[2],\r\n            },\r\n        ],\r\n        rows: [\r\n            createRow('first', 1), //\r\n            createRow('second', 2, 8),\r\n            createRow('third', 3, undefined, 'expert'), //\r\n            createRow('fourth', 4, 14, 'expert'),\r\n            createRow('fifth', 5, 16, 'expert'),\r\n            createRow('sixth', 6, undefined, 'master'), //\r\n            createRow('seventh', 7, 20, 'master'),\r\n        ],\r\n        process: async ({ utils, fields, addItem, messages }) => {\r\n            for (const field of Object.values(fields)) {\r\n                const uuid = field.uuid\r\n                const level = rows.indexOf(field.row) + 1\r\n                const source = await utils.createSpellScrollSource({ uuid, level })\r\n                addItem(source)\r\n                messages.add('scrolls', { uuid, label: source.name })\r\n            }\r\n        },\r\n    }\r\n    return daily\r\n}\r\n\r\nfunction createRow(slug, level, minActorLevel, child) {\r\n    const row = {\r\n        type: 'drop',\r\n        slug,\r\n        label: ({ utils }) => utils.spellRankLabel(level),\r\n        filter: {\r\n            type: 'spell',\r\n            search: {\r\n                category: ['spell'],\r\n                level,\r\n            },\r\n        },\r\n    }\r\n    if (minActorLevel) row.condition = ({ actor }) => actor.level >= minActorLevel\r\n    if (child) row.childPredicate = [child]\r\n    return row\r\n}\r\n", "export function createFeatDaily(key, uuid, filter = {}, label) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: 'drop',\r\n                slug: 'feat',\r\n                filter: {\r\n                    type: 'feat',\r\n                    search: filter,\r\n                },\r\n            },\r\n        ],\r\n        process: async ({ utils, fields, addFeat, messages }) => {\r\n            const uuid = fields.feat.uuid\r\n            const source = await utils.createFeatSource(uuid)\r\n            addFeat(source)\r\n            messages.add('feats', { uuid })\r\n        },\r\n    }\r\n    return daily\r\n}\r\n", "export const combatFlexibility = {\r\n    key: 'flexibility',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.classfeatures.Item.8g6HzARbhfcgilP8', // Combat Flexibility\r\n    },\r\n    children: [\r\n        {\r\n            slug: 'improved',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.W2rwudMNcAxs8VoX', // Improved Flexibility\r\n        },\r\n    ],\r\n    rows: [\r\n        createRow('flexibility', 8), //\r\n        createRow('improved', 14, 'improved'),\r\n    ],\r\n    process: async ({ utils, fields, addFeat, messages, children }) => {\r\n        const uuid = fields.flexibility.uuid\r\n        const source = await utils.createFeatSource(uuid)\r\n        addFeat(source)\r\n        messages.add('feats', { uuid })\r\n\r\n        if (children.improved) {\r\n            const uuid = fields.improved.uuid\r\n            const source = await utils.createFeatSource(uuid)\r\n            addFeat(source, children.improved)\r\n            messages.add('feats', { uuid })\r\n        }\r\n    },\r\n}\r\n\r\nfunction createRow(slug, level, child) {\r\n    const row = {\r\n        type: 'drop',\r\n        label: `PF2E.Level${level}`,\r\n        slug,\r\n        filter: {\r\n            type: 'feat',\r\n            search: {\r\n                category: ['class'],\r\n                traits: ['fighter'],\r\n                level,\r\n            },\r\n        },\r\n    }\r\n    if (child) row.childPredicate = [child]\r\n    return row\r\n}\r\n", "export function createLanguageDaily(key, uuid, label) {\r\n    return {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: 'select',\r\n                slug: 'language',\r\n                options: ({ actor, utils }) => {\r\n                    const actorLanguages = actor.system.traits.languages.value\r\n                    return utils.languageNames.filter(x => !actorLanguages.includes(x)).sort()\r\n                },\r\n                labelizer: ({ utils }) => utils.languageLabel,\r\n            },\r\n        ],\r\n        process: ({ addRule, utils, fields, messages }) => {\r\n            const value = fields.language.value\r\n            const source = utils.createLanguageRuleElement({ language: value })\r\n            addRule(source)\r\n            messages.add('languages', { uuid, selected: utils.languageLabel(value), label })\r\n        },\r\n    }\r\n}\r\n", "import { MODULE_ID, findItemWithSourceId, getFlag, localize, subLocalize } from '../module'\r\n\r\nconst MIND_WEAPON_UUID = 'Compendium.pf2e-dailies.equipment.Item.VpmEozw21aRxX15P'\r\nconst MALLEABLE_MENTAL_FORGE_UUID = 'Compendium.pf2e.feats-srd.Item.PccekOihIbRWdDky'\r\n\r\nconst WEAPON_BASE_TYPES = {\r\n    0: { die: 'd4', traits: ['finesse', 'agile'], usage: 'held-in-one-hand' },\r\n    1: { die: 'd6', traits: ['finesse'], usage: 'held-in-one-hand' },\r\n    2: { die: 'd8', traits: [], usage: 'held-in-one-hand' },\r\n    3: { die: 'd10', traits: ['reach'], usage: 'held-in-two-hands' },\r\n}\r\n\r\nconst WEAPON_GROUPS = {\r\n    slashing: 'sword',\r\n    piercing: 'spear',\r\n    bludgeoning: 'club',\r\n}\r\n\r\nconst WEAPON_TRAITS = ['grapple', 'nonlethal', 'shove', 'trip', 'modular']\r\n\r\nconst WEAPON_DAMAGE_TYPES = Object.keys(WEAPON_GROUPS)\r\n\r\nconst WEAPON_RUNES = ['corrosive', 'disrupting', 'flaming', 'frost', 'shock', 'thundering']\r\n\r\nconst WEAPON_GREATER_RUNES = [\r\n    'anarchic',\r\n    'axiomatic',\r\n    'greaterCorrosive',\r\n    'greaterDisrupting',\r\n    'greaterFlaming',\r\n    'greaterFrost',\r\n    'greaterShock',\r\n    'greaterThundering',\r\n    'holy',\r\n    'unholy',\r\n]\r\n\r\nexport const mindSmith = {\r\n    key: 'mindsmith',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.feats-srd.Item.juikoiIA0Jy8PboY', // Mind Smith Dedication\r\n    },\r\n    children: [\r\n        {\r\n            slug: 'weapon',\r\n            uuid: MIND_WEAPON_UUID, // Mind Weapon\r\n        },\r\n        {\r\n            slug: 'mental',\r\n            uuid: MALLEABLE_MENTAL_FORGE_UUID, // Malleable Mental Forge\r\n        },\r\n        {\r\n            slug: 'runic',\r\n            uuid: 'Compendium.pf2e.feats-srd.Item.2uQbQgz1AbjzcFSp', // Runic Mind Smithing\r\n        },\r\n        {\r\n            slug: 'advanced',\r\n            uuid: 'Compendium.pf2e.feats-srd.Item.fgnfXwFcn9jZlXGD', // Advanced Runic Mind Smithing\r\n        },\r\n    ],\r\n    rows: [\r\n        {\r\n            type: 'alert',\r\n            slug: 'alert',\r\n            message: () => localize('interface.alert.weapon'),\r\n            fix,\r\n            childPredicate: [{ not: 'weapon' }],\r\n        },\r\n        {\r\n            type: 'select',\r\n            slug: 'smith',\r\n            label: () => localize('label.mindsmith'),\r\n            options: WEAPON_DAMAGE_TYPES,\r\n            labelizer: ({ utils }) => utils.damageLabel,\r\n            childPredicate: ['weapon'],\r\n        },\r\n        ...[1, 2].map(nb => ({\r\n            type: 'select',\r\n            slug: `mental${nb}`,\r\n            label: () => localize('label.mentalforge', { nb }),\r\n            options: WEAPON_TRAITS,\r\n            labelizer: ({ utils }) => utils.weaponTraitLabel,\r\n            unique: 'mental',\r\n            childPredicate: ['weapon', 'mental'],\r\n        })),\r\n        {\r\n            type: 'select',\r\n            slug: 'runic',\r\n            label: () => localize('label.runicmind'),\r\n            options: WEAPON_RUNES,\r\n            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,\r\n            childPredicate: ['weapon', 'runic', { not: 'advanced' }],\r\n            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),\r\n        },\r\n        {\r\n            type: 'select',\r\n            slug: 'advanced',\r\n            label: () => localize('label.runicmind'),\r\n            options: WEAPON_GREATER_RUNES,\r\n            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,\r\n            childPredicate: ['weapon', 'advanced'],\r\n            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),\r\n        },\r\n    ],\r\n    process: ({ children, updateItem, fields, messages, item, utils }) => {\r\n        const weapon = children.weapon\r\n        if (!weapon) return\r\n\r\n        messages.addGroup('mindsmith')\r\n\r\n        const selected = fields.smith.value\r\n        updateItem({ _id: weapon.id, 'system.damage.damageType': selected, 'system.group': WEAPON_GROUPS[selected] })\r\n        messages.add('mindsmith', { selected: utils.damageLabel(selected), uuid: item.uuid, label: 'mindsmith' })\r\n\r\n        if (children.mental) {\r\n            const traits = deepClone(weapon._source.system.traits?.value ?? [])\r\n\r\n            for (const nb of [1, 2]) {\r\n                const selected = fields[`mental${nb}`].value\r\n                if (!traits.includes(selected)) traits.push(selected)\r\n                updateItem({ _id: weapon.id, 'system.traits.value': traits })\r\n                messages.add('mindsmith', {\r\n                    selected: utils.weaponTraitLabel(selected),\r\n                    uuid: children.mental.uuid,\r\n                    label: localize('label.mentalforge', { nb }),\r\n                })\r\n            }\r\n        }\r\n\r\n        if ((children.advanced || children.runic) && utils.hasFreePropertySlot(weapon)) {\r\n            const child = children.advanced ?? children.runic\r\n            const freeSlot = utils.getFreePropertyRuneSlot(weapon)\r\n            const field = fields.advanced ?? fields.runic\r\n            const selected = field.value\r\n\r\n            if (freeSlot && !weapon.system.runes.property.includes(selected)) {\r\n                updateItem({ _id: weapon.id, [`system.${freeSlot}.value`]: selected, [`flags.${MODULE_ID}.runeSlot`]: freeSlot })\r\n                messages.add('mindsmith', {\r\n                    selected: utils.weaponPropertyRunesLabel(selected),\r\n                    uuid: child.uuid,\r\n                    label: 'runicmind',\r\n                })\r\n            }\r\n        }\r\n    },\r\n    rest: ({ item, sourceId, updateItem, actor }) => {\r\n        if (sourceId !== MIND_WEAPON_UUID) return\r\n\r\n        const mental = findItemWithSourceId(actor, MALLEABLE_MENTAL_FORGE_UUID)\r\n        if (mental) {\r\n            let traits = item._source.system.traits?.value ?? []\r\n            traits = traits.filter(trait => !WEAPON_TRAITS.includes(trait))\r\n            updateItem({ _id: item.id, 'system.traits.value': traits })\r\n        }\r\n\r\n        const runeSlot = getFlag(item, 'runeSlot')\r\n        if (runeSlot) {\r\n            updateItem({ _id: item.id, [`system.${runeSlot}.value`]: null, [`flags.${MODULE_ID}.-=runeSlot`]: true })\r\n        }\r\n    },\r\n}\r\n\r\nasync function fix({ actor }) {\r\n    const localize = subLocalize('dialog.weapon')\r\n\r\n    let content = localize('flavor')\r\n\r\n    for (const key of ['0', '1', '2', '3']) {\r\n        const label = localize(`option.${key}`)\r\n        content += `<label><input type=\"radio\" name=\"type\" value=\"${key}\">${label}</label>`\r\n    }\r\n\r\n    const weapon = await Dialog.wait(\r\n        {\r\n            title: localize('title'),\r\n            content,\r\n            buttons: {\r\n                yes: {\r\n                    icon: '<i class=\"fas fa-save\"></i>',\r\n                    label: localize('accept'),\r\n                    callback: onWeaponSelected,\r\n                },\r\n                no: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: localize('cancel'),\r\n                    callback: () => null,\r\n                },\r\n            },\r\n            close: () => null,\r\n        },\r\n        {},\r\n        { id: 'pf2e-dailies-weapon', width: 600 }\r\n    )\r\n\r\n    if (weapon) {\r\n        await actor.createEmbeddedDocuments('Item', [weapon])\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nasync function onWeaponSelected(html) {\r\n    const localize = subLocalize('dialog.weapon')\r\n\r\n    const selection = html.find('[name=type]:checked').val()\r\n    if (!selection) {\r\n        localize.warn('error.noSelection')\r\n        return\r\n    }\r\n\r\n    const weapon = (await fromUuid(MIND_WEAPON_UUID))?.toObject()\r\n    if (!weapon) {\r\n        localize.warn('error.missing')\r\n        return\r\n    }\r\n\r\n    const stats = WEAPON_BASE_TYPES[selection]\r\n\r\n    setProperty(weapon, 'system.damage.die', stats.die)\r\n    setProperty(weapon, 'system.traits.value', stats.traits.slice())\r\n    setProperty(weapon, 'system.usage.value', stats.usage)\r\n\r\n    return weapon\r\n}\r\n", "export function createResistancelDaily(key, uuid, resistances, resistance, label, random) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: random ? 'random' : 'select',\r\n                slug: 'resistance',\r\n                options: resistances,\r\n                labelizer: ({ utils }) => utils.resistanceLabel,\r\n            },\r\n        ],\r\n        process: async ({ utils, fields, actor, addRule, messages }) => {\r\n            const type = random ? await utils.randomOption(resistances) : fields.resistance.value\r\n            const value =\r\n                typeof resistance === 'number' ? resistance : resistance === 'half' ? utils.halfLevelValue(actor) : actor.level\r\n            const rule = utils.createResistanceRuleElement({ type, value })\r\n            addRule(rule)\r\n            messages.add('resistances', { uuid, selected: utils.resistanceLabel(type, value), label, random })\r\n        },\r\n    }\r\n    return daily\r\n}\r\n", "const effectUUID = 'Compendium.pf2e.feat-effects.Item.jO7wMhnjT7yoAtQg'\r\n\r\nexport const rootMagic = {\r\n    key: 'root',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.feats-srd.Item.22P7IFyhrF7Fbw8B',\r\n    },\r\n    rows: [\r\n        {\r\n            type: 'select',\r\n            slug: 'target',\r\n            options: ({ actor, utils }) => {\r\n                const actors = utils.getPlayersActors(actor)\r\n                return actors.map(a => ({ value: a.id, label: a.name }))\r\n            },\r\n        },\r\n    ],\r\n    process: ({ fields, messages }) => {\r\n        const actorId = fields.target.value\r\n        const actor = game.actors.get(actorId)\r\n        if (!actor) return\r\n        messages.addGroup('root')\r\n        messages.add('root', { uuid: effectUUID, selected: actor.name })\r\n    },\r\n}\r\n", "import { findItemWithSourceId, getFlag, setFlag } from '../module'\r\nimport { getValidSpellcastingList, getSpellcastingEntryMaxSlotRank } from '../spellcasting'\r\n\r\nconst KINETIC_ACTIVATION = 'Compendium.pf2e.feats-srd.Item.NV9H39kbkbjhAK6X'\r\n\r\nexport function isPF2eStavesActive() {\r\n    return game.modules.get('pf2e-staves')?.active\r\n}\r\n\r\nexport function getSpellcastingEntryStaffFlags(entry) {\r\n    if (!entry) return\r\n\r\n    const data = getFlag(entry, 'staff') ?? getProperty(entry, 'flags.pf2e-staves')\r\n    if (!data) return\r\n\r\n    delete data.prevDescription\r\n    return deepClone(data)\r\n}\r\n\r\nexport function getSpellcastingEntryStaffData(entry) {\r\n    const staffData = getSpellcastingEntryStaffFlags(entry)\r\n    if (!staffData) return\r\n\r\n    staffData.overcharge ??= 0\r\n    staffData.max = getMaxSlotRankForStaves(entry.actor) + staffData.overcharge\r\n\r\n    const spontaneousCharges = (() => {\r\n        const actor = entry.actor\r\n        if (!staffData.charges || staffData.overcharge || staffData.makeshift || !actor) return {}\r\n\r\n        return actor.spellcasting\r\n            .filter(entry => entry.isSpontaneous)\r\n            .reduce((charges, entry) => {\r\n                for (let i = 1; i <= 10; i++) {\r\n                    const slot = entry.system.slots[`slot${i}`]\r\n                    if (slot.max && slot.value) charges[i] = true\r\n                }\r\n                return charges\r\n            }, {})\r\n    })()\r\n\r\n    staffData.canPayCost = cost => {\r\n        return staffData.charges && (cost <= staffData.charges || spontaneousCharges[cost])\r\n    }\r\n\r\n    return staffData\r\n}\r\n\r\nexport async function updateEntryCharges(entry, value) {\r\n    const staffData = getSpellcastingEntryStaffData(entry)\r\n    if (!staffData) return\r\n\r\n    const updatedValue = Math.clamped(value, 0, staffData.max)\r\n\r\n    if (updatedValue !== staffData.charges) {\r\n        staffData.charges = updatedValue\r\n        return setFlag(entry, 'staff', staffData)\r\n    }\r\n}\r\n\r\nexport function getStaves(actor) {\r\n    return [\r\n        { type: 'weapon', trait: 'magical' },\r\n        { type: 'equipment', trait: 'coda' },\r\n    ].flatMap(({ type, trait }) =>\r\n        actor.itemTypes[type].filter(item => {\r\n            const traits = item.system.traits?.value\r\n            return traits && traits.includes('staff') && traits.includes(trait)\r\n        })\r\n    )\r\n}\r\n\r\nexport function getMaxSlotRankForStaves(actor) {\r\n    let maxCharges = 0\r\n\r\n    const entries = getValidSpellcastingList(actor)\r\n    for (const entry of entries) {\r\n        const entryMaxCharges = getSpellcastingEntryMaxSlotRank(entry)\r\n        if (entryMaxCharges > maxCharges) maxCharges = entryMaxCharges\r\n    }\r\n\r\n    const activation = findItemWithSourceId(actor, KINETIC_ACTIVATION, 'feat')\r\n    if (activation) {\r\n        const classCharges = Math.ceil(actor.level / 2)\r\n        if (classCharges > maxCharges) maxCharges = classCharges\r\n    }\r\n\r\n    return maxCharges\r\n}\r\n", "import { utils } from './api'\r\nimport { MODULE_ID, getFlag, localize, templatePath, warn } from './module'\r\nimport { getSpellcastingEntryStaffFlags } from './data/staves'\r\n\r\nexport async function onSpellcastingEntryCast(wrapped, ...args) {\r\n    const staffFlags = getSpellcastingEntryStaffFlags(this)\r\n    if (!staffFlags) return wrapped(...args)\r\n\r\n    const actor = this.actor\r\n    const staff = actor.items.get(staffFlags.staveID)\r\n    if (!staff?.isEquipped) {\r\n        warn('staves.noStaff')\r\n        return\r\n    }\r\n\r\n    const [spell, { level }] = args\r\n    const castRank = spell.computeCastRank(level)\r\n\r\n    if (!level || level === '0') {\r\n        return spell.toMessage(undefined, { data: { castLevel: castRank } })\r\n    }\r\n\r\n    if (staffFlags.charges < 1 || (staffFlags.charges < castRank && staffFlags.overcharge)) {\r\n        warn('staves.noCharge')\r\n        return\r\n    }\r\n\r\n    let updates = []\r\n\r\n    if (!staffFlags.overcharge) {\r\n        const spontaneousEntries = actor.spellcasting.filter(\r\n            entry => entry.isSpontaneous && entry.system.slots[`slot${castRank}`].value\r\n        )\r\n\r\n        let useSpontaneous = false\r\n\r\n        const entryRankValue = entry => entry.system.slots[`slot${castRank}`].value\r\n\r\n        if (spontaneousEntries.length === 1) {\r\n            const entry = spontaneousEntries[0]\r\n\r\n            const content = localize('staves.spontaneous.one', {\r\n                rank: utils.spellRankLabel(castRank),\r\n                entry: entry.name,\r\n                remaining: entryRankValue(entry),\r\n            })\r\n\r\n            useSpontaneous = await Dialog.confirm({\r\n                title: localize('staves.spontaneous.title'),\r\n                defaultYes: false,\r\n                content: `<div class=\"pf2e-dailies-spontaneous\">${content}</div>`,\r\n            })\r\n\r\n            if (useSpontaneous) useSpontaneous = 0\r\n        } else if (spontaneousEntries.length > 1) {\r\n            const entries = spontaneousEntries.map((entry, index) => ({\r\n                index,\r\n                name: entry.name,\r\n                remaining: entryRankValue(entry),\r\n            }))\r\n\r\n            const content = await renderTemplate(templatePath('staves-spontaneous.hbs'), {\r\n                entries,\r\n                castRank: utils.spellRankLabel(castRank),\r\n                i18n: (key, { hash }) => localize(`staves.spontaneous.${key}`, hash),\r\n            })\r\n\r\n            useSpontaneous = await Dialog.wait({\r\n                title: localize('staves.spontaneous.title'),\r\n                content,\r\n                buttons: {\r\n                    yes: {\r\n                        icon: '<i class=\"fas fa-check\"></i>',\r\n                        label: game.i18n.localize('Yes'),\r\n                        callback: html => html.find('input[name=entry]:checked').val(),\r\n                    },\r\n                    no: {\r\n                        icon: '<i class=\"fas fa-times\"></i>',\r\n                        label: game.i18n.localize('No'),\r\n                        callback: () => false,\r\n                    },\r\n                },\r\n                close: () => null,\r\n            })\r\n        }\r\n\r\n        if (useSpontaneous === null) {\r\n            return\r\n        } else if (useSpontaneous !== false) {\r\n            const entry = spontaneousEntries[useSpontaneous]\r\n            const current = entry.system.slots[`slot${castRank}`].value\r\n\r\n            updates.push({ _id: entry.id, [`system.slots.slot${castRank}.value`]: current - 1 })\r\n\r\n            staffFlags.charges -= 1\r\n        }\r\n    }\r\n\r\n    if (!updates.length) {\r\n        if (staffFlags.charges < castRank) {\r\n            warn('staves.noCharge')\r\n            return\r\n        }\r\n\r\n        staffFlags.charges -= castRank\r\n    }\r\n\r\n    updates.push({ _id: this.id, [`flags.${MODULE_ID}.staff`]: staffFlags })\r\n\r\n    await actor.updateEmbeddedDocuments('Item', updates)\r\n    await spell.toMessage(undefined, { data: { castLevel: castRank } })\r\n}\r\n\r\nexport function getValidSpellcastingList(actor, { itemOnly, innate, focus } = {}) {\r\n    return actor.spellcasting.regular.filter(entry => {\r\n        if (entry.flags?.['pf2e-staves'] || getFlag(entry, 'staff')) return false\r\n\r\n        if (!innate && entry.isInnate) return false\r\n        if (!focus && entry.isFocusPool) return false\r\n\r\n        if (entry.system.prepared.value === 'items') {\r\n            if (!itemOnly) return false\r\n            if (itemOnly === 'scroll' && entry.system.prepared.validItems !== 'scroll') return false\r\n        }\r\n\r\n        return true\r\n    })\r\n}\r\n\r\nexport function getSpellcastingEntryMaxSlotRank(entry) {\r\n    let maxSlot = 0\r\n\r\n    if (entry.system.prepared.value === 'items') {\r\n        const levelMaxSlot = Math.ceil(entry.actor.level / 2)\r\n        if (levelMaxSlot > maxSlot) maxSlot = levelMaxSlot\r\n    } else {\r\n        for (let i = 0; i <= 10; i++) {\r\n            const slot = entry.system.slots[`slot${i}`]\r\n            if (slot.max) maxSlot = Math.max(maxSlot, i)\r\n        }\r\n    }\r\n\r\n    return maxSlot\r\n}\r\n\r\nexport function getPreparedSpells(actor) {\r\n    const spells = []\r\n\r\n    const entries = actor.spellcasting.filter(entry => entry.isPrepared)\r\n    for (const entry of entries) {\r\n        for (let rank = 1; rank <= 10; rank++) {\r\n            const data = entry.system.slots[`slot${rank}`]\r\n            if (!data.max) continue\r\n\r\n            for (const [index, { id, prepared, expended }] of Object.entries(data.prepared)) {\r\n                if (prepared === false || expended) continue\r\n\r\n                const spell = entry.spells.get(id)\r\n                if (!spell) continue\r\n\r\n                spells.push({ spell, rank, index })\r\n            }\r\n        }\r\n    }\r\n\r\n    return spells\r\n}\r\n\r\nexport function getNotExpendedPreparedSpellSlot(spell, rank) {\r\n    if (!spell) return\r\n\r\n    rank ??= spell.rank\r\n\r\n    const entry = spell.spellcasting\r\n    const entries = Object.entries(entry.system.slots[`slot${rank}`].prepared)\r\n    const prepared = entries.find(([_, { id, expended }]) => id === spell.id && expended !== true)\r\n    if (!prepared) return\r\n\r\n    return {\r\n        slotIndex: prepared[0],\r\n        entry,\r\n    }\r\n}\r\n\r\nexport function getBestSpellcastingEntry(actor) {\r\n    const entries = getValidSpellcastingList(actor)\r\n\r\n    let bestMod = 0\r\n    let bestEntries = []\r\n\r\n    for (const entry of entries) {\r\n        const mod = entry.statistic.mod\r\n        if (mod > bestMod) {\r\n            bestEntries = [entry]\r\n            bestMod = mod\r\n        } else if (mod === bestMod) {\r\n            bestEntries.push(entry)\r\n        }\r\n    }\r\n\r\n    if (bestEntries.length === 0) return\r\n\r\n    const returnedEntry = entry => {\r\n        const { ability, tradition, proficiency } = entry.system\r\n        return { ability, tradition, proficiency, mod: bestMod }\r\n    }\r\n\r\n    if (bestEntries.length === 1) return returnedEntry(bestEntries[0])\r\n\r\n    const classAttr = actor.classDC.attribute\r\n    const classAttrEntries = bestEntries.filter(entry => entry.attribute === classAttr)\r\n\r\n    if (classAttrEntries === 1) return returnedEntry(classAttrEntries[0])\r\n\r\n    let bestCount = 0\r\n    let bestEntry\r\n\r\n    for (const entry of bestEntries) {\r\n        const entryCount = getPreparedCount(entry)\r\n        if (entryCount > bestCount) {\r\n            bestCount = entryCount\r\n            bestEntry = entry\r\n        }\r\n    }\r\n\r\n    return returnedEntry(bestEntry)\r\n}\r\n\r\nfunction getPreparedCount(entry) {\r\n    if (entry.isSpontaneous) return entry.spells.size\r\n\r\n    if (entry.isPrepared) {\r\n        const slots = Object.values(entry.system.slots)\r\n        const prepared = slots.flatMap(slot => Object.values(slot.prepared))\r\n        return prepared.filter(spell => spell.id).length\r\n    }\r\n\r\n    return 0\r\n}\r\n\r\nexport function getSpellcastingEntriesSortBounds(actor) {\r\n    let min = 0\r\n    let max = 0\r\n\r\n    for (const entry of actor.spellcasting) {\r\n        if (entry.sort > max) max = entry.sort\r\n        else if (entry.sort < min) min = entry.sort\r\n    }\r\n\r\n    return { min, max }\r\n}\r\n", "import { getSpellcastingEntryMaxSlotRank, getValidSpellcastingList } from '../spellcasting'\r\n\r\nexport const scrollSavant = {\r\n    key: 'savant',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.feats-srd.Item.u5DBg0LrBUKP0JsJ', // Scroll Adept\r\n    },\r\n    prepare: ({ actor }) => {\r\n        const { maxSlot, maxTradition } = getSpellcastingTraditionDetails(actor, 'arcane')\r\n\r\n        const custom = {\r\n            first: { level: maxSlot - 2, condition: true },\r\n            second: { level: maxSlot - 3, condition: true },\r\n            third: { level: maxSlot - 4, condition: maxTradition >= 3 && maxSlot >= 5 },\r\n            fourth: { level: maxSlot - 5, condition: maxTradition >= 4 && maxSlot >= 6 },\r\n        }\r\n\r\n        return custom\r\n    },\r\n    rows: ['first', 'second', 'third', 'fourth'].map(rowName => {\r\n        const row = {\r\n            type: 'drop',\r\n            slug: rowName,\r\n            label: ({ custom, utils }) => utils.spellRankLabel(custom[rowName].level),\r\n            filter: {\r\n                type: 'spell',\r\n                search: ({ custom }) => ({\r\n                    category: ['spell'],\r\n                    traditions: ['arcane'],\r\n                    level: custom[rowName].level,\r\n                }),\r\n            },\r\n            condition: ({ custom }) => custom[rowName].condition,\r\n        }\r\n        return row\r\n    }),\r\n    process: async ({ utils, fields, custom, addItem, messages }) => {\r\n        for (const field of Object.values(fields)) {\r\n            const uuid = field.uuid\r\n            const source = await utils.createSpellScrollSource({ uuid, level: custom[field.row].level })\r\n            addItem(source)\r\n            messages.add('scrolls', { uuid, label: source.name })\r\n        }\r\n    },\r\n}\r\n\r\nfunction getSpellcastingTraditionDetails(actor, tradition) {\r\n    let maxSlot = 1\r\n    let maxTradition = 0\r\n\r\n    const entries = getValidSpellcastingList(actor)\r\n    for (const entry of entries) {\r\n        const entryMaxSlot = getSpellcastingEntryMaxSlotRank(entry)\r\n        if (entryMaxSlot > maxSlot) maxSlot = entryMaxSlot\r\n\r\n        if (entry.tradition === tradition) maxTradition = Math.max(maxTradition, entry.rank)\r\n    }\r\n\r\n    return { maxSlot: Math.min(maxSlot, 10), maxTradition }\r\n}\r\n", "export function createTrainedSkillDaily(key, uuid, label) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: 'combo',\r\n                slug: 'skill',\r\n                options: ({ actor, utils }) => {\r\n                    const actorSkills = actor.skills\r\n                    return utils.skillNames.filter(x => actorSkills[x].rank < 1)\r\n                },\r\n                labelizer: ({ utils }) => utils.skillLabel,\r\n            },\r\n        ],\r\n        process: ({ fields, addItem, addRule, utils, messages }) => {\r\n            let value = fields.skill.value\r\n\r\n            if (fields.skill.input === 'true') {\r\n                const source = utils.createLoreSource({ name: value, rank: 1 })\r\n                addItem(source)\r\n            } else {\r\n                const source = utils.createSkillRuleElement({ skill: value, value: 1 })\r\n                value = utils.skillLabel(value)\r\n                addRule(source)\r\n            }\r\n\r\n            messages.add('skills', { uuid, selected: value, label })\r\n        },\r\n    }\r\n    return daily\r\n}\r\n\r\nexport function createTrainedLoreDaily(key, uuid, label) {\r\n    const daily = {\r\n        key,\r\n        label,\r\n        item: {\r\n            uuid,\r\n        },\r\n        rows: [\r\n            {\r\n                type: 'input',\r\n                slug: 'skill',\r\n            },\r\n        ],\r\n        process: ({ addItem, utils, fields, messages }) => {\r\n            const value = fields.skill.value\r\n            const source = utils.createLoreSource({ name: value, rank: 1 })\r\n            addItem(source)\r\n            messages.add('skills', { uuid, selected: value, label })\r\n        },\r\n    }\r\n    return daily\r\n}\r\n", "export const thaumaturgeTome = {\r\n    key: 'tome',\r\n    item: {\r\n        uuid: 'Compendium.pf2e.classfeatures.Item.MyN1cQgE0HsLF20e', // Tome\r\n    },\r\n    children: [\r\n        {\r\n            slug: 'adept',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.Obm4ItMIIr0whYeO', // Implement Adept\r\n            condition: createChildCondition('adept'),\r\n        },\r\n        {\r\n            slug: 'second',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.ZEUxZ4Ta1kDPHiq5', // Second Adept\r\n            condition: createChildCondition('adept'),\r\n        },\r\n        {\r\n            slug: 'intense',\r\n            uuid: 'Compendium.pf2e.feats-srd.Item.yRRM1dsY6jakEMaC', // Intense Implement\r\n        },\r\n        {\r\n            slug: 'paragon',\r\n            uuid: 'Compendium.pf2e.classfeatures.Item.QEtgbY8N2V4wTbsI', // Implement Paragon\r\n            condition: createChildCondition('paragon'),\r\n        },\r\n    ],\r\n    prepare: ({ utils, actor, children }) => {\r\n        const skillNames = utils.skillNames\r\n        const actorLevel = actor.level\r\n        const actorSkills = actor.skills\r\n\r\n        const custom = {\r\n            first: { options: [], rank: 1 },\r\n            second: { options: [], rank: 1 },\r\n        }\r\n\r\n        // Implement Paragon\r\n        if (children.paragon) {\r\n            const skills = skillNames.filter(x => actorSkills[x].rank < 4)\r\n            custom.first = { rank: 4, options: skills }\r\n            custom.second = { rank: 4, options: skills }\r\n        }\r\n        // Intense Implement or Second Adept or Implement Adept\r\n        else if (children.intense || children.adept || children.second) {\r\n            const masters = skillNames.filter(x => actorSkills[x].rank < 3)\r\n\r\n            if (actorLevel >= 9) {\r\n                custom.first = { rank: 3, options: masters }\r\n                custom.second = { rank: 3, options: masters }\r\n            } else {\r\n                const experts = skillNames.filter(x => actorSkills[x].rank < 2)\r\n                custom.first = { rank: 2, options: experts }\r\n                custom.second = { rank: 3, options: masters }\r\n            }\r\n        }\r\n        // Tome\r\n        else {\r\n            if (actorLevel >= 5) {\r\n                const experts = skillNames.filter(x => actorSkills[x].rank < 2)\r\n                custom.first = { rank: 2, options: experts }\r\n                custom.second = { rank: 2, options: experts }\r\n            } else if (actorLevel >= 3) {\r\n                const trained = skillNames.filter(x => actorSkills[x].rank < 1)\r\n                const experts = skillNames.filter(x => actorSkills[x].rank < 2)\r\n                custom.first = { rank: 1, options: trained }\r\n                custom.second = { rank: 2, options: experts }\r\n            } else {\r\n                const trained = skillNames.filter(x => actorSkills[x].rank < 1)\r\n                custom.first = { rank: 1, options: trained }\r\n                custom.second = { rank: 1, options: trained }\r\n            }\r\n        }\r\n\r\n        return custom\r\n    },\r\n    rows: ['first', 'second'].map(rowName => {\r\n        const row = {\r\n            type: 'combo',\r\n            slug: rowName,\r\n            label: ({ custom, utils }) => utils.proficiencyLabel(custom[rowName].rank),\r\n            options: ({ custom }) => custom[rowName].options,\r\n            labelizer: ({ utils }) => utils.skillLabel,\r\n        }\r\n        return row\r\n    }),\r\n    process: ({ custom, fields, utils, messages, addItem, addRule }) => {\r\n        messages.addGroup('tome', 65)\r\n\r\n        for (const rowName of ['first', 'second']) {\r\n            const rank = custom[rowName].rank\r\n            let value = fields[rowName].value\r\n\r\n            if (fields[rowName].input === 'true') {\r\n                const source = utils.createLoreSource({ name: value, rank })\r\n                addItem(source)\r\n            } else {\r\n                const source = utils.createSkillRuleElement({ skill: value, value: rank })\r\n                value = utils.skillLabel(value)\r\n                addRule(source)\r\n            }\r\n\r\n            messages.add('tome', { label: utils.proficiencyLabel(rank), selected: value })\r\n        }\r\n    },\r\n}\r\n\r\nfunction createChildCondition(option) {\r\n    return function ({ item, utils, actor }) {\r\n        const itemId = utils.getChoiSetRuleSelection(item)\r\n        return actor.items.get(itemId)?.slug === 'tome'\r\n    }\r\n}\r\n", "import { utils } from './api'\r\nimport { tricksterAce } from './data/ace'\r\nimport { bladeAlly } from './data/blade'\r\nimport { ceremonialKnife } from './data/ceremonial'\r\nimport { createScrollChain } from './data/chain'\r\nimport { createFeatDaily } from './data/feat'\r\nimport { combatFlexibility } from './data/flexibility'\r\nimport { createLanguageDaily } from './data/language'\r\nimport { mindSmith } from './data/mind'\r\nimport { createResistancelDaily } from './data/resistance'\r\nimport { rootMagic } from './data/root'\r\nimport { scrollSavant } from './data/savant'\r\nimport { createTrainedLoreDaily, createTrainedSkillDaily } from './data/skill'\r\nimport { thaumaturgeTome } from './data/tome'\r\nimport { AsyncFunction, error, getSetting, getSourceId, warn } from './module'\r\n\r\nconst DEPRECATED_CUSTOM_DAILIES = ['root-magic']\r\n\r\nexport const BUILTINS_DAILIES = [\r\n    thaumaturgeTome,\r\n    createTrainedSkillDaily('longevity', 'Compendium.pf2e.feats-srd.Item.WoLh16gyDp8y9WOZ'), // Ancestral Longevity\r\n    createTrainedSkillDaily('ageless', 'Compendium.pf2e.feats-srd.Item.wylnETwIz32Au46y'), // Ageless Spirit\r\n    createTrainedSkillDaily('memories', 'Compendium.pf2e.feats-srd.Item.ptEOt3lqjxUnAW62'), // Ancient Memories\r\n    createTrainedSkillDaily('studies', 'Compendium.pf2e.feats-srd.Item.9bgl6qYWKHzqWZj0'), // Flexible Studies\r\n    createTrainedLoreDaily('study', 'Compendium.pf2e.feats-srd.Item.aLJsBBZzlUK3G8MW'), // Quick Study\r\n    createLanguageDaily('linguistics', 'Compendium.pf2e.feats-srd.Item.eCWQU16hRLfN1KaX'), // Ancestral Linguistics\r\n    createLanguageDaily('borts', 'Compendium.pf2e.equipment-srd.Item.iS7hAQMAaThHYE8g'), // Bort's Blessing\r\n    createResistancelDaily(\r\n        'elementalist',\r\n        'Compendium.pf2e.feats-srd.Item.tx9pkrpmtqe4FnvS',\r\n        ['air', 'earth', 'fire', 'water'],\r\n        'half',\r\n        'elementalist'\r\n    ), // Elementalist Dedication\r\n    createResistancelDaily(\r\n        'ganzi',\r\n        'Compendium.pf2e.heritages.Item.3reGfXH0S82hM7Gp',\r\n        ['acid', 'electricity', 'sonic'],\r\n        'half',\r\n        'ganzi',\r\n        true\r\n    ), // Ganzi\r\n    createFeatDaily('metamagical', 'Compendium.pf2e.classfeatures.Item.89zWKD2CN7nRu2xp', {\r\n        category: ['class'],\r\n        traits: { selected: ['spellshape', 'wizard'], conjunction: 'and' },\r\n        level: 'half',\r\n    }), // Experimental Spellshaping\r\n    combatFlexibility,\r\n    scrollSavant,\r\n    createScrollChain('esoterica', [\r\n        'Compendium.pf2e.feats-srd.Item.OqObuRB8oVSAEKFR', // Scroll Esoterica\r\n        'Compendium.pf2e.feats-srd.Item.nWd7m0yRcIEVUy7O', // Elaborate Scroll Esoterica\r\n        'Compendium.pf2e.feats-srd.Item.LHjPTV5vP3MOsPPJ', // Grand Scroll Esoterica\r\n    ]),\r\n    createScrollChain('trickster', [\r\n        'Compendium.pf2e.feats-srd.Item.ROAUR1GhC19Pjk9C', // Basic Scroll Cache\r\n        'Compendium.pf2e.feats-srd.Item.UrOj9TROtn8nuxPf', // Expert Scroll Cache\r\n        'Compendium.pf2e.feats-srd.Item.lIg5Gzz7W70jfbk1', // Master Scroll Cache\r\n    ]),\r\n    tricksterAce(),\r\n    mindSmith,\r\n    bladeAlly,\r\n    rootMagic,\r\n    ceremonialKnife,\r\n]\r\n\r\nconst BUILTINS_UUIDS = prepareDailies(BUILTINS_DAILIES, 'dailies')\r\nconst UUIDS = new Map()\r\n\r\nexport function prepareDailies(dailies, prefix) {\r\n    const uuids = new Map()\r\n\r\n    for (const original of dailies) {\r\n        const daily = deepClone(original)\r\n\r\n        try {\r\n            const keyWithPrefix = `${prefix}.${daily.key}`\r\n\r\n            uuids.set(daily.item.uuid, { daily, condition: daily.item.condition })\r\n\r\n            daily.key = keyWithPrefix\r\n\r\n            if (daily.children) {\r\n                for (let i = 0; i < daily.children.length; i++) {\r\n                    const { uuid, condition } = daily.children[i]\r\n                    uuids.set(uuid, { daily, index: i, condition })\r\n                }\r\n            }\r\n        } catch (err) {\r\n            error('error.unexpected')\r\n            console.error(err)\r\n            console.error(`The error occured during data gathering of ${prefix}.${daily.key}`)\r\n        }\r\n    }\r\n\r\n    return uuids\r\n}\r\n\r\nexport let CUSTOM_DAILIES = []\r\n\r\nexport async function parseCustomDailies() {\r\n    UUIDS.clear()\r\n\r\n    CUSTOM_DAILIES = []\r\n\r\n    const customs = getSetting('customDailies')\r\n    for (const { key, code } of customs) {\r\n        try {\r\n            const fn = new AsyncFunction(code)\r\n            const daily = await fn()\r\n            if (!checkCustomDaily(daily, true)) continue\r\n            CUSTOM_DAILIES.push(daily)\r\n        } catch (err) {\r\n            error('error.unexpected')\r\n            console.error(err)\r\n            console.error(`The error occured during call of custom function for ${key}`)\r\n        }\r\n    }\r\n\r\n    for (const [uuid, daily] of BUILTINS_UUIDS.entries()) {\r\n        UUIDS.set(uuid, daily)\r\n    }\r\n\r\n    const CUSTOM_UUIDS = prepareDailies(CUSTOM_DAILIES, 'custom')\r\n    for (const [uuid, daily] of CUSTOM_UUIDS.entries()) {\r\n        UUIDS.set(uuid, daily)\r\n    }\r\n}\r\n\r\nexport function checkCustomDaily(daily, warning = false) {\r\n    if (!DEPRECATED_CUSTOM_DAILIES.includes(daily.key)) return true\r\n    if (warning && game.user.isGM) warn('deprecated.custom.key', { name: daily.label.trim() || daily.key }, true)\r\n    return false\r\n}\r\n\r\nexport function getDailies(actor) {\r\n    const dailies = {}\r\n\r\n    for (const item of actor.items) {\r\n        const sourceId = getSourceId(item)\r\n        if (!sourceId || (item.isOfType('physical') && item.isInvested === false)) continue\r\n\r\n        const entry = UUIDS.get(sourceId)\r\n        if (!entry) continue\r\n\r\n        const { daily, index, condition } = entry\r\n        try {\r\n            if (typeof condition === 'function' && !condition({ actor, item, utils })) continue\r\n\r\n            dailies[daily.key] ??= deepClone(daily)\r\n\r\n            if (index === undefined) dailies[daily.key].item = item\r\n            else dailies[daily.key].children[index].item = item\r\n        } catch (err) {\r\n            error('error.unexpected')\r\n            console.error(err)\r\n            console.error(`The error occured during data gathering of ${daily.key}`)\r\n        }\r\n    }\r\n\r\n    return Object.values(dailies).filter(daily => daily.item && daily.item instanceof Item)\r\n}\r\n\r\nexport function getDailyFromSourceId(sourceId) {\r\n    return UUIDS.get(sourceId)?.daily\r\n}\r\n", "export function getFamiliarPack() {\r\n    return game.packs.get('pf2e.familiar-abilities')\r\n}\r\n\r\nexport function familiarUUID(id) {\r\n    return `Compendium.pf2e.familiar-abilities.Item.${id}`\r\n}\r\n", "import { findItemWithSourceId } from '../module'\r\n\r\nconst RATION_UUID = 'Compendium.pf2e.equipment-srd.Item.L9ZV076913otGtiB'\r\n\r\nexport function getRations(actor) {\r\n    return findItemWithSourceId(actor, RATION_UUID, 'consumable')\r\n}\r\n", "export function ErrorPF2e(message) {\r\n    return Error(`PF2e System | ${message}`)\r\n}\r\n\r\nexport function isObject(value) {\r\n    return typeof value === 'object' && value !== null\r\n}\r\n\r\nexport function sluggify(text, options) {\r\n    return game.pf2e.system.sluggify(text, options)\r\n}\r\n", "import { isObject } from './utils'\r\n\r\nexport class PredicatePF2e extends Array {\r\n    constructor(...statements) {\r\n        super(...(Array.isArray(statements[0]) ? statements[0] : statements))\r\n        this.isValid = PredicatePF2e.isValid(this)\r\n    }\r\n\r\n    /** Structurally validate the predicates */\r\n    static isValid(statements) {\r\n        return this.isArray(statements)\r\n    }\r\n\r\n    /** Is this an array of predicatation statements? */\r\n    static isArray(statements) {\r\n        return super.isArray(statements) && statements.every(s => StatementValidator.isStatement(s))\r\n    }\r\n\r\n    /** Test if the given predicate passes for the given list of options. */\r\n    static test(predicate = [], options) {\r\n        return predicate instanceof PredicatePF2e ? predicate.test(options) : new PredicatePF2e(...predicate).test(options)\r\n    }\r\n\r\n    /** Test this predicate against a domain of discourse */\r\n    test(options) {\r\n        if (this.length === 0) {\r\n            return true\r\n        } else if (!this.isValid) {\r\n            console.warn('PF2e System | The provided predicate set is malformed.')\r\n            return false\r\n        }\r\n\r\n        const domain = options instanceof Set ? options : new Set(options)\r\n        return this.every(s => this.#isTrue(s, domain))\r\n    }\r\n\r\n    toObject() {\r\n        return deepClone([...this])\r\n    }\r\n\r\n    clone() {\r\n        return new PredicatePF2e(this.toObject())\r\n    }\r\n\r\n    /** Is the provided statement true? */\r\n    #isTrue(statement, domain) {\r\n        return (\r\n            (typeof statement === 'string' && domain.has(statement)) ||\r\n            (StatementValidator.isBinaryOp(statement) && this.#testBinaryOp(statement, domain)) ||\r\n            (StatementValidator.isCompound(statement) && this.#testCompound(statement, domain))\r\n        )\r\n    }\r\n\r\n    #testBinaryOp(statement, domain) {\r\n        if ('eq' in statement) {\r\n            return domain.has(`${statement.eq[0]}:${statement.eq[1]}`)\r\n        } else {\r\n            const operator = Object.keys(statement)[0]\r\n\r\n            // Allow for tests of partial statements against numeric values\r\n            // E.g., `{ \"gt\": [\"actor:level\", 5] }` would match against \"actor:level:6\" and \"actor:level:7\"\r\n            const [left, right] = Object.values(statement)[0]\r\n            const domainArray = Array.from(domain)\r\n            const getValues = operand => {\r\n                const maybeNumber = Number(operand)\r\n                if (!Number.isNaN(maybeNumber)) return [maybeNumber]\r\n                const pattern = new RegExp(String.raw`^${operand}:([^:]+)$`)\r\n                const values = domainArray.map(s => Number(pattern.exec(s)?.[1] || NaN)).filter(v => !Number.isNaN(v))\r\n                return values.length > 0 ? values : [NaN]\r\n            }\r\n            const leftValues = getValues(left)\r\n            const rightValues = getValues(right)\r\n\r\n            switch (operator) {\r\n                case 'gt':\r\n                    return leftValues.some(l => rightValues.every(r => l > r))\r\n                case 'gte':\r\n                    return leftValues.some(l => rightValues.every(r => l >= r))\r\n                case 'lt':\r\n                    return leftValues.some(l => rightValues.every(r => l < r))\r\n                case 'lte':\r\n                    return leftValues.some(l => rightValues.every(r => l <= r))\r\n                default:\r\n                    console.warn('PF2e System | Malformed binary operation encountered')\r\n                    return false\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Is the provided compound statement true? */\r\n    #testCompound(statement, domain) {\r\n        return (\r\n            ('and' in statement && statement.and.every(subProp => this.#isTrue(subProp, domain))) ||\r\n            ('nand' in statement && !statement.nand.every(subProp => this.#isTrue(subProp, domain))) ||\r\n            ('or' in statement && statement.or.some(subProp => this.#isTrue(subProp, domain))) ||\r\n            ('xor' in statement && statement.xor.filter(subProp => this.#isTrue(subProp, domain)).length === 1) ||\r\n            ('nor' in statement && !statement.nor.some(subProp => this.#isTrue(subProp, domain))) ||\r\n            ('not' in statement && !this.#isTrue(statement.not, domain)) ||\r\n            ('if' in statement && !(this.#isTrue(statement.if, domain) && !this.#isTrue(statement.then, domain)))\r\n        )\r\n    }\r\n}\r\n\r\nclass StatementValidator {\r\n    static isStatement(statement) {\r\n        return statement instanceof Object\r\n            ? this.isCompound(statement) || this.isBinaryOp(statement)\r\n            : typeof statement === 'string'\r\n            ? this.isAtomic(statement)\r\n            : false\r\n    }\r\n\r\n    static isAtomic(statement) {\r\n        return (typeof statement === 'string' && statement.length > 0) || this.isBinaryOp(statement)\r\n    }\r\n\r\n    static #binaryOperators = new Set(['eq', 'gt', 'gte', 'lt', 'lte'])\r\n\r\n    static isBinaryOp(statement) {\r\n        if (!isObject(statement)) return false\r\n        const entries = Object.entries(statement)\r\n        if (entries.length > 1) return false\r\n        const [operator, operands] = entries[0]\r\n        return (\r\n            this.#binaryOperators.has(operator) &&\r\n            Array.isArray(operands) &&\r\n            operands.length === 2 &&\r\n            typeof operands[0] === 'string' &&\r\n            ['string', 'number'].includes(typeof operands[1])\r\n        )\r\n    }\r\n\r\n    static isCompound(statement) {\r\n        return (\r\n            isObject(statement) &&\r\n            (this.isAnd(statement) ||\r\n                this.isOr(statement) ||\r\n                this.isNand(statement) ||\r\n                this.isXor(statement) ||\r\n                this.isNor(statement) ||\r\n                this.isNot(statement) ||\r\n                this.isIf(statement))\r\n        )\r\n    }\r\n\r\n    static isAnd(statement) {\r\n        return (\r\n            Object.keys(statement).length === 1 &&\r\n            Array.isArray(statement.and) &&\r\n            statement.and.every(subProp => this.isStatement(subProp))\r\n        )\r\n    }\r\n\r\n    static isNand(statement) {\r\n        return (\r\n            Object.keys(statement).length === 1 &&\r\n            Array.isArray(statement.nand) &&\r\n            statement.nand.every(subProp => this.isStatement(subProp))\r\n        )\r\n    }\r\n\r\n    static isOr(statement) {\r\n        return (\r\n            Object.keys(statement).length === 1 &&\r\n            Array.isArray(statement.or) &&\r\n            statement.or.every(subProp => this.isStatement(subProp))\r\n        )\r\n    }\r\n\r\n    static isXor(statement) {\r\n        return (\r\n            Object.keys(statement).length === 1 &&\r\n            Array.isArray(statement.xor) &&\r\n            statement.xor.every(subProp => this.isStatement(subProp))\r\n        )\r\n    }\r\n\r\n    static isNor(statement) {\r\n        return (\r\n            Object.keys(statement).length === 1 &&\r\n            Array.isArray(statement.nor) &&\r\n            statement.nor.every(subProp => this.isStatement(subProp))\r\n        )\r\n    }\r\n\r\n    static isNot(statement) {\r\n        return Object.keys(statement).length === 1 && !!statement.not && this.isStatement(statement.not)\r\n    }\r\n\r\n    static isIf(statement) {\r\n        return Object.keys(statement).length === 2 && this.isStatement(statement.if) && this.isStatement(statement.then)\r\n    }\r\n}\r\n", "import { utils } from '../../api'\r\nimport { capitalize, getFlag, hasLocalization, localize } from '../../module'\r\nimport { PredicatePF2e } from '../../pf2e/predicate'\r\n\r\nconst templateOrders = {\r\n    select: 100,\r\n    combo: 80,\r\n    random: 60,\r\n    alert: 40,\r\n    input: 20,\r\n    drop: 0,\r\n}\r\n\r\nexport async function getTemplate({ children = [], key, item, prepare, label, rows = [] }) {\r\n    const actor = this.actor\r\n    const saved = (this.saved[key] = getFlag(actor, key) ?? {})\r\n    const rowsObj = (this.rows[key] = {})\r\n    const childrenObj = (this.children[key] = children.reduce((children, { slug, item }) => {\r\n        children[slug] = item\r\n        return children\r\n    }, {}))\r\n\r\n    const prepareArgs = {\r\n        actor,\r\n        item,\r\n        children: childrenObj,\r\n        utils,\r\n    }\r\n\r\n    const custom = (this.custom[key] = (prepare && (await prepare(prepareArgs))) || {})\r\n\r\n    const dailyArgs = (this.dailyArgs[key] = {\r\n        ...prepareArgs,\r\n        custom,\r\n    })\r\n\r\n    let groupLabel = await getProcessedValue(label, dailyArgs)\r\n    const labeled = groupLabel ? `label.${groupLabel}` : key.startsWith('dailies.') ? `label.${key.slice(8)}` : undefined\r\n    if (labeled && hasLocalization(labeled)) groupLabel = localize(labeled)\r\n\r\n    const predicates = (this.predicate[key] = children.filter(child => child.item).map(child => child.slug))\r\n\r\n    const template = {\r\n        label: groupLabel ? game.i18n.localize(groupLabel) : item.name,\r\n        rows: [],\r\n    }\r\n\r\n    for (const row of rows) {\r\n        rowsObj[row.slug] = row\r\n\r\n        const { type, slug, childPredicate = [], condition, label, save, unique } = row\r\n\r\n        if (childPredicate.length && !PredicatePF2e.test(childPredicate, predicates)) continue\r\n        if (condition && !(await condition(dailyArgs))) continue\r\n\r\n        const savedRow = save === false || type === 'random' ? undefined : saved[slug]\r\n        const rowLabel = await getProcessedValue(label, dailyArgs)\r\n        const value =\r\n            savedRow === undefined\r\n                ? ''\r\n                : typeof savedRow !== 'object'\r\n                ? savedRow\r\n                : 'name' in savedRow\r\n                ? savedRow.name\r\n                : savedRow.selected\r\n\r\n        const rowTemplate = {\r\n            label: rowLabel ? game.i18n.localize(rowLabel) : '',\r\n            value,\r\n            order: templateOrders[type],\r\n            data: {\r\n                type,\r\n                daily: key,\r\n                row: slug,\r\n                ...(unique ? { unique } : ''),\r\n            },\r\n        }\r\n\r\n        if (isComboRow(row) || isSelectRow(row) || isRandomRow(row)) {\r\n            const tmp = (await getProcessedValue(row.options, dailyArgs)) ?? []\r\n            if (type !== 'combo' && !tmp.length) continue\r\n\r\n            const labelize = (typeof row.labelizer === 'function' && row.labelizer(dailyArgs)) || (value => capitalize(value))\r\n            rowTemplate.options = tmp.map(value => (typeof value === 'string' ? { value, label: labelize(value) } : value))\r\n\r\n            if (isComboRow(row)) {\r\n                rowTemplate.selected = rowTemplate.value\r\n                rowTemplate.data.input = savedRow?.input ?? true\r\n\r\n                if (!rowTemplate.data.input && tmp.includes(rowTemplate.selected)) {\r\n                    rowTemplate.value = labelize(rowTemplate.selected)\r\n                }\r\n            }\r\n        } else if (isDropRow(row)) {\r\n            rowTemplate.data.uuid = savedRow?.uuid ?? ''\r\n        } else if (isAlerRow(row)) {\r\n            rowTemplate.value = typeof row.message === 'function' ? await row.message(dailyArgs) : row.message\r\n        }\r\n\r\n        template.rows.push(rowTemplate)\r\n    }\r\n\r\n    return template\r\n}\r\n\r\nasync function getProcessedValue(obj, args) {\r\n    if (typeof obj === 'function') return await obj(args)\r\n    return obj\r\n}\r\n\r\nfunction isComboRow(row) {\r\n    return row.type === 'combo'\r\n}\r\n\r\nfunction isSelectRow(row) {\r\n    return row.type === 'select'\r\n}\r\n\r\nfunction isRandomRow(row) {\r\n    return row.type === 'random'\r\n}\r\n\r\nfunction isDropRow(row) {\r\n    return row.type === 'drop'\r\n}\r\n\r\nfunction isAlerRow(row) {\r\n    return row.type === 'alert'\r\n}\r\n", "export function getTranslatedSkills() {\r\n    return Object.entries(CONFIG.PF2E.skillList).reduce((result, [key, value]) => {\r\n        return {\r\n            ...result,\r\n            [key]: game.i18n.localize(value).toLocaleLowerCase(game.i18n.lang),\r\n        }\r\n    }, {})\r\n}\r\n", "import { sequenceArray } from '../../module'\r\n\r\nexport function getSimplifiableValue(actor, value, fallback) {\r\n    if (value === undefined) return fallback\r\n    if (typeof value === 'number') return value\r\n    if (value === 'level') return actor.level\r\n    if (value === 'half') return Math.max(1, Math.floor(actor.level / 2))\r\n    const numbered = Number(value)\r\n    return isNaN(numbered) ? fallback : numbered\r\n}\r\n\r\nexport async function parseFilter(filter) {\r\n    return {\r\n        type: filter.type,\r\n        search: await (filter.type === 'feat'\r\n            ? parseFeatFilter(this.actor, filter.search)\r\n            : parseSpellFilter(this.actor, filter.search)),\r\n        drop: filter.drop,\r\n    }\r\n}\r\n\r\nfunction checkFilter(selected, checkbox) {\r\n    if (!selected?.length) return\r\n\r\n    checkbox.selected = selected\r\n    checkbox.isExpanded = true\r\n    selected.forEach(x => (checkbox.options[x].selected = true))\r\n}\r\n\r\nfunction setTraits(searchTraits, dataTraits) {\r\n    const traits = getFilterTraits(searchTraits)\r\n    if (traits?.selected.length) {\r\n        dataTraits.conjunction = traits.conjunction\r\n        dataTraits.selected = traits.selected\r\n    }\r\n}\r\n\r\nexport function getFilterTraits(traits) {\r\n    if (!traits) return\r\n\r\n    const selected = Array.isArray(traits) ? traits : traits.selected\r\n    if (!selected?.length) return\r\n\r\n    return {\r\n        selected: selected.map(x => (typeof x === 'string' ? { value: x } : x)),\r\n        conjunction: (!Array.isArray(traits) && traits.conjunction) || 'and',\r\n    }\r\n}\r\n\r\nasync function parseSpellFilter(actor, search) {\r\n    const data = await game.pf2e.compendiumBrowser.tabs.spell.getFilterData()\r\n\r\n    checkFilter(search.category, data.checkboxes.category)\r\n    checkFilter(search.school, data.checkboxes.school)\r\n    checkFilter(search.traditions, data.checkboxes.traditions)\r\n    checkFilter(search.rarity, data.checkboxes.rarity)\r\n    checkFilter(search.source, data.checkboxes.source)\r\n\r\n    setTraits(search.traits, data.multiselects.traits)\r\n\r\n    const level = getSpellFilterLevel(actor, search.level)\r\n    if (level?.length) checkFilter(level, data.checkboxes.rank)\r\n\r\n    return data\r\n}\r\n\r\nasync function parseFeatFilter(actor, search) {\r\n    const data = await game.pf2e.compendiumBrowser.tabs.feat.getFilterData()\r\n\r\n    checkFilter(search.category, data.checkboxes.category)\r\n    checkFilter(search.skills, data.checkboxes.skills)\r\n    checkFilter(search.rarity, data.checkboxes.rarity)\r\n    checkFilter(search.source, data.checkboxes.source)\r\n\r\n    setTraits(search.traits, data.multiselects.traits)\r\n\r\n    const level = getFeatFilterLevel(actor, search.level)\r\n    if (level) {\r\n        data.sliders.level.values.min = level.min\r\n        data.sliders.level.values.max = level.max\r\n        data.sliders.level.isExpanded = true\r\n    }\r\n\r\n    return data\r\n}\r\n\r\nexport function getSpellFilterLevel(actor, level) {\r\n    if (Array.isArray(level)) return level\r\n\r\n    const simplified = getSimplifiableValue(actor, level)\r\n    if (simplified) return sequenceArray(1, simplified)\r\n}\r\n\r\nexport function getFeatFilterLevel(actor, level) {\r\n    if (level === undefined) return\r\n\r\n    if (typeof level === 'object') {\r\n        return {\r\n            min: getSimplifiableValue(actor, level.min, 0),\r\n            max: getSimplifiableValue(actor, level.min, 20),\r\n        }\r\n    } else {\r\n        return { min: 0, max: getSimplifiableValue(actor, level, 20) }\r\n    }\r\n}\r\n", "import { subLocalize } from '../../module'\r\nimport { getTranslatedSkills } from '../../pf2e/skills'\r\nimport { sluggify } from '../../pf2e/utils'\r\nimport { getFeatFilterLevel, getFilterTraits, getSpellFilterLevel } from './shared'\r\n\r\nconst localize = subLocalize('interface.error.drop')\r\n\r\nexport async function onDropFeat(item, target, filter) {\r\n    if (!item.isOfType('feat')) return localize('notFeat')\r\n\r\n    const { search, drop } = filter\r\n\r\n    if (search.category?.length && !search.category.includes(item.category)) {\r\n        return localize.warn('wrongType', { types: localizeAll('featCategories', search.category) })\r\n    }\r\n\r\n    if (search.traits) {\r\n        const traits = getFilterTraits(search.traits)\r\n\r\n        if (traits?.selected.length) {\r\n            const testFn = traits.conjunction === 'or' ? 'some' : 'every'\r\n            const test = traits.selected[testFn](trait => Number(trait.not ?? false) - Number(item.traits.has(trait.value)))\r\n            if (!test) return localize.warn('wrongTraits')\r\n        }\r\n    }\r\n\r\n    if (search.skills?.length) {\r\n        const translatedSkills = getTranslatedSkills()\r\n        const prerequisites = item.system.prerequisites.value.map(prerequisite => prerequisite.value.toLocaleLowerCase())\r\n        const test = search.skills.some(skill =>\r\n            prerequisites.some(prerequisite => prerequisite.includes(skill) || prerequisite.includes(translatedSkills[skill]))\r\n        )\r\n        if (!test) return localize.warn('wrongSkill', { skills: localizeAll('skillList', search.skills) })\r\n    }\r\n\r\n    if (search.rarity?.length && !search.rarity.includes(item.system.traits.rarity)) {\r\n        return localize.warn('wrongRarity', { rarities: localizeAll('rarityTraits', search.rarity) })\r\n    }\r\n\r\n    if (search.source?.length && !search.source.includes(sluggify(item.system.source.value))) {\r\n        return localize.warn('wrongSource', { sources: search.source.join(', ') })\r\n    }\r\n\r\n    const level = getFeatFilterLevel(this.actor, search.level)\r\n    if (level) {\r\n        const itemLevel = item.level\r\n        if (itemLevel < level.min) return localize.warn('wrongLevelLow', { level: `min: ${level.min}` })\r\n        else if (itemLevel > level.max) return localize.warn('wrongLevelHigh', { level: `max: ${level.max}` })\r\n    }\r\n\r\n    if (drop) {\r\n        const args = this.dailyArgs[target.dataset.daily]\r\n        if (args) {\r\n            const result = await drop(item, args)\r\n            if (typeof result === 'object') {\r\n                if (result.data) return game.i18n.format(result.error, result.data)\r\n                else return game.i18n.localize(result.error)\r\n            } else if (result === false) {\r\n                return localize.warn('wrongCustom')\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropItem(item, target)\r\n}\r\n\r\nexport async function onDropSpell(item, target, filter) {\r\n    if (!item.isOfType('spell')) return localize('notSpell')\r\n\r\n    const { search, drop } = filter\r\n\r\n    if (search.category?.length) {\r\n        const categories = search.category\r\n            .map(x => game.i18n.localize(x === 'cantrip' ? 'PF2E.SpellCantripLabel' : CONFIG.PF2E.preparationType[x]))\r\n            .join(', ')\r\n\r\n        if (\r\n            (item.isCantrip && !search.category.includes('cantrip')) ||\r\n            (item.isFocusSpell && !search.category.includes('focus')) ||\r\n            (item.isRitual && !search.category.includes('ritual')) ||\r\n            (!item.isCantrip && !item.isFocusSpell && !item.isRitual && !search.category.includes('spell'))\r\n        ) {\r\n            return localize.warn('wrongCategory', { categories })\r\n        }\r\n    }\r\n\r\n    if (search.traits) {\r\n        const traits = getFilterTraits(search.traits)\r\n\r\n        if (traits?.selected.length) {\r\n            const testFn = traits.conjunction === 'or' ? 'some' : 'every'\r\n            const test = traits.selected[testFn](trait => Number(trait.not ?? false) - Number(item.traits.has(trait.value)))\r\n            if (!test) return localize.warn('wrongTraits')\r\n        }\r\n    }\r\n\r\n    if (search.traditions?.length) {\r\n        if (!search.traditions.some(tradition => item.traditions.has(tradition))) {\r\n            return localize.warn('wrongTradition', { traditions: localizeAll('magicTraditions', search.traditions) })\r\n        }\r\n    }\r\n\r\n    const level = getSpellFilterLevel(this.actor, search.level)\r\n    if (level?.length && !level.includes(item.level)) {\r\n        return localize.warn('wrongLevel', { levels: level.join(', ') })\r\n    }\r\n\r\n    if (search.school?.length && !search.school.includes(item.school)) {\r\n        return localize.warn('wrongSchool', { schools: localizeAll('magicSchools', search.school) })\r\n    }\r\n\r\n    if (search.rarity?.length && !search.rarity.includes(item.system.traits.rarity)) {\r\n        return localize.warn('wrongRarity', { rarities: localizeAll('rarityTraits', search.rarity) })\r\n    }\r\n\r\n    if (search.source?.length && !search.source.includes(sluggify(item.system.source.value))) {\r\n        return localize.warn('wrongSource', { sources: search.source.join(', ') })\r\n    }\r\n\r\n    if (drop) {\r\n        const args = this.dailyArgs[target.dataset.daily]\r\n        if (args) {\r\n            const result = await drop(item, args)\r\n            if (typeof result === 'object') {\r\n                if (result.data) return ui.notifications.warn(game.i18n.format(result.error, result.data))\r\n                else return ui.notifications.warn(game.i18n.localize(result.error))\r\n            } else if (result === false) {\r\n                return localize.warn('wrongCustom')\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropItem(item, target)\r\n}\r\n\r\nfunction localizeAll(config, list) {\r\n    const localized = list.map(key => game.i18n.localize(CONFIG.PF2E[config][key]))\r\n    return localized.join(', ')\r\n}\r\n\r\nexport function onDropItem(item, target) {\r\n    target.value = item.name\r\n    target.dataset.uuid = item.uuid\r\n    target.nextElementSibling.nextElementSibling.classList.remove('disabled')\r\n}\r\n", "import { createUpdateCollection, utils } from '../../api'\r\nimport { familiarUUID, getFamiliarPack } from '../../data/familiar'\r\nimport { getRations } from '../../data/rations'\r\nimport { getMaxSlotRankForStaves } from '../../data/staves'\r\nimport {\r\n    MODULE_ID,\r\n    chatUUID,\r\n    error,\r\n    fakeChatUUID,\r\n    getFlag,\r\n    getSetting,\r\n    hasLocalization,\r\n    localize,\r\n    subLocalize,\r\n} from '../../module'\r\nimport { sluggify } from '../../pf2e/utils'\r\nimport { getBestSpellcastingEntry, getNotExpendedPreparedSpellSlot, getSpellcastingEntriesSortBounds } from '../../spellcasting'\r\n\r\nconst REGEX_RANKS = ['cantrips?', '1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'].join('|')\r\n\r\nexport async function processData() {\r\n    const actor = this.actor\r\n    const dailies = this.dailies\r\n    const fields = getFields.call(this)\r\n    const addItems = []\r\n    const addRules = new Map()\r\n    const [updateItems, updateItem] = createUpdateCollection()\r\n    const flags = {}\r\n    const msg = subLocalize('message')\r\n\r\n    let addedSpells = false\r\n    let message = ''\r\n\r\n    const getRules = item => {\r\n        const id = item.id\r\n        const existing = addRules.get(id)\r\n        if (existing) return existing\r\n\r\n        const rules = deepClone(item._source.system.rules)\r\n\r\n        for (let i = rules.length - 1; i >= 0; i--) {\r\n            if (MODULE_ID in rules[i]) rules.splice(i, 1)\r\n        }\r\n\r\n        addRules.set(id, rules)\r\n        return rules\r\n    }\r\n\r\n    const messages = {\r\n        languages: { order: 80, messages: [] },\r\n        skills: { order: 70, messages: [] },\r\n        resistances: { order: 60, messages: [] },\r\n        feats: { order: 50, messages: [] },\r\n        spells: { order: 40, messages: [] },\r\n        scrolls: { order: 30, messages: [] },\r\n    }\r\n\r\n    const messageObj = {\r\n        add: (group, options) => {\r\n            messages[group] ??= { order: 0, messages: [] }\r\n            messages[group].messages.push(options)\r\n        },\r\n        addGroup: (group, order = 1, label) => {\r\n            messages[group] ??= { label, order, messages: [] }\r\n        },\r\n    }\r\n\r\n    if (actor.familiar && fields['dailies.familiar']) {\r\n        const familiar = actor.familiar\r\n        const pack = getFamiliarPack()\r\n        const abilities = []\r\n\r\n        // we remove old abilities\r\n        const ids = familiar.itemTypes.action.map(item => item.id)\r\n        if (ids.length) familiar.deleteEmbeddedDocuments('Item', ids)\r\n\r\n        messageObj.addGroup('familiar', 20)\r\n\r\n        for (const field of Object.values(fields['dailies.familiar'])) {\r\n            const value = field.value\r\n            const isCustom = value.includes('.')\r\n            const item = await (isCustom ? fromUuid(value) : pack.getDocument(value))\r\n            if (!item || !item.isOfType('action')) continue\r\n\r\n            const source = item.toObject()\r\n            if (source) {\r\n                abilities.push(source)\r\n                messageObj.add('familiar', { uuid: isCustom ? value : familiarUUID(value) })\r\n            }\r\n        }\r\n\r\n        if (abilities.length) familiar.createEmbeddedDocuments('Item', abilities)\r\n    }\r\n\r\n    if (fields['dailies.rations']?.rations.value === 'true') {\r\n        const rations = getRations(actor)\r\n\r\n        if (rations?.uses.value) {\r\n            const quantity = rations.quantity\r\n            const { value, max } = rations.uses\r\n\r\n            if (value <= 1) {\r\n                if (quantity <= 1) {\r\n                    rations.delete()\r\n                } else {\r\n                    updateItem({\r\n                        _id: rations.id,\r\n                        'system.quantity': Math.max(rations.quantity - 1, 0),\r\n                        'system.charges.value': max,\r\n                    })\r\n                }\r\n            } else {\r\n                updateItem({\r\n                    _id: rations.id,\r\n                    'system.charges.value': Math.max(value - 1, 0),\r\n                })\r\n            }\r\n\r\n            const remaining = (quantity - 1) * max + value\r\n            const name = remaining <= 1 ? fakeChatUUID(rations.name) : chatUUID(rations.uuid)\r\n\r\n            if (remaining <= 1) message += msg('rations.last', { name })\r\n            else if (remaining <= 3) message += msg('rations.almost', { name, nb: remaining - 1 })\r\n            else message += msg('rations.used', { name, nb: remaining - 1 })\r\n        }\r\n    }\r\n\r\n    if (fields['dailies.staff']) {\r\n        const staffField = fields['dailies.staff']\r\n        const staffID = staffField.staffID.value\r\n        const staff = actor.items.get(staffID)\r\n        const makeshift = staffField.makeshift?.value === 'true'\r\n        const maxStaffCharges = makeshift ? 0 : getMaxSlotRankForStaves(actor)\r\n\r\n        if (staff && (maxStaffCharges || makeshift)) {\r\n            const uuids = []\r\n\r\n            let rankMatch\r\n            const ranksRegex = new RegExp(\r\n                `<strong>\\\\s*(?<rank>(?:${REGEX_RANKS}))\\\\s*<\\/strong>.+?(?<uuids>@(?:UUID|Compendium)\\[[a-zA-Z0-9-.]+\\].+?)\\n`,\r\n                'gi'\r\n            )\r\n            while ((rankMatch = ranksRegex.exec(staff.description)) !== null) {\r\n                const rank = parseInt(rankMatch.groups.rank.trim()) || 0\r\n\r\n                let uuidMatch\r\n                const uuidRegex = /@(?<protocole>UUID|Compendium)\\[(?<uuid>[a-zA-Z0-9-.]+)\\]/g\r\n                while ((uuidMatch = uuidRegex.exec(rankMatch.groups.uuids)) !== null) {\r\n                    let uuid = uuidMatch.groups.uuid\r\n                    if (uuidMatch.groups.protocole === 'Compendium') {\r\n                        if (!uuid.startsWith('Compendium.')) uuid = `Compendium.${uuid}`\r\n                    }\r\n                    uuids.push({ rank, uuid })\r\n                }\r\n            }\r\n\r\n            if (uuids.length) {\r\n                let overcharge = 0\r\n\r\n                const expendedSpells = []\r\n                const expendedSlots = makeshift ? [1, 2, 3] : [1]\r\n\r\n                for (const i of expendedSlots) {\r\n                    const expendField = staffField[`expend${i}`]\r\n                    const spell = actor.items.get(expendField?.value)\r\n                    const rank = expendField?.optionData.rank\r\n                    const spellSlot = getNotExpendedPreparedSpellSlot(spell, rank)\r\n\r\n                    if (spellSlot) {\r\n                        const { entry, slotIndex } = spellSlot\r\n\r\n                        overcharge += +rank\r\n\r\n                        updateItem({ _id: entry.id, [`system.slots.slot${rank}.prepared.${slotIndex}.expended`]: true })\r\n\r\n                        expendedSpells.push({\r\n                            uuid: spell.uuid,\r\n                            name: spell.name,\r\n                            rank: rank,\r\n                        })\r\n                    }\r\n                }\r\n\r\n                const { ability, tradition, proficiency } = getBestSpellcastingEntry(actor) ?? {}\r\n\r\n                const sort = (() => {\r\n                    const { min, max } = getSpellcastingEntriesSortBounds(actor)\r\n                    return getSetting('staff-sort') === 'bottom' ? max + 10000 : min - 10000\r\n                })()\r\n\r\n                const entrySource = {\r\n                    type: 'spellcastingEntry',\r\n                    name: staff.name,\r\n                    sort,\r\n                    system: {\r\n                        ability,\r\n                        prepared: { value: 'charge' },\r\n                        showSlotlessLevels: { value: false },\r\n                        showUnpreparedSpells: { value: false },\r\n                        proficiency,\r\n                        tradition,\r\n                    },\r\n                    flags: {\r\n                        [MODULE_ID]: {\r\n                            type: 'staff',\r\n                            staff: {\r\n                                charges: maxStaffCharges + overcharge,\r\n                                staveID: staffID,\r\n                                overcharge,\r\n                                makeshift,\r\n                            },\r\n                        },\r\n                    },\r\n                }\r\n\r\n                addItems.push(entrySource)\r\n\r\n                await Promise.all(\r\n                    uuids.map(async ({ rank, uuid }) => {\r\n                        const source = await utils.createSpellSource(uuid)\r\n                        setProperty(source, `flags.${MODULE_ID}.entry`, { level: rank, type: 'staff' })\r\n                        addItems.push(source)\r\n                    })\r\n                )\r\n\r\n                messageObj.addGroup(\r\n                    'staff',\r\n                    45,\r\n                    localize(`staves.message.${overcharge ? 'withExpend' : 'noExpend'}`, {\r\n                        makeshift: makeshift ? localize('staves.makeshift') : '',\r\n                    })\r\n                )\r\n                messageObj.add('staff', { uuid: staff.uuid })\r\n                for (const { uuid, name, rank } of expendedSpells) {\r\n                    messageObj.add('staff', {\r\n                        uuid,\r\n                        label: `${name} (${utils.spellRankLabel(rank)})`,\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const { item, key, process } of dailies) {\r\n        if (!fields[key]) continue\r\n\r\n        const dailyArgs = this.dailyArgs[key]\r\n\r\n        try {\r\n            await process({\r\n                ...dailyArgs,\r\n                fields: fields[key],\r\n                messages: messageObj,\r\n                addItem: source => addItems.push(source),\r\n                updateItem,\r\n                addRule: (source, parent) => {\r\n                    source[MODULE_ID] = true\r\n                    getRules(parent ?? item).push(source)\r\n                },\r\n                addFeat: (source, parent) => {\r\n                    parent ??= item\r\n                    if (parent.isOfType('feat')) {\r\n                        const parentId = parent.id\r\n                        setProperty(source, 'flags.pf2e.grantedBy', { id: parentId, onDelete: 'cascade' })\r\n                        setProperty(source, `flags.${MODULE_ID}.grantedBy`, parentId)\r\n                    }\r\n                    addItems.push(source)\r\n                },\r\n                addSpell: (source, level) => {\r\n                    setProperty(source, `flags.${MODULE_ID}.entry`, { level: level, type: 'fallback' })\r\n                    addItems.push(source)\r\n                    addedSpells = true\r\n                },\r\n            })\r\n        } catch (err) {\r\n            error('error.unexpected')\r\n            console.error(err)\r\n            console.error(`The error occured during processing of ${key}`)\r\n        }\r\n    }\r\n\r\n    for (const [key, rowFields] of Object.entries(fields)) {\r\n        const rows = this.rows[key]\r\n        if (!rows) continue\r\n\r\n        for (const { row, type, input, value, uuid } of Object.values(rowFields)) {\r\n            if (type === 'random' || rows[row]?.save === false) continue\r\n\r\n            const flag = (flags[key] ??= {})\r\n\r\n            if (type === 'combo') {\r\n                flag[row] = { input: input === 'true', selected: value }\r\n            } else if (type === 'drop') {\r\n                flag[row] = { uuid: uuid, name: value }\r\n            } else {\r\n                flag[row] = value\r\n            }\r\n        }\r\n    }\r\n\r\n    for (const [id, rules] of addRules) {\r\n        updateItem({ _id: id, 'system.rules': rules })\r\n    }\r\n\r\n    if (addedSpells) {\r\n        const entrySource = {\r\n            type: 'spellcastingEntry',\r\n            name: localize('spellEntry.name'),\r\n            system: {\r\n                prepared: { value: 'innate' },\r\n                showSlotlessLevels: { value: false },\r\n                showUnpreparedSpells: { value: false },\r\n                proficiency: { value: 1, slug: actor.classDC?.slug || actor.class?.slug || undefined },\r\n            },\r\n            flags: {\r\n                [MODULE_ID]: {\r\n                    type: 'fallback',\r\n                },\r\n            },\r\n        }\r\n        addItems.push(entrySource)\r\n    }\r\n\r\n    for (const source of addItems) {\r\n        const alreadyTemp = getProperty(source, 'system.temporary') === true\r\n        if (!alreadyTemp) setProperty(source, `flags.${MODULE_ID}.temporary`, true)\r\n    }\r\n\r\n    if (addItems.length) {\r\n        const items = await actor.createEmbeddedDocuments('Item', addItems)\r\n\r\n        for (const item of items) {\r\n            if (item.isOfType('feat')) {\r\n                // we add itemGrants flag to the parent feat to have the cascade effect in the tab\r\n                const parentId = getFlag(item, 'grantedBy')\r\n                if (parentId) {\r\n                    const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                    const path = `flags.pf2e.itemGrants.${slug}`\r\n                    updateItem({ _id: parentId, [path]: { id: item.id, onDelete: 'detach' } })\r\n                }\r\n            } else if (item.isOfType('spellcastingEntry')) {\r\n                // we add all the newly created spells with 'addSpell' to this spellcasting entry\r\n                const entryType = getFlag(item, 'type')\r\n                const spells = items.filter(item => item.isOfType('spell') && getFlag(item, 'entry')?.type === entryType)\r\n                for (const spell of spells) {\r\n                    const { level } = getFlag(spell, 'entry')\r\n                    const data = { _id: spell.id, 'system.location.value': item.id }\r\n                    if (level !== undefined) data['system.location.heightenedLevel'] = level\r\n                    updateItem(data)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    await actor.update({ [`flags.${MODULE_ID}`]: { ...expandObject(flags), rested: false } })\r\n\r\n    if (updateItems.size) await actor.updateEmbeddedDocuments('Item', updateItems.contents)\r\n\r\n    message = parseMessages(messages, message)\r\n    message = message ? `${msg('changes')}<hr />${message}` : msg('noChanges')\r\n    ChatMessage.create({ content: message, speaker: ChatMessage.getSpeaker({ actor }) })\r\n}\r\n\r\nfunction parseMessages(messages, message) {\r\n    const msg = subLocalize('message')\r\n\r\n    const messageList = Object.entries(messages).map(([type, options]) => {\r\n        options.label ??= msg.has(type) ? msg(type) : msg('gained', { type })\r\n        return options\r\n    })\r\n    messageList.sort((a, b) => b.order - a.order)\r\n\r\n    for (const { label, messages } of messageList) {\r\n        if (!messages.length) continue\r\n\r\n        if (message) message += '<hr />'\r\n\r\n        if (label) message += `<p><strong>${label}</strong></p>`\r\n\r\n        for (let { uuid, selected, label, random } of messages) {\r\n            const key = `label.${label}`\r\n            label = label && hasLocalization(key) ? localize(key) : label || ''\r\n\r\n            message += '<p>'\r\n            message += uuid ? `${chatUUID(uuid, label)}` : `<strong>${label}</strong>`\r\n            if (selected) message += ` <span>${selected}</span>`\r\n            if (random) message += ' <i class=\"fa-solid fa-dice-d20\"></i>'\r\n            message += '</p>'\r\n        }\r\n    }\r\n\r\n    return message\r\n}\r\n\r\nfunction getFields() {\r\n    const elements = this.element.find('.window-content .content').find('input:not(.alert), select[data-type]').toArray()\r\n\r\n    const fields = {}\r\n\r\n    for (const element of elements) {\r\n        const field = {\r\n            ...element.dataset,\r\n            value: element.value,\r\n        }\r\n\r\n        if (field.type === 'combo' && field.input === 'false') {\r\n            const select = element.previousElementSibling\r\n            field.value = select.value\r\n            field.optionData = select.selectedOptions[0].dataset\r\n        }\r\n\r\n        if (field.type === 'select') {\r\n            field.optionData = element.selectedOptions[0].dataset\r\n        }\r\n\r\n        fields[field.daily] ??= {}\r\n        fields[field.daily][field.row] = field\r\n    }\r\n\r\n    return fields\r\n}\r\n", "import { utils } from '../api'\r\nimport { getDailies } from '../dailies'\r\nimport { getFamiliarPack } from '../data/familiar'\r\nimport { getRations } from '../data/rations'\r\nimport { findItemWithSourceId, getFlag, getSetting, subLocalize, templatePath } from '../module'\r\nimport { getStaves, isPF2eStavesActive } from '../data/staves'\r\nimport { getMaxSlotRankForStaves } from '../data/staves'\r\nimport { getPreparedSpells } from '../spellcasting'\r\nimport { getTemplate } from './interface/data'\r\nimport { onDropFeat, onDropItem, onDropSpell } from './interface/drop'\r\nimport { processData } from './interface/process'\r\nimport { parseFilter } from './interface/shared'\r\n\r\nconst localize = subLocalize('interface')\r\n\r\nconst STAFF_NEXUS = 'Compendium.pf2e.classfeatures.Item.Klb35AwlkNrq1gpB'\r\n\r\nexport class DailiesInterface extends Application {\r\n    constructor(actor, options) {\r\n        super(options)\r\n        this._actor = actor\r\n        this._dailies = []\r\n        this._dailyArgs = {}\r\n        this._saved = {}\r\n        this._children = {}\r\n        this._custom = {}\r\n        this._predicate = {}\r\n        this._rows = {}\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: 'pf2e-dailies-interface',\r\n            template: templatePath('interface.hbs'),\r\n            height: 'auto',\r\n            width: 400,\r\n            submitOnClose: false,\r\n            submitOnChange: false,\r\n            dragDrop: [\r\n                {\r\n                    dropSelector: '[data-droppable=\"true\"]',\r\n                },\r\n            ],\r\n        })\r\n    }\r\n\r\n    get actor() {\r\n        return this._actor\r\n    }\r\n\r\n    get dailies() {\r\n        return this._dailies\r\n    }\r\n\r\n    get dailyArgs() {\r\n        return this._dailyArgs\r\n    }\r\n\r\n    get saved() {\r\n        return this._saved\r\n    }\r\n\r\n    get children() {\r\n        return this._children\r\n    }\r\n\r\n    get custom() {\r\n        return this._custom\r\n    }\r\n\r\n    get predicate() {\r\n        return this._predicate\r\n    }\r\n\r\n    get rows() {\r\n        return this._rows\r\n    }\r\n\r\n    async getData(options) {\r\n        const templates = []\r\n        const actor = this._actor\r\n        this._dailies = getDailies(actor)\r\n\r\n        if (actor.familiar) {\r\n            const type = 'dailies.familiar'\r\n            const localize = subLocalize('label')\r\n            const nbAbilities = actor.attributes.familiarAbilities.value\r\n            const pack = getFamiliarPack()\r\n            const flags = getFlag(actor, type) ?? {}\r\n\r\n            const template = {\r\n                label: localize('familiar'),\r\n                rows: [],\r\n            }\r\n\r\n            const options = pack.index.map(({ _id, name }) => ({ value: _id, label: name }))\r\n\r\n            const customUUIDS = getSetting('familiar').split(',')\r\n            for (let uuid of customUUIDS) {\r\n                uuid = uuid.trim()\r\n                const item = await fromUuid(uuid)\r\n                if (item && item.isOfType('action')) options.push({ value: uuid, label: item.name })\r\n            }\r\n\r\n            options.sort((a, b) => a.label.localeCompare(b.label))\r\n\r\n            for (let index = 0; index < nbAbilities; index++) {\r\n                template.rows.push({\r\n                    label: localize('ability', { nb: index + 1 }),\r\n                    value: flags[`${index}`] ?? '',\r\n                    order: 100,\r\n                    options,\r\n                    data: {\r\n                        type: 'select',\r\n                        daily: type,\r\n                        row: index.toString(),\r\n                        unique: 'ability',\r\n                    },\r\n                })\r\n            }\r\n\r\n            if (template.rows.length) {\r\n                this._rows[type] = template.rows.reduce((rows, { data }) => {\r\n                    rows[data.row] = { save: true }\r\n                    return rows\r\n                }, {})\r\n                templates.push(template)\r\n            }\r\n        }\r\n\r\n        {\r\n            const rations = getRations(actor)\r\n            if (rations?.uses.value) {\r\n                const type = 'dailies.rations'\r\n                const row = 'rations'\r\n                const { value, max } = rations.uses\r\n                const quantity = rations.quantity\r\n                const remaining = (quantity - 1) * max + value\r\n                const last = remaining <= 1\r\n\r\n                const options = [\r\n                    {\r\n                        value: 'false',\r\n                        label: localize('rations.no'),\r\n                    },\r\n                    {\r\n                        value: 'true',\r\n                        label: last ? localize('rations.last') : localize('rations.yes', { nb: remaining }),\r\n                    },\r\n                ]\r\n\r\n                templates.push({\r\n                    label: rations.name,\r\n                    rows: [\r\n                        {\r\n                            label: '',\r\n                            order: 200,\r\n                            value: 'false',\r\n                            options,\r\n                            data: {\r\n                                type: 'select',\r\n                                daily: type,\r\n                                row: row,\r\n                            },\r\n                        },\r\n                    ],\r\n                })\r\n\r\n                this._rows[type] = { [row]: { save: false } }\r\n            }\r\n        }\r\n\r\n        if (!isPF2eStavesActive()) {\r\n            let staves, maxStaffCharges\r\n            if ((staves = getStaves(actor)).length && (maxStaffCharges = getMaxSlotRankForStaves(actor))) {\r\n                const type = 'dailies.staff'\r\n                const flags = getFlag(actor, type) ?? {}\r\n                const options = staves.map(staff => ({\r\n                    value: staff.id,\r\n                    label: staff.name,\r\n                }))\r\n                options.sort((a, b) => a.label.localeCompare(b.label))\r\n\r\n                const template = {\r\n                    label: localize('staves.prepare'),\r\n                    rows: [\r\n                        {\r\n                            label: localize('staves.staff'),\r\n                            value: flags.staffID ?? '',\r\n                            order: 100,\r\n                            options,\r\n                            data: {\r\n                                type: 'select',\r\n                                daily: type,\r\n                                row: 'staffID',\r\n                            },\r\n                        },\r\n                    ],\r\n                }\r\n\r\n                this._rows[type] = {\r\n                    staffID: { save: true },\r\n                }\r\n\r\n                const preparedSpells = getPreparedSpells(actor)\r\n                if (preparedSpells.length) {\r\n                    preparedSpells.sort((a, b) =>\r\n                        a.rank === b.rank ? a.spell.name.localeCompare(b.spell.name) : a.rank - b.rank\r\n                    )\r\n\r\n                    const options = preparedSpells.map(({ spell, rank, index }) => ({\r\n                        value: spell.id,\r\n                        label: `${spell.name} (${utils.spellRankLabel(rank)})`,\r\n                        data: {\r\n                            rank,\r\n                            unique: `${spell.id}.${rank}.${index}`,\r\n                        },\r\n                    }))\r\n\r\n                    options.unshift({ value: '', label: '' })\r\n\r\n                    const staffNexus = findItemWithSourceId(actor, STAFF_NEXUS, 'feat')\r\n                    const nbExpend = staffNexus && actor.level >= 8 ? (actor.level >= 16 ? 3 : 2) : 1\r\n\r\n                    if (staffNexus) {\r\n                        template.rows.push({\r\n                            label: localize('staves.type'),\r\n                            value: flags.makeshift ?? 'false',\r\n                            order: 100,\r\n                            options: [\r\n                                { value: 'false', label: 'Regular Staff' },\r\n                                { value: 'true', label: 'Makeshift Staff' },\r\n                            ],\r\n                            data: {\r\n                                type: 'select',\r\n                                daily: type,\r\n                                row: `makeshift`,\r\n                            },\r\n                        })\r\n\r\n                        this._rows[type].makeshift = { save: true }\r\n                    }\r\n\r\n                    for (let i = 1; i <= nbExpend; i++) {\r\n                        template.rows.push({\r\n                            label: localize('staves.expend'),\r\n                            value: '',\r\n                            order: 100,\r\n                            options,\r\n                            data: {\r\n                                type: 'select',\r\n                                daily: type,\r\n                                row: `expend${i}`,\r\n                                unique: 'expend',\r\n                            },\r\n                        })\r\n\r\n                        this._rows[type][`expend${i}`] = { save: false }\r\n                    }\r\n                }\r\n\r\n                templates.push(template)\r\n            }\r\n        }\r\n\r\n        for (const daily of this._dailies) {\r\n            try {\r\n                const template = await getTemplate.call(this, daily)\r\n                templates.push(template)\r\n            } catch (error) {\r\n                localize.error('error.unexpected')\r\n                console.error(error)\r\n                console.error(`The error occured during templating of ${daily.key}`)\r\n            }\r\n        }\r\n\r\n        const rows = []\r\n        const groups = []\r\n        for (const template of templates) {\r\n            if (template.rows.length > 1) groups.push(template)\r\n            else if (template.rows.length) rows.push(template)\r\n        }\r\n\r\n        rows.sort((a, b) => b.rows[0].order - a.rows[0].order)\r\n        groups.sort((a, b) => a.rows.length - b.rows.length)\r\n\r\n        return mergeObject(super.getData(options), {\r\n            i18n: localize,\r\n            dump: ({ value, placeholder, data }) => {\r\n                let msg = ''\r\n                if (value) msg += ` value=\"${value}\"`\r\n                if (placeholder) msg += ` placeholder=\"${placeholder}\"`\r\n                if (typeof data === 'object') {\r\n                    Object.entries(data).forEach(([key, value]) => (msg += ` data-${key}=\"${value}\"`))\r\n                }\r\n                if (msg) msg += ' '\r\n                return msg\r\n            },\r\n            rows,\r\n            groups,\r\n            hasDailies: rows.length || groups.length,\r\n        })\r\n    }\r\n\r\n    render(force, options) {\r\n        if (this._randomInterval) clearInterval(this._randomInterval)\r\n\r\n        if (this.element.find('select.random')) {\r\n            this._randomInterval = setInterval(() => {\r\n                const randoms = this.element.find('select.random')\r\n                randoms.each((_, select) => {\r\n                    select.selectedIndex = (select.selectedIndex + 1) % select.options.length\r\n                })\r\n            }, 2000)\r\n        }\r\n\r\n        return super.render(force, options)\r\n    }\r\n\r\n    close(options) {\r\n        if (this._randomInterval) clearInterval(this._randomInterval)\r\n        return super.close(options)\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html)\r\n\r\n        html.find('[data-action=clear]').on('click', this.#onClear.bind(this))\r\n        html.find('[data-action=accept]').on('click', this.#onAccept.bind(this))\r\n        html.find('[data-action=cancel]').on('click', this.#onCancel.bind(this))\r\n\r\n        html.find('.combo select').on('change', this.#onComboSelectChange.bind(this))\r\n        html.find('.combo input').on('change', this.#onComboInputChange.bind(this))\r\n\r\n        html.find('[data-action=search]').on('click', this.#onSearch.bind(this))\r\n\r\n        html.find('[data-action=alert]').on('click', this.#onAlert.bind(this))\r\n\r\n        const uniqueSelects = html.find('select[data-unique]')\r\n        uniqueSelects.on('change', event => this.#cleanUniqueSelects(event.currentTarget, true))\r\n        {\r\n            const processedUniques = []\r\n\r\n            for (const select of uniqueSelects) {\r\n                const { unique, daily } = select.dataset\r\n                const uniqueTag = `${daily}.${unique}`\r\n                if (processedUniques.includes(uniqueTag)) continue\r\n\r\n                processedUniques.push(uniqueTag)\r\n                this.#cleanUniqueSelects(select, false)\r\n            }\r\n        }\r\n    }\r\n\r\n    _canDragDrop(selector) {\r\n        return true\r\n    }\r\n\r\n    async _onDrop(event) {\r\n        const localize = subLocalize('interface.error.drop')\r\n        let target = event.target\r\n        if (target instanceof HTMLLabelElement) target = target.nextElementSibling\r\n\r\n        try {\r\n            const dataString = event.dataTransfer?.getData('text/plain')\r\n            const data = JSON.parse(dataString)\r\n\r\n            if (!data || data.type !== 'Item' || typeof data.uuid !== 'string') return localize.warn('wrongDataType')\r\n\r\n            const item = await fromUuid(data.uuid)\r\n            if (!item) return localize.warn('wrongDataType')\r\n\r\n            const filter = await this.#getfilterFromElement(target)\r\n            if (!filter) return onDropItem(item, target)\r\n\r\n            if (filter.type === 'feat') onDropFeat.call(this, item, target, filter)\r\n            else if (filter.type === 'spell') onDropSpell.call(this, item, target, filter)\r\n            else onDropItem(item, target)\r\n        } catch (error) {\r\n            localize.error('error.unexpected')\r\n            console.error(error)\r\n            console.error(`The error occured during _onDrop`)\r\n        }\r\n    }\r\n\r\n    async #onAlert(event) {\r\n        event.preventDefault()\r\n        this.#lock()\r\n\r\n        const data = event.currentTarget.dataset\r\n        const row = this.rows[data.daily][data.row]\r\n        const args = this.dailyArgs[data.daily]\r\n\r\n        let fixed\r\n        try {\r\n            fixed = await row.fix(args)\r\n        } catch (error) {\r\n            localize.error('error.unexpected')\r\n            console.error(error)\r\n            console.error(`The error occured during an alert fix of '${data.daily}'`)\r\n        }\r\n\r\n        this.#unlock()\r\n        if (fixed) this.render()\r\n    }\r\n\r\n    async #onSearch(event) {\r\n        event.preventDefault()\r\n        const filter = await this.#getfilterFromElement(event.currentTarget, true)\r\n        if (filter) game.pf2e.compendiumBrowser.openTab(filter.type, filter.search)\r\n        else game.pf2e.compendiumBrowser.render(true)\r\n    }\r\n\r\n    async #getfilterFromElement(element, parsed) {\r\n        const { daily, row } = element.dataset\r\n        const filter = this.rows[daily]?.[row]?.filter\r\n        const args = this.dailyArgs[daily]\r\n\r\n        if (!args || !filter) return\r\n\r\n        if (typeof filter.search === 'function') filter.search = await filter.search(args)\r\n\r\n        if (!parsed) return filter\r\n\r\n        return parseFilter.call(this, filter)\r\n    }\r\n\r\n    #onComboSelectChange(event) {\r\n        const select = event.currentTarget\r\n        const input = select.nextElementSibling\r\n        input.dataset.input = 'false'\r\n        input.value = select.options[select.selectedIndex].text\r\n    }\r\n\r\n    #onComboInputChange(event) {\r\n        const input = event.currentTarget\r\n        const select = input.previousElementSibling\r\n        const value = input.value.toLowerCase()\r\n        const options = Array.from(select.options).map(x => x.value)\r\n\r\n        const index = options.indexOf(value)\r\n        if (index !== -1) {\r\n            select.value = value\r\n            input.value = select.options[index].text\r\n            input.dataset.input = 'false'\r\n        } else {\r\n            select.value = ''\r\n            input.dataset.input = 'true'\r\n        }\r\n    }\r\n\r\n    #lock() {\r\n        this.element.addClass('disabled')\r\n    }\r\n\r\n    #unlock() {\r\n        this.element.removeClass('disabled')\r\n    }\r\n\r\n    #validate() {\r\n        const warns = []\r\n        const html = this.element\r\n\r\n        const emptyInputs = html.find('input').filter((_, input) => !input.value)\r\n        const alertInputs = html.find('input.alert')\r\n\r\n        if (emptyInputs.length) warns.push('error.empty')\r\n        if (alertInputs.length) warns.push('error.unattended')\r\n\r\n        html.find('label').removeClass('empty')\r\n\r\n        for (const input of emptyInputs) {\r\n            const parent = input.parentElement\r\n            const target = parent.classList.contains('combo') ? parent : input\r\n            target.previousElementSibling.classList.add('empty')\r\n        }\r\n\r\n        warns.forEach(x => localize.warn(x))\r\n\r\n        return !warns.length\r\n    }\r\n\r\n    async #onAccept(event) {\r\n        event.preventDefault()\r\n        if (!this.#validate()) return\r\n        this.#lock()\r\n        await processData.call(this)\r\n        this.close()\r\n    }\r\n\r\n    #onClear(event) {\r\n        event.preventDefault()\r\n        const target = $(event.currentTarget)\r\n        const input = target.prevAll('input').first()\r\n        input.val('')\r\n        input.attr('value', '')\r\n        input.attr('data-uuid', '')\r\n        target.addClass('disabled')\r\n    }\r\n\r\n    #onCancel(event) {\r\n        event.preventDefault()\r\n        this.close()\r\n    }\r\n\r\n    #cleanUniqueSelects(select, isTarget) {\r\n        const uniqueTag = select.dataset.unique\r\n        const children = isTarget\r\n            ? [select, ...getSiblings(select, `select[data-unique=\"${uniqueTag}\"]`)]\r\n            : select.parentElement.querySelectorAll(`:scope > select[data-unique=\"${uniqueTag}\"]`)\r\n\r\n        const uniqueOptions = new Set()\r\n\r\n        for (const child of children) {\r\n            let childIndex = child.selectedIndex\r\n            const childOptions = child.options\r\n\r\n            const optionUniqueValue = () => {\r\n                const option = childOptions[childIndex]\r\n                return option.dataset.unique ?? option.value\r\n            }\r\n\r\n            const optionExists = () => {\r\n                const value = optionUniqueValue()\r\n                return value && uniqueOptions.has(value)\r\n            }\r\n\r\n            while (optionExists() && childIndex > 0) {\r\n                childIndex -= 1\r\n            }\r\n\r\n            const maxIndex = child.options.length - 1\r\n            while (optionExists() && childIndex < maxIndex) {\r\n                childIndex += 1\r\n            }\r\n\r\n            if (optionExists()) continue\r\n\r\n            const finalValue = optionUniqueValue()\r\n            if (finalValue) uniqueOptions.add(finalValue)\r\n\r\n            if (child.selectedIndex !== childIndex) {\r\n                child.selectedIndex = childIndex\r\n            }\r\n        }\r\n\r\n        for (const child of children) {\r\n            const childIndex = child.selectedIndex\r\n            const childOptions = child.options\r\n\r\n            for (let index = 0; index < childOptions.length; index++) {\r\n                if (index === childIndex) continue\r\n\r\n                const option = childOptions[index]\r\n                option.disabled = uniqueOptions.has(option.dataset.unique ?? option.value)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSiblings(el, selector) {\r\n    const siblings = []\r\n\r\n    const parent = el.parentElement\r\n    if (!parent) return siblings\r\n\r\n    const children = selector ? parent.querySelectorAll(`:scope > ${selector}`) : parent.children\r\n    for (const child of children) {\r\n        if (child === el) continue\r\n        siblings.push(child)\r\n    }\r\n\r\n    return siblings\r\n}\r\n", "import { openDailiesInterface } from './api'\r\nimport { MODULE_ID, getChatMessageClass, getFlag, localize } from './module'\r\n\r\nexport function renderChatMessage(message, html) {\r\n    const flag = getFlag(message, 'isWatch')\r\n    if (!flag) return\r\n    html.find('.message-content button').on('click', () => openDailiesInterface())\r\n}\r\n\r\nexport function createWatchChatMessage() {\r\n    let content = `<div>${localize('message.dailiesRequest.content')}</div>`\r\n    content += `<button type=\"button\" style=\"margin-top: 8px;\">${localize('message.dailiesRequest.button')}</button>`\r\n    getChatMessageClass().create({ content, flags: { [MODULE_ID]: { isWatch: true } } })\r\n}\r\n", "import { isInstanceOf } from '../module'\r\n\r\nconst CANTRIP_DECK_ID = 'tLa4bewBhyqzi6Ow'\r\n\r\nconst scrollCompendiumIds = {\r\n    1: 'RjuupS9xyXDLgyIr',\r\n    2: 'Y7UD64foDbDMV9sx',\r\n    3: 'ZmefGBXGJF3CFDbn',\r\n    4: 'QSQZJ5BC3DeHv153',\r\n    5: 'tjLvRWklAylFhBHQ',\r\n    6: '4sGIy77COooxhQuC',\r\n    7: 'fomEZZ4MxVVK3uVu',\r\n    8: 'iPki3yuoucnj7bIt',\r\n    9: 'cFHomF3tty8Wi1e5',\r\n    10: 'o1XIHJ4MJyroAHfF',\r\n}\r\n\r\nconst wandCompendiumIds = {\r\n    1: 'UJWiN0K3jqVjxvKk',\r\n    2: 'vJZ49cgi8szuQXAD',\r\n    3: 'wrDmWkGxmwzYtfiA',\r\n    4: 'Sn7v9SsbEDMUIwrO',\r\n    5: '5BF7zMnrPYzyigCs',\r\n    6: 'kiXh4SUWKr166ZeM',\r\n    7: 'nmXPj9zuMRQBNT60',\r\n    8: 'Qs8RgNH6thRPv2jt',\r\n    9: 'Fgv722039TVM5JTc',\r\n}\r\n\r\nconst SPELL_CONSUMABLE_NAME_TEMPLATES = {\r\n    cantripDeck5: 'PF2E.Item.Physical.FromSpell.CantripDeck5',\r\n    scroll: 'PF2E.Item.Physical.FromSpell.Scroll',\r\n    wand: 'PF2E.Item.Physical.FromSpell.Wand',\r\n}\r\n\r\nconst MAGIC_TRADITIONS = new Set(['arcane', 'divine', 'occult', 'primal'])\r\n\r\nexport async function createConsumableFromSpell(\r\n    uuid,\r\n    type,\r\n    { heightenedLevel, mystified = false, temp = false, itemName, itemImg }\r\n) {\r\n    const spell = await fromUuid(uuid)\r\n    if (!spell) return null\r\n\r\n    heightenedLevel ??= spell.baseRank\r\n\r\n    if (!itemName || typeof itemName !== 'string') {\r\n        itemName ??= type\r\n    }\r\n\r\n    const pack = game.packs.find(p => p.collection === 'pf2e.equipment-srd')\r\n    const itemId = getIdForSpellConsumable(type, heightenedLevel)\r\n    const consumable = await pack?.getDocument(itemId ?? '')\r\n    if (!isInstanceOf(consumable, 'ConsumablePF2e')) return null\r\n\r\n    const consumableSource = { ...consumable.toObject(), _id: null }\r\n\r\n    const traits = consumableSource.system.traits\r\n    traits.value = Array.from(new Set([...traits.value, ...spell.traits]))\r\n    traits.rarity = spell.rarity\r\n    if (traits.value.includes('magical') && traits.value.some(trait => MAGIC_TRADITIONS.has(trait))) {\r\n        traits.value.splice(traits.value.indexOf('magical'), 1)\r\n    }\r\n    traits.value.sort()\r\n\r\n    consumableSource.name = getNameForSpellConsumable(itemName, spell.name, heightenedLevel)\r\n    const description = consumableSource.system.description.value\r\n\r\n    consumableSource.system.description.value = (() => {\r\n        const paragraphElement = document.createElement('p')\r\n        paragraphElement.append(spell.sourceId ? `@UUID[${spell.sourceId}]{${spell.name}}` : spell.description)\r\n\r\n        const containerElement = document.createElement('div')\r\n        const hrElement = document.createElement('hr')\r\n        containerElement.append(paragraphElement, hrElement)\r\n        hrElement.insertAdjacentHTML('afterend', description)\r\n\r\n        return containerElement.innerHTML\r\n    })()\r\n\r\n    if (type !== 'cantripDeck5') {\r\n        consumableSource.system.spell = spell.clone({ 'system.location.heightenedLevel': heightenedLevel }).toObject()\r\n    }\r\n\r\n    if (mystified) {\r\n        consumableSource.system.identification.status = 'unidentified'\r\n    }\r\n\r\n    if (typeof itemImg === 'string') {\r\n        consumableSource.img = itemImg\r\n    }\r\n\r\n    consumableSource.system.temporary = temp\r\n\r\n    return consumableSource\r\n}\r\n\r\nfunction getIdForSpellConsumable(type, heightenedLevel) {\r\n    switch (type) {\r\n        case 'cantripDeck5':\r\n            return CANTRIP_DECK_ID\r\n        case 'scroll':\r\n            return scrollCompendiumIds[heightenedLevel] ?? null\r\n        default:\r\n            return wandCompendiumIds[heightenedLevel] ?? null\r\n    }\r\n}\r\n\r\nfunction getNameForSpellConsumable(type, spellName, heightenedLevel) {\r\n    const templateId = SPELL_CONSUMABLE_NAME_TEMPLATES[type] || `${type} of {name} (Level {level})`\r\n    return game.i18n.format(templateId, { name: spellName, level: heightenedLevel })\r\n}\r\n", "import { DailiesInterface } from './apps/interface'\r\nimport { createWatchChatMessage } from './chat'\r\nimport { capitalize, getFlag, getSetting, localize, sequenceArray, warn } from './module'\r\nimport { createConsumableFromSpell } from './pf2e/spell'\r\n\r\nconst halfLevelString = 'max(1,floor(@actor.level/2))'\r\n\r\nconst RUNE_PROPERTY_KEYS = ['propertyRune1', 'propertyRune2', 'propertyRune3', 'propertyRune4']\r\n\r\nlet SKILLNAMES\r\nlet LANGUAGES\r\n\r\nexport const utils = {\r\n    // Skills\r\n    get skillNames() {\r\n        SKILLNAMES ??= Object.keys(CONFIG.PF2E.skillList).filter(s => s !== 'lore')\r\n        return SKILLNAMES.slice()\r\n    },\r\n    skillLabel: skill => {\r\n        return game.i18n.localize(CONFIG.PF2E.skillList[skill])\r\n    },\r\n    createSkillRuleElement: ({ skill, value, mode = 'upgrade', predicate }) => {\r\n        const rule = {\r\n            key: 'ActiveEffectLike',\r\n            mode,\r\n            path: `system.skills.${skill}.rank`,\r\n            value,\r\n        }\r\n        if (predicate && predicate.length) rule.predicate = predicate\r\n        return rule\r\n    },\r\n    createLoreSource: ({ name, rank }) => {\r\n        const data = {\r\n            type: 'lore',\r\n            img: 'systems/pf2e/icons/default-icons/lore.svg',\r\n            name,\r\n            system: { proficient: { value: rank } },\r\n        }\r\n        return data\r\n    },\r\n    // Languages\r\n    get languageNames() {\r\n        LANGUAGES ??= Object.keys(CONFIG.PF2E.languages)\r\n        return LANGUAGES.slice()\r\n    },\r\n    languageLabel: language => {\r\n        return game.i18n.localize(CONFIG.PF2E.languages[language])\r\n    },\r\n    createLanguageRuleElement: ({ language, mode = 'add', predicate }) => {\r\n        const rule = {\r\n            key: 'ActiveEffectLike',\r\n            mode,\r\n            path: 'system.traits.languages.value',\r\n            value: language,\r\n        }\r\n        if (predicate && predicate.length) rule.predicate = predicate\r\n        return rule\r\n    },\r\n    // resistances\r\n    resistanceLabel: (resistance, value) => {\r\n        let str = game.i18n.localize(`PF2E.Trait${capitalize(resistance)}`)\r\n        if (value) str += ` ${value}`\r\n        return str\r\n    },\r\n    createResistanceRuleElement: ({ type, value, predicate }) => {\r\n        if (value === 'half') value = halfLevelString\r\n        const rule = {\r\n            key: 'Resistance',\r\n            type,\r\n            value,\r\n        }\r\n        if (predicate && predicate.length) rule.predicate = predicate\r\n        return rule\r\n    },\r\n    // feats\r\n    createFeatSource: async uuid => {\r\n        const source = (await fromUuid(uuid))?.toObject()\r\n        if (!source) throw new Error(`An error occured while trying to create a feat source with uuid: ${uuid}`)\r\n        return source\r\n    },\r\n    // spells\r\n    createSpellScrollSource: async ({ uuid, level, itemName, itemImg }) => {\r\n        const source = await createConsumableFromSpell(uuid, 'scroll', { heightenedLevel: level, temp: true, itemName, itemImg })\r\n        if (!source) throw new Error(`An error occured while trying to create a spell scroll source with uuid: ${uuid}`)\r\n        return source\r\n    },\r\n    createWandSource: async ({ uuid, level, itemName, itemImg }) => {\r\n        const source = await createConsumableFromSpell(uuid, 'wand', { heightenedLevel: level, temp: true, itemName, itemImg })\r\n        if (!source) throw new Error(`An error occured while trying to create a wand source with uuid: ${uuid}`)\r\n        return source\r\n    },\r\n    createSpellSource: async uuid => {\r\n        const source = (await fromUuid(uuid))?.toObject()\r\n        if (!source) throw new Error(`An error occured while trying to create a spell source with uuid: ${uuid}`)\r\n        return source\r\n    },\r\n    spellRankLabel: rank => {\r\n        return game.i18n.format('PF2E.Item.Spell.Rank.Ordinal', { rank: ordinalString(rank) })\r\n    },\r\n    // Rule Elements\r\n    get halfLevelString() {\r\n        return halfLevelString\r\n    },\r\n    getChoiSetRuleSelection: (item, option) => {\r\n        const rules = item._source.system.rules\r\n        const rule = rules.find(rule => rule.key === 'ChoiceSet' && (!option || rule.rollOption === option))\r\n        return rule?.selection\r\n    },\r\n    //\r\n    proficiencyLabel: rank => {\r\n        return game.i18n.localize(CONFIG.PF2E.proficiencyLevels[rank])\r\n    },\r\n    randomOption: async options => {\r\n        const roll = (await new Roll(`1d${options.length}`).evaluate({ async: true })).total\r\n        const result = options[roll - 1]\r\n        if (typeof result === 'string') return result\r\n        return result.value\r\n    },\r\n    halfLevelValue: actor => Math.max(1, Math.floor(actor.level / 2)),\r\n    sequenceArray,\r\n    // equipment\r\n    damageLabel: damage => {\r\n        return game.i18n.localize(CONFIG.PF2E.damageTypes[damage])\r\n    },\r\n    weaponTraitLabel: trait => {\r\n        return game.i18n.localize(CONFIG.PF2E.weaponTraits[trait])\r\n    },\r\n    weaponPropertyRunesLabel: rune => {\r\n        const key = `PF2E.WeaponPropertyRune.${rune}.Name`\r\n        return game.i18n.localize(key)\r\n    },\r\n    hasFreePropertySlot: item => {\r\n        const potency = item.system.runes.potency\r\n        return potency > 0 && item.system.runes.property.length < potency\r\n    },\r\n    getFreePropertyRuneSlot: item => {\r\n        const potency = item.system.potencyRune.value\r\n        if (potency === null) return null\r\n\r\n        for (let i = 0; i < potency; i++) {\r\n            const property = RUNE_PROPERTY_KEYS[i]\r\n            if (!item.system[property].value) return property\r\n        }\r\n\r\n        return null\r\n    },\r\n    // actor\r\n    getPlayersActors: (member, ...types) => {\r\n        if (!types.length) types = ['creature']\r\n\r\n        const memberIsActor = member instanceof Actor\r\n\r\n        let actors = game.actors\r\n\r\n        if (memberIsActor && member.parties.size && getSetting('members')) {\r\n            actors = Array.from(member.parties ?? []).flatMap(p => p.members)\r\n        } else {\r\n            actors = actors.filter(a => a.hasPlayerOwner)\r\n        }\r\n\r\n        return actors.filter(a => a.isOfType(...types) && (!memberIsActor || a !== member))\r\n    },\r\n}\r\n\r\nexport function ordinalString(value) {\r\n    const pluralRules = new Intl.PluralRules(game.i18n.lang, { type: 'ordinal' })\r\n    const suffix = game.i18n.localize(`PF2E.OrdinalSuffixes.${pluralRules.select(value)}`)\r\n    return game.i18n.format('PF2E.OrdinalNumber', { value, suffix })\r\n}\r\n\r\nexport function openDailiesInterface(actor) {\r\n    if (!actor || !actor.isOfType('character') || !actor.isOwner) {\r\n        const controlled = canvas.tokens.controlled\r\n        actor = controlled.find(token => token.actor?.isOfType('character') && token.actor.isOwner)?.actor\r\n        if (!actor) actor = game.user.character\r\n    }\r\n\r\n    if (!actor || !actor.isOfType('character') || !actor.isOwner) return warn('error.noCharacterSelected')\r\n\r\n    if (getFlag(actor, 'rested') !== true) return warn('error.unrested')\r\n\r\n    new DailiesInterface(actor, { title: localize('interface.title', { name: actor.name }) }).render(true)\r\n}\r\n\r\nexport function requestDailies() {\r\n    if (!game.user.isGM) return warn('error.notGM')\r\n    createWatchChatMessage()\r\n}\r\n\r\nexport function createUpdateCollection() {\r\n    const collection = new Collection()\r\n    return [\r\n        collection,\r\n        data => {\r\n            const id = data._id\r\n            if (!id) return\r\n            const update = collection.get(id) ?? {}\r\n            collection.set(id, mergeObject(update, data))\r\n        },\r\n    ]\r\n}\r\n", "import { openDailiesInterface } from './api'\r\nimport { getSpellcastingEntryStaffData, isPF2eStavesActive, updateEntryCharges } from './data/staves'\r\nimport { localize } from './module'\r\n\r\nexport async function onPerformDailyCrafting() {\r\n    const entries = (await this.getCraftingEntries()).filter(e => e.isDailyPrep)\r\n    const alchemicalEntries = entries.filter(e => e.isAlchemical)\r\n    const reagentCost = alchemicalEntries.reduce((sum, entry) => sum + entry.reagentCost, 0)\r\n    const reagentValue = (this.system.resources.crafting.infusedReagents.value || 0) - reagentCost\r\n\r\n    if (reagentValue < 0) {\r\n        ui.notifications.warn(game.i18n.localize('PF2E.CraftingTab.Alerts.MissingReagents'))\r\n        return\r\n    } else {\r\n        await this.update({ 'system.resources.crafting.infusedReagents.value': reagentValue })\r\n    }\r\n\r\n    for (const entry of entries) {\r\n        for (const formula of entry.preparedCraftingFormulas) {\r\n            const itemSource = formula.item.toObject()\r\n            itemSource.system.quantity = formula.quantity\r\n            itemSource.system.temporary = true\r\n            itemSource.system.size = this.ancestry?.size === 'tiny' ? 'tiny' : 'med'\r\n\r\n            if (\r\n                entry.isAlchemical &&\r\n                (itemSource.type === 'consumable' || itemSource.type === 'weapon' || itemSource.type === 'equipment')\r\n            ) {\r\n                itemSource.system.traits.value.push('infused')\r\n            }\r\n\r\n            await this.addToInventory(itemSource)\r\n        }\r\n    }\r\n}\r\n\r\nexport function renderCharacterSheetPF2e(sheet, html) {\r\n    const actor = sheet.actor\r\n    if (!actor.isOwner) return\r\n\r\n    const small = html.find('aside .sidebar .hitpoints .hp-small')\r\n    small\r\n        .append(`<a class=\"roll-icon dailies\" data-tooltip=\"${localize('sheet.title')}\"><i class=\"fas fa-mug-saucer\"></i></a>`)\r\n        .find('.dailies')\r\n        .on('click', () => openDailiesInterface(actor))\r\n\r\n    if (!isPF2eStavesActive()) renderStavesEntries(html, actor)\r\n}\r\n\r\nfunction renderStavesEntries(html, actor) {\r\n    const tab = html.find('.sheet-body .sheet-content [data-tab=spellcasting] .spellcastingEntry-list')\r\n    const entries = tab.find('[data-container-type=spellcastingEntry]:not([data-container-id=rituals])')\r\n\r\n    for (const el of entries) {\r\n        const entryId = el.dataset.containerId\r\n        const entry = actor.spellcasting.get(entryId)\r\n        const staffData = getSpellcastingEntryStaffData(entry)\r\n        if (!staffData) continue\r\n\r\n        const charges = $(`<div class=\"pf2e-dailies-charges\"><label>${localize('staves.label')}</label></div>`)\r\n\r\n        const input = $(`<input type=\"number\" min=\"0\" max=\"${staffData.max}\" value=\"${staffData.charges}\">`)\r\n        input.on('change', event => onStaffChargesChange(event, actor))\r\n\r\n        const reset = $('<a><i class=\"fas fa-redo\"></i></a>')\r\n        reset.on('click', event => onStaffChargesReset(event, actor))\r\n\r\n        charges.append(input)\r\n        charges.append(reset)\r\n\r\n        el.querySelector('.spell-ability-data .statistic-values').after(charges[0])\r\n\r\n        const spells = el.querySelectorAll('.spell-list .spell:not([data-slot-level=\"0\"]')\r\n        for (const spell of spells) {\r\n            const cost = spell.dataset.slotLevel\r\n            if (staffData.canPayCost(cost)) continue\r\n            spell.dataset.expendedState = true\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEntryDataFromEvent(event, actor) {\r\n    const { itemId } = event.currentTarget.closest('.spellcasting-entry').dataset\r\n    return actor.spellcasting.get(itemId)\r\n}\r\n\r\nasync function onStaffChargesReset(event, actor) {\r\n    const entry = getEntryDataFromEvent(event, actor)\r\n    updateEntryCharges(entry, 9999)\r\n}\r\n\r\nasync function onStaffChargesChange(event, actor) {\r\n    const entry = getEntryDataFromEvent(event, actor)\r\n    updateEntryCharges(entry, event.currentTarget.valueAsNumber)\r\n}\r\n", "export const flexibility = [\r\n    \"/** @typedef {'flexibility' | 'improved'} FlexibilityRow */\",\r\n    \"/** @typedef {'improved'} FlexibilityChild */\",\r\n    '/** @typedef {[FlexibilityRow, {}, FlexibilityChild]} FlexibilityGenerics */',\r\n    '',\r\n    '/**',\r\n    ' * @param {FlexibilityRow} slug',\r\n    ' * @param {number} level',\r\n    ' * @param {FlexibilityChild} [child]',\r\n    ' */',\r\n    'function createRow(slug, level, child) {',\r\n    '    /** @type {DailyRowDrop<FlexibilityGenerics>} */',\r\n    '    const row = {',\r\n    \"        type: 'drop',\",\r\n    '        label: `PF2E.Level${level}`,',\r\n    '        slug,',\r\n    '        filter: {',\r\n    \"            type: 'feat',\",\r\n    '            search: {',\r\n    \"                category: ['class'],\",\r\n    '                traits: {',\r\n    \"                    values: ['fighter'],\",\r\n    '                },',\r\n    '                level,',\r\n    '            },',\r\n    '        },',\r\n    '    }',\r\n    '    if (child) row.childPredicate = [child]',\r\n    '    return row',\r\n    '}',\r\n    '',\r\n    '/** @type {Daily<FlexibilityGenerics>} */',\r\n    'const combatFlexibility = {',\r\n    \"    key: 'flexibility',\",\r\n    '    item: {',\r\n    \"        uuid: 'Compendium.pf2e.classfeatures.Item.8g6HzARbhfcgilP8', // Combat Flexibility\",\r\n    '    },',\r\n    '    children: [',\r\n    '        {',\r\n    \"            slug: 'improved',\",\r\n    \"            uuid: 'Compendium.pf2e.classfeatures.Item.W2rwudMNcAxs8VoX', // Improved Flexibility\",\r\n    '        },',\r\n    '    ],',\r\n    '    rows: [',\r\n    \"        createRow('flexibility', 8), //\",\r\n    \"        createRow('improved', 14, 'improved'),\",\r\n    '    ],',\r\n    '    process: async ({ utils, fields, addFeat, messages, children }) => {',\r\n    '        const uuid = fields.flexibility.uuid',\r\n    '        const source = await utils.createFeatSource(uuid)',\r\n    '        addFeat(source)',\r\n    \"        messages.add('feats', { uuid })\",\r\n    '',\r\n    '        if (children.improved) {',\r\n    '            const uuid = fields.improved.uuid',\r\n    '            const source = await utils.createFeatSource(uuid)',\r\n    '            addFeat(source, children.improved)',\r\n    \"            messages.add('feats', { uuid })\",\r\n    '        }',\r\n    '    },',\r\n    '}',\r\n    '',\r\n    'return combatFlexibility',\r\n].join('\\n')\r\n", "export const mind = [\r\n    \"/** @typedef {'alert' | 'smith' | 'mental' | 'runic' | 'advanced'} MindRow */\",\r\n    \"/** @typedef {'weapon' | 'mental' | 'runic' | 'advanced'} MindChild */\",\r\n    '/** @typedef {[MindRow, {}, MindChild]} MindGenerics */',\r\n    '',\r\n    \"const MIND_WEAPON_UUID = 'Compendium.pf2e-dailies.equipment.Item.VpmEozw21aRxX15P'\",\r\n    '',\r\n    'const WEAPON_BASE_TYPES = {',\r\n    \"    0: { die: 'd4', traits: ['finesse', 'agile'], usage: 'held-in-one-hand' },\",\r\n    \"    1: { die: 'd6', traits: ['finesse'], usage: 'held-in-one-hand' },\",\r\n    \"    2: { die: 'd8', traits: [], usage: 'held-in-one-hand' },\",\r\n    \"    3: { die: 'd10', traits: ['reach'], usage: 'held-in-two-hands' },\",\r\n    '}',\r\n    '',\r\n    'const WEAPON_GROUPS = /** @type {Record<WeaponDamage, string>} */ {',\r\n    \"    slashing: 'sword',\",\r\n    \"    piercing: 'spear',\",\r\n    \"    bludgeoning: 'club',\",\r\n    '}',\r\n    '',\r\n    \"const WEAPON_TRAITS = ['grapple', 'nonlethal', 'shove', 'trip', 'modular']\",\r\n    '',\r\n    'const WEAPON_DAMAGE_TYPES = Object.keys(WEAPON_GROUPS)',\r\n    '',\r\n    \"const WEAPON_RUNES = ['corrosive', 'disrupting', 'flaming', 'frost', 'shock', 'thundering']\",\r\n    '',\r\n    'const WEAPON_GREATER_RUNES = [',\r\n    \"    'anarchic',\",\r\n    \"    'axiomatic',\",\r\n    \"    'greaterCorrosive',\",\r\n    \"    'greaterDisrupting',\",\r\n    \"    'greaterFlaming',\",\r\n    \"    'greaterFrost',\",\r\n    \"    'greaterShock',\",\r\n    \"    'greaterThundering',\",\r\n    \"    'holy',\",\r\n    \"    'unholy',\",\r\n    ']',\r\n    '',\r\n    '/** @type {Daily<MindGenerics>} */',\r\n    'const mindSmith = {',\r\n    \"    key: 'mindsmith',\",\r\n    '    item: {',\r\n    \"        uuid: 'Compendium.pf2e.feats-srd.Item.juikoiIA0Jy8PboY', // Mind Smith Dedication\",\r\n    '    },',\r\n    '    children: [',\r\n    '        {',\r\n    \"            slug: 'weapon',\",\r\n    '            uuid: MIND_WEAPON_UUID, // Mind Weapon',\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'mental',\",\r\n    \"            uuid: 'Compendium.pf2e.feats-srd.Item.PccekOihIbRWdDky', // Malleable Mental Forge\",\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'runic',\",\r\n    \"            uuid: 'Compendium.pf2e.feats-srd.Item.2uQbQgz1AbjzcFSp', // Runic Mind Smithing\",\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'advanced',\",\r\n    \"            uuid: 'Compendium.pf2e.feats-srd.Item.fgnfXwFcn9jZlXGD', // Advanced Runic Mind Smithing\",\r\n    '        },',\r\n    '    ],',\r\n    '    rows: [',\r\n    '        {',\r\n    \"            type: 'alert',\",\r\n    \"            slug: 'alert',\",\r\n    \"            message: 'Missing Mind Weapon',\",\r\n    '            fix,',\r\n    \"            childPredicate: [{ not: 'weapon' }],\",\r\n    '        },',\r\n    '        {',\r\n    \"            type: 'select',\",\r\n    \"            slug: 'smith',\",\r\n    \"            label: 'Mind Smith',\",\r\n    '            options: WEAPON_DAMAGE_TYPES,',\r\n    '            labelizer: ({ utils }) => utils.damageLabel,',\r\n    \"            childPredicate: ['weapon'],\",\r\n    '        },',\r\n    '        {',\r\n    \"            type: 'select',\",\r\n    \"            slug: 'mental',\",\r\n    \"            label: 'Mental Forge',\",\r\n    '            options: WEAPON_TRAITS,',\r\n    '            labelizer: ({ utils }) => utils.weaponTraitLabel,',\r\n    \"            childPredicate: ['weapon', 'mental'],\",\r\n    '        },',\r\n    '        {',\r\n    \"            type: 'select',\",\r\n    \"            slug: 'runic',\",\r\n    \"            label: 'Runic Smithing',\",\r\n    '            options: WEAPON_RUNES,',\r\n    '            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,',\r\n    \"            childPredicate: ['weapon', 'runic', { not: 'advanced' }],\",\r\n    '            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),',\r\n    '        },',\r\n    '        {',\r\n    \"            type: 'select',\",\r\n    \"            slug: 'advanced',\",\r\n    \"            label: 'Runic Smithing',\",\r\n    '            options: WEAPON_GREATER_RUNES,',\r\n    '            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,',\r\n    \"            childPredicate: ['weapon', 'advanced'],\",\r\n    '            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),',\r\n    '        },',\r\n    '    ],',\r\n    '    process: ({ children, updateItem, fields, messages, item, utils }) => {',\r\n    '        const weapon = children.weapon',\r\n    '        if (!weapon) return',\r\n    '',\r\n    \"        messages.addGroup('mindsmith')\",\r\n    '',\r\n    '        const selected = /** @type {WeaponDamage} */ fields.smith.value',\r\n    \"        updateItem({ _id: weapon.id, 'system.damage.damageType': selected, 'system.group': WEAPON_GROUPS[selected] })\",\r\n    \"        messages.add('mindsmith', { selected: utils.damageLabel(selected), uuid: item.uuid, label: 'mindsmith' })\",\r\n    '',\r\n    '        if (children.mental) {',\r\n    '            const selected = fields.mental.value',\r\n    '            const traits = deepClone(weapon._source.system.traits?.value ?? [])',\r\n    '            if (!traits.includes(selected)) traits.push(selected)',\r\n    \"            updateItem({ _id: weapon.id, 'system.traits.value': traits })\",\r\n    \"            messages.add('mindsmith', {\",\r\n    '                selected: utils.weaponTraitLabel(selected),',\r\n    '                uuid: children.mental.uuid,',\r\n    \"                label: 'mentalforge',\",\r\n    '            })',\r\n    '        }',\r\n    '',\r\n    '        if ((children.advanced || children.runic) && utils.hasFreePropertySlot(weapon)) {',\r\n    '            const child = children.advanced ?? children.runic',\r\n    '            const freeSlot = utils.getFreePropertyRuneSlot(weapon)',\r\n    '            const field = fields.advanced ?? fields.runic',\r\n    '            const selected = field.value',\r\n    '',\r\n    '            if (!weapon.system.runes.property.includes(selected)) {',\r\n    '                updateItem({ _id: weapon.id, [`system.${freeSlot}.value`]: selected, [`flags.world.runeSlot`]: freeSlot })',\r\n    \"                messages.add('mindsmith', {\",\r\n    '                    selected: utils.weaponPropertyRunesLabel(selected),',\r\n    '                    uuid: child.uuid,',\r\n    \"                    label: 'runicmind',\",\r\n    '                })',\r\n    '            }',\r\n    '        }',\r\n    '    },',\r\n    '    rest: ({ item, sourceId, updateItem }) => {',\r\n    '        if (sourceId !== MIND_WEAPON_UUID) return',\r\n    '',\r\n    '        let traits = item._source.system.traits?.value ?? []',\r\n    '        traits = traits.filter(trait => !WEAPON_TRAITS.includes(trait))',\r\n    \"        updateItem({ _id: item.id, 'system.traits.value': traits })\",\r\n    '',\r\n    \"        const runeSlot = item.getFlag('world', 'runeSlot')\",\r\n    '        if (runeSlot) {',\r\n    '            updateItem({ _id: item.id, [`system.${runeSlot}.value`]: null, [`flags.world.-=runeSlot`]: true })',\r\n    '        }',\r\n    '    },',\r\n    '}',\r\n    '',\r\n    'const OPTIONS = {',\r\n    \"    0: 'A one-handed weapon that deals <strong>1d4</strong> damage and has the <strong>agile</strong> and <strong>finesse</strong> traits',\",\r\n    \"    1: 'A one-handed weapon that deals <strong>1d6</strong> damage and has the <strong>finesse</strong> trait',\",\r\n    \"    2: 'A one-handed weapon that deals <strong>1d8</strong> damage',\",\r\n    \"    3: 'A two-handed weapon that deals <strong>1d10</strong> damage and has the <strong>reach</strong> trait',\",\r\n    '}',\r\n    '',\r\n    '/** * @param {DailyValueArgs<MindGenerics>} args */',\r\n    'async function fix({ actor }) {',\r\n    '    let content =',\r\n    \"        `<p>This character doesn't have a mind weapon in their inventory.</p><p>Please select one of the following options to create one.</p>`\",\r\n    '',\r\n    '    for (const [key, label] of Object.entries(OPTIONS)) {',\r\n    \"        content += `<label><input type='radio' name='type' value='${key}'>${label}</label>`\",\r\n    '    }',\r\n    '',\r\n    '    const weapon = await Dialog.wait(',\r\n    '        {',\r\n    \"            title: 'Mind Weapon',\",\r\n    '            content,',\r\n    '            buttons: {',\r\n    '                yes: {',\r\n    \"                    icon: `<i class='fas fa-save'></i>`,\",\r\n    \"                    label: 'Accept',\",\r\n    '                    callback: onWeaponSelected,',\r\n    '                },',\r\n    '                no: {',\r\n    \"                    icon: `<i class='fas fa-times'></i>`,\",\r\n    \"                    label: 'Cancel',\",\r\n    '                    callback: () => null,',\r\n    '                },',\r\n    '            },',\r\n    '            close: () => null,',\r\n    '        },',\r\n    '        {},',\r\n    \"        { id: 'pf2e-dailies-weapon', width: 600 }\",\r\n    '    )',\r\n    '',\r\n    '    if (weapon) {',\r\n    \"        await actor.createEmbeddedDocuments('Item', [weapon])\",\r\n    '        return true',\r\n    '    }',\r\n    '',\r\n    '    return false',\r\n    '}',\r\n    '',\r\n    '/** @params {JQuery} html */',\r\n    'async function onWeaponSelected(html) {',\r\n    \"    const selection = html.find('[name=type]:checked').val()\",\r\n    '    if (!selection) {',\r\n    \"        ui.notifications.warn('You must select one weapon base type.')\",\r\n    '        return',\r\n    '    }',\r\n    '',\r\n    '    const weapon = (await fromUuid(MIND_WEAPON_UUID))?.toObject()',\r\n    '    if (!weapon) {',\r\n    \"        ui.notifications.warn(`The weapon couldn't be found in the compendium.`)\",\r\n    '        return',\r\n    '    }',\r\n    '',\r\n    '    const stats = WEAPON_BASE_TYPES[selection]',\r\n    '',\r\n    \"    setProperty(weapon, 'system.damage.die', stats.die)\",\r\n    \"    setProperty(weapon, 'system.traits.value', stats.traits.slice())\",\r\n    \"    setProperty(weapon, 'system.usage.value', stats.usage)\",\r\n    '',\r\n    '    return weapon',\r\n    '}',\r\n    '',\r\n    'return mindSmith',\r\n].join('\\n')\r\n", "export const savant = [\r\n    \"/** @typedef {'first' | 'second' | 'third' | 'fourth'} SavantRow */\",\r\n    '/** @typedef {Record<SavantRow, { level: number; condition: boolean }>} SavantCustom */',\r\n    \"/** @typedef {[SavantRow, SavantCustom, '']} SavantGenerics */\",\r\n    '',\r\n    \"const ROWS = /** @type {const} */ (['first', 'second', 'third', 'fourth'])\",\r\n    '',\r\n    '/**',\r\n    ' * @param {CharacterPF2e} actor',\r\n    ' * @param {MagicTradition} tradition',\r\n    ' */',\r\n    'function getSpellcastingTraditionDetails(actor, tradition) {',\r\n    '    let maxSlot = 1',\r\n    '    let maxTradition = 0',\r\n    '',\r\n    '    for (const entry of actor.spellcasting.regular) {',\r\n    \"        if ('pf2e-staves' in entry.flags) continue // we skip staff entries\",\r\n    '',\r\n    '        const slots = entry.system.slots',\r\n    '        for (const key in slots) {',\r\n    '            const slot = slots[key]',\r\n    '            if (slot.max) maxSlot = Math.max(maxSlot, Number(key.slice(4)))',\r\n    '        }',\r\n    '',\r\n    '        if (entry.tradition === tradition) maxTradition = Math.max(maxTradition, entry.rank)',\r\n    '    }',\r\n    '',\r\n    '    return { maxSlot: Math.min(maxSlot, 10), maxTradition }',\r\n    '}',\r\n    '',\r\n    '/** @type {Daily<SavantGenerics>} */',\r\n    'const scrollSavant = {',\r\n    \"    key: 'savant',\",\r\n    '    item: {',\r\n    \"        uuid: 'Compendium.pf2e.feats-srd.Item.u5DBg0LrBUKP0JsJ', // Scroll Savant\",\r\n    '    },',\r\n    '    prepare: ({ actor }) => {',\r\n    \"        const { maxSlot, maxTradition } = getSpellcastingTraditionDetails(actor, 'arcane')\",\r\n    '        return {',\r\n    '            first: { level: maxSlot - 2, condition: true },',\r\n    '            second: { level: maxSlot - 3, condition: true },',\r\n    '            third: { level: maxSlot - 4, condition: maxTradition >= 3 && maxSlot >= 5 },',\r\n    '            fourth: { level: maxSlot - 5, condition: maxTradition >= 4 && maxSlot >= 6 },',\r\n    '        }',\r\n    '    },',\r\n    '    rows: ROWS.map(rowName => {',\r\n    '        /** @type {DailyRowDrop<SavantGenerics>} */',\r\n    '        const row = {',\r\n    \"            type: 'drop',\",\r\n    '            slug: rowName,',\r\n    '            label: ({ custom }) => `PF2E.SpellLevel${custom[rowName].level}`,',\r\n    '            filter: {',\r\n    \"                type: 'spell',\",\r\n    '                search: ({ custom }) => ({',\r\n    \"                    category: ['spell'],\",\r\n    \"                    traditions: ['arcane'],\",\r\n    '                    level: custom[rowName].level,',\r\n    '                }),',\r\n    '            },',\r\n    '            condition: ({ custom }) => custom[rowName].condition,',\r\n    '        }',\r\n    '        return row',\r\n    '    }),',\r\n    '    process: async ({ utils, fields, custom, addItem, messages }) => {',\r\n    '        for (const field of Object.values(fields)) {',\r\n    '            const uuid = field.uuid',\r\n    '            const source = await utils.createSpellScrollSource({ uuid, level: custom[field.row].level })',\r\n    '            addItem(source)',\r\n    \"            messages.add('scrolls', { uuid, label: source.name })\",\r\n    '        }',\r\n    '    },',\r\n    '}',\r\n    '',\r\n    'return scrollSavant',\r\n].join('\\n')\r\n", "export const tome = [\r\n    '/** @typedef {typeof ROWS[number]} TomeRow */',\r\n    \"/** @typedef {'adept' | 'second' | 'intense' | 'paragon'} TomeChild */\",\r\n    '/** @typedef {Record<TomeRow, { rank: OneToFour; options: string[] }>} TomeCustom */',\r\n    '/** @typedef {[TomeRow, TomeCustom, TomeChild]} TomeGenerics */',\r\n    '',\r\n    \"const ROWS = /** @type {const} */ (['first', 'second'])\",\r\n    '',\r\n    \"/** @param {'adept' | 'paragon'} option */\",\r\n    'function createChildCondition(option) {',\r\n    '    /** @type { BaseDailyConditionFunction<TomeGenerics>} */',\r\n    '    const condition = ({ item, utils }) => {',\r\n    \"        return utils.getChoiSetRuleSelection(item, option) === 'tome'\",\r\n    '    }',\r\n    '    return condition',\r\n    '}',\r\n    '',\r\n    '/** @type {Daily<TomeGenerics>} */',\r\n    'const thaumaturgeTome = {',\r\n    \"    key: 'tome',\",\r\n    '    item: {',\r\n    \"        uuid: 'Compendium.pf2e.classfeatures.Item.MyN1cQgE0HsLF20e', // Tome\",\r\n    '    },',\r\n    '    children: [',\r\n    '        {',\r\n    \"            slug: 'adept',\",\r\n    \"            uuid: 'Compendium.pf2e.classfeatures.Item.Obm4ItMIIr0whYeO', // Implement Adept\",\r\n    \"            condition: createChildCondition('adept'),\",\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'second',\",\r\n    \"            uuid: 'Compendium.pf2e.classfeatures.Item.ZEUxZ4Ta1kDPHiq5', // Second Adept\",\r\n    \"            condition: createChildCondition('adept'),\",\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'intense',\",\r\n    \"            uuid: 'Compendium.pf2e.feats-srd.Item.yRRM1dsY6jakEMaC', // Intense Implement\",\r\n    '        },',\r\n    '        {',\r\n    \"            slug: 'paragon',\",\r\n    \"            uuid: 'Compendium.pf2e.classfeatures.Item.QEtgbY8N2V4wTbsI', // Implement Paragon\",\r\n    \"            condition: createChildCondition('paragon'),\",\r\n    '        },',\r\n    '    ],',\r\n    '    prepare: ({ utils, actor, children }) => {',\r\n    '        const skillNames = utils.skillNames',\r\n    '        const actorLevel = actor.level',\r\n    '        const actorSkills = /** @type {Record<SkillLongForm, { rank: ZeroToFour }>} */ (actor.skills)',\r\n    '',\r\n    '        /** @type {TomeCustom} */',\r\n    '        const custom = {',\r\n    '            first: { options: [], rank: 1 },',\r\n    '            second: { options: [], rank: 1 },',\r\n    '        }',\r\n    '',\r\n    '        // Implement Paragon',\r\n    '        if (children.paragon) {',\r\n    '            const skills = skillNames.filter(x => actorSkills[x].rank < 4)',\r\n    '            custom.first = { rank: 4, options: skills }',\r\n    '            custom.second = { rank: 4, options: skills }',\r\n    '        }',\r\n    '        // Intense Implement or Second Adept or Implement Adept',\r\n    '        else if (children.intense || children.adept || children.second) {',\r\n    '            const masters = skillNames.filter(x => actorSkills[x].rank < 3)',\r\n    '',\r\n    '            if (actorLevel >= 9) {',\r\n    '                custom.first = { rank: 3, options: masters }',\r\n    '                custom.second = { rank: 3, options: masters }',\r\n    '            } else {',\r\n    '                const experts = skillNames.filter(x => actorSkills[x].rank < 2)',\r\n    '                custom.first = { rank: 2, options: experts }',\r\n    '                custom.second = { rank: 3, options: masters }',\r\n    '            }',\r\n    '        }',\r\n    '        // Tome',\r\n    '        else {',\r\n    '            if (actorLevel >= 5) {',\r\n    '                const experts = skillNames.filter(x => actorSkills[x].rank < 2)',\r\n    '                custom.first = { rank: 2, options: experts }',\r\n    '                custom.second = { rank: 2, options: experts }',\r\n    '            } else if (actorLevel >= 3) {',\r\n    '                const trained = skillNames.filter(x => actorSkills[x].rank < 1)',\r\n    '                const experts = skillNames.filter(x => actorSkills[x].rank < 2)',\r\n    '                custom.first = { rank: 1, options: trained }',\r\n    '                custom.second = { rank: 2, options: experts }',\r\n    '            } else {',\r\n    '                const trained = skillNames.filter(x => actorSkills[x].rank < 1)',\r\n    '                custom.first = { rank: 1, options: trained }',\r\n    '                custom.second = { rank: 1, options: trained }',\r\n    '            }',\r\n    '        }',\r\n    '',\r\n    '        return custom',\r\n    '    },',\r\n    '    rows: ROWS.map(rowName => {',\r\n    '        /** @type {DailyRowCombo<TomeGenerics>} */',\r\n    '        const row = {',\r\n    \"            type: 'combo',\",\r\n    '            slug: rowName,',\r\n    '            label: ({ custom, utils }) => utils.proficiencyLabel(custom[rowName].rank),',\r\n    '            options: ({ custom }) => custom[rowName].options,',\r\n    '            labelizer: ({ utils }) => utils.skillLabel,',\r\n    '        }',\r\n    '        return row',\r\n    '    }),',\r\n    '    process: ({ custom, fields, utils, messages, addItem, addRule }) => {',\r\n    \"        messages.addGroup('tome', 65)\",\r\n    '',\r\n    '        for (const rowName of ROWS) {',\r\n    '            const rank = custom[rowName].rank',\r\n    '            let value = fields[rowName].value',\r\n    '',\r\n    \"            if (fields[rowName].input === 'true') {\",\r\n    '                const source = utils.createLoreSource({ name: value, rank })',\r\n    '                addItem(source)',\r\n    '            } else {',\r\n    '                const source = utils.createSkillRuleElement({ skill: value, value: rank })',\r\n    '                value = utils.skillLabel(value)',\r\n    '                addRule(source)',\r\n    '            }',\r\n    '',\r\n    \"            messages.add('tome', { label: utils.proficiencyLabel(rank), selected: value })\",\r\n    '        }',\r\n    '    },',\r\n    '}',\r\n    '',\r\n    'return thaumaturgeTome',\r\n].join('\\n')\r\n", "import { createFeatDaily } from '../data/feat'\r\nimport { createLanguageDaily } from '../data/language'\r\nimport { createResistancelDaily } from '../data/resistance'\r\nimport { createTrainedLoreDaily, createTrainedSkillDaily } from '../data/skill'\r\nimport { createSpellDaily } from '../data/spell'\r\nimport { EXT_VERSION } from '../main'\r\nimport { AsyncFunction, error, getSetting, setSetting, subLocalize, templatePath, warn } from '../module'\r\nimport { flexibility } from './custom/flexibility'\r\nimport { mind } from './custom/mind'\r\nimport { savant } from './custom/savant'\r\nimport { tome } from './custom/tome'\r\n\r\nconst localize = subLocalize('customs')\r\n\r\nconst TEMPLATES = ['default', 'trainedSkill', 'trainedLore', 'language', 'resistance', 'feat', 'spell']\r\nconst EXAMPLES = ['flexibility', 'savant', 'tome', 'mind']\r\n\r\nexport class DailyCustoms extends FormApplication {\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            id: 'pf2e-dailies-customs',\r\n            title: localize('title'),\r\n            template: templatePath('customs.hbs'),\r\n            submitOnChange: false,\r\n            submitOnClose: false,\r\n            closeOnSubmit: false,\r\n            scrollY: ['.left .list'],\r\n        })\r\n    }\r\n\r\n    async _updateObject(event, formData) {}\r\n\r\n    async getData(options) {\r\n        const customs = getSetting('customDailies')\r\n        const code = customs.find(custom => custom.key === this._selectedDaily)?.code\r\n        const template = this._selectedTemplate\r\n        const extension = game.modules.get('pf2e-dailies-ext')\r\n        const newVersion = extension?.active && isNewerVersion(EXT_VERSION, extension.version) ? { version: EXT_VERSION } : ''\r\n\r\n        return mergeObject(super.getData(options), {\r\n            i18n: localize,\r\n            template,\r\n            templates: TEMPLATES,\r\n            daily: this._selectedDaily,\r\n            code,\r\n            customs,\r\n            examples: EXAMPLES,\r\n            isExample: EXAMPLES.includes(template),\r\n            monaco: extension?.active,\r\n            newVersion,\r\n        })\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html)\r\n\r\n        this._monaco?.dispose()\r\n\r\n        const monaco = game.modules.get('pf2e-dailies-ext')?.api\r\n        const area = html.find('.code')[0]\r\n        if (monaco && area) {\r\n            const element = html.find('.monaco .placeholder')[0]\r\n            this._monaco = monaco.createEditor(element, area.value)\r\n            this._monaco.onDidChangeModelContent(debounce(() => (area.value = this._monaco.getValue()), 200))\r\n        } else {\r\n            this._monaco = null\r\n        }\r\n\r\n        html.find('[data-action=select-template]').on('change', this.#onSelectTemplate.bind(this))\r\n        html.find('[data-action=create-template]').on('click', this.#onCreateTemplate.bind(this))\r\n        html.find('[data-action=create-daily]').on('click', this.#onCreateDaily.bind(this))\r\n\r\n        html.find('.row[data-key]').on('click', this.#onSelectDaily.bind(this))\r\n        html.find('[data-action=delete-daily]').on('click', this.#onDeleteDaily.bind(this))\r\n\r\n        html.find('[data-action=save-code]').on('click', this.#onSaveCode.bind(this))\r\n    }\r\n\r\n    get code() {\r\n        const element = this.form.querySelector('.window-content .code')\r\n        return element?.value\r\n    }\r\n\r\n    async #onSaveCode(event) {\r\n        event.preventDefault()\r\n\r\n        const code = this.code\r\n        const selected = this._selectedDaily\r\n\r\n        if (!selected || !code) return\r\n\r\n        const customs = getSetting('customDailies')\r\n        const stipped = customs.filter(custom => custom.key !== selected)\r\n\r\n        try {\r\n            const fn = new AsyncFunction(code)\r\n            const daily = await fn()\r\n            const key = daily.key\r\n\r\n            if (typeof key !== 'string') return warn('invalidKey')\r\n            if (stipped.find(custom => custom.key === key)) return warn('duplicate')\r\n\r\n            const index = customs.findIndex(custom => custom.key === selected)\r\n            if (index < 0) return\r\n\r\n            customs.splice(index, 1, { key, code })\r\n            await setSetting('customDailies', customs)\r\n\r\n            localize.info('saved', { daily: key })\r\n            this._selectedDaily = key\r\n            this.render()\r\n        } catch (err) {\r\n            error('error.unexpected')\r\n            console.error(err)\r\n            console.error(`The error occured while testing the custom daily ${selected}`)\r\n        }\r\n    }\r\n\r\n    async #onDeleteDaily(event) {\r\n        event.preventDefault()\r\n        event.stopPropagation()\r\n\r\n        const remove = await Dialog.confirm({\r\n            title: localize('delete.title'),\r\n            content: localize('delete.content'),\r\n        })\r\n\r\n        if (!remove) return\r\n\r\n        const key = event.currentTarget.dataset.key\r\n        const customs = getSetting('customDailies').filter(custom => custom.key !== key)\r\n\r\n        await setSetting('customDailies', customs)\r\n        localize.info('deleted', { daily: key })\r\n        this.#onCreateDaily()\r\n    }\r\n\r\n    #onCreateDaily() {\r\n        this._selectedDaily = ''\r\n        this._selectedTemplate = 'default'\r\n        this.render()\r\n    }\r\n\r\n    #onSelectDaily(event) {\r\n        event.preventDefault()\r\n\r\n        this._selectedDaily = event.currentTarget.dataset.key\r\n        this.render()\r\n    }\r\n\r\n    async #onCreateTemplate(event) {\r\n        event.preventDefault()\r\n        const template = this._selectedTemplate\r\n\r\n        const customs = getSetting('customDailies')\r\n        const formData = new FormData(this.form)\r\n        const data = Object.fromEntries(formData)\r\n        const isExample = EXAMPLES.includes(template)\r\n        let { key, uuid, label } = data\r\n\r\n        if (isExample) {\r\n            key = template\r\n        } else if (!key || !uuid) {\r\n            return localize.warn('template.noEmpty')\r\n        }\r\n\r\n        if (customs.find(custom => custom.key === key)) return warn('error.duplicate')\r\n\r\n        let code\r\n\r\n        if (template === 'trainedSkill') {\r\n            const daily = createTrainedSkillDaily(key, uuid, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label }, 'SkillGenerics')\r\n        } else if (template === 'trainedLore') {\r\n            const daily = createTrainedLoreDaily(key, uuid, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label }, 'SkillGenerics')\r\n        } else if (template === 'language') {\r\n            const daily = createLanguageDaily(key, uuid, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label }, 'LanguageGenerics')\r\n        } else if (template === 'resistance') {\r\n            const resistance = simplyfiable(data.resistance)\r\n            const resistances = splitList(data.resistances)\r\n\r\n            if (resistance === '' || !resistances.length) return localize.warn('template.noEmpty')\r\n            if (typeof resistance === 'number' && resistance < 1) return localize.warn('template.badResistance')\r\n\r\n            const daily = createResistancelDaily(key, uuid, resistances, resistance, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label, resistance, resistances }, 'ResistanceGenerics')\r\n        } else if (template === 'feat') {\r\n            const traits = splitList(data.traits)\r\n            const filter = {\r\n                category: splitList(data.category),\r\n                level: simplyfiable(data.level) || { min: 0, max: 20 },\r\n            }\r\n            if (traits.length) filter.traits = traits\r\n            const daily = createFeatDaily(key, uuid, filter, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label }, 'FeatGenerics')\r\n        } else if (template === 'spell') {\r\n            const level = Number(data.level) || undefined\r\n            const traits = splitList(data.traits)\r\n            let levels = data.levels.split(',').map(x => x.trim())\r\n            if (levels.length === 1) {\r\n                levels = simplyfiable(levels[0])\r\n            } else {\r\n                levels = levels\r\n                    .filter(x => x)\r\n                    .map(x => Number(x))\r\n                    .filter(x => !isNaN(x))\r\n            }\r\n            const filter = {\r\n                category: splitList(data.category),\r\n                traditions: splitList(data.traditions),\r\n                level: levels || [],\r\n            }\r\n            if (traits.length) filter.traits = traits\r\n            const daily = createSpellDaily(key, uuid, filter, level, label)\r\n            code = this.#stringifyDaily(daily, { key, uuid, label, level }, 'SpellGenerics')\r\n        } else if (template === 'tome') {\r\n            code = tome\r\n        } else if (template === 'flexibility') {\r\n            code = flexibility\r\n        } else if (template === 'savant') {\r\n            code = savant\r\n        } else if (template === 'mind') {\r\n            code = mind\r\n        } else {\r\n            const daily = { key, label, item: { uuid }, rows: [], process: () => {} }\r\n            code = this.#stringifyDaily(daily, { key, uuid, label })\r\n        }\r\n\r\n        customs.push({ key, code })\r\n        await setSetting('customDailies', customs)\r\n\r\n        this._selectedDaily = key\r\n        this.render()\r\n    }\r\n\r\n    #stringifyDaily(daily, args, type) {\r\n        const placeholder = '____PLACEHOLDER____'\r\n        const fns = []\r\n\r\n        let str = JSON.stringify(\r\n            daily,\r\n            (_, value) => {\r\n                if (typeof value === 'function') {\r\n                    fns.push(value)\r\n                    return placeholder\r\n                }\r\n                return value\r\n            },\r\n            4\r\n        )\r\n\r\n        str = str.replace(new RegExp('\"' + placeholder + '\"', 'g'), () => {\r\n            const fn = fns.shift()?.toString()\r\n            return fn?.replace(/( {5,})/g, match => match.slice(4)) ?? ''\r\n        })\r\n\r\n        let strArgs = ''\r\n        for (const [key, value] of Object.entries(args)) {\r\n            if (typeof value === 'string') strArgs += `const ${key} = '${value}';\\n`\r\n            else if (typeof value === 'object') strArgs += `const ${key} = ${JSON.stringify(value)};\\n`\r\n            else strArgs += `const ${key} = ${value};\\n`\r\n        }\r\n\r\n        const typing = type ? `Daily<${type}>` : 'Daily'\r\n        return `${strArgs}\\n/** @type {${typing}} */\\nconst daily = ${str};\\n\\nreturn daily;`\r\n    }\r\n\r\n    #onSelectTemplate(event) {\r\n        event.preventDefault()\r\n\r\n        this._selectedDaily = ''\r\n        this._selectedTemplate = event.currentTarget.value\r\n\r\n        this.render()\r\n    }\r\n}\r\n\r\nfunction splitList(list) {\r\n    return list\r\n        .split(',')\r\n        .map(x => x.trim())\r\n        .filter(x => x)\r\n}\r\n\r\nfunction simplyfiable(value) {\r\n    if (typeof value === 'number') return value\r\n    value = value.trim()\r\n    if (value === 'level' || value === 'half') return value\r\n    const numbered = Number(value)\r\n    return isNaN(numbered) ? '' : numbered\r\n}\r\n", "import { createUpdateCollection } from './api'\r\nimport { getDailyFromSourceId } from './dailies'\r\nimport { MODULE_ID, getFlag, getSourceId, setFlag } from './module'\r\nimport { isPF2eStavesActive } from './data/staves'\r\nimport { sluggify } from './pf2e/utils'\r\n\r\nexport async function restForTheNight(actor) {\r\n    const removeItems = []\r\n    const [updateItems, updateItem] = createUpdateCollection()\r\n    const pf2eStavesActive = isPF2eStavesActive()\r\n\r\n    for (const item of actor.items) {\r\n        if (getFlag(item, 'temporary')) {\r\n            removeItems.push(item.id)\r\n\r\n            // we remove the itemGrants flag from the parent feat\r\n            if (item.isOfType('feat')) {\r\n                const parentId = getFlag(item, 'grantedBy')\r\n                if (parentId) {\r\n                    const slug = sluggify(item.name, { camel: 'dromedary' })\r\n                    const path = `flags.pf2e.itemGrants.-=${slug}`\r\n                    updateItem({ _id: parentId, [path]: true })\r\n                }\r\n            }\r\n\r\n            // we don't need to do more work because the item is being deleted\r\n            continue\r\n        }\r\n\r\n        // we remove the spellcasting entries from pf2e staves\r\n        if (!pf2eStavesActive && item.isOfType('spellcastingEntry') && item.system.prepared.value === 'charge') {\r\n            removeItems.push(item.id)\r\n            continue\r\n        }\r\n\r\n        const sourceId = getSourceId(item)\r\n\r\n        // We run the daily rest function if it exists\r\n        if (sourceId) {\r\n            const daily = getDailyFromSourceId(sourceId)\r\n            if (daily?.rest) {\r\n                await daily.rest({ item, sourceId, updateItem, actor })\r\n            }\r\n        }\r\n\r\n        // we clean temporary rule elements\r\n        const rules = deepClone(item._source.system.rules)\r\n        let modifiedRules = false\r\n        for (let i = rules.length - 1; i >= 0; i--) {\r\n            if (MODULE_ID in rules[i]) {\r\n                rules.splice(i, 1)\r\n                modifiedRules = true\r\n            }\r\n        }\r\n        if (modifiedRules) updateItem({ _id: item.id, 'system.rules': rules })\r\n    }\r\n\r\n    if (updateItems.size) await actor.updateEmbeddedDocuments('Item', updateItems.contents)\r\n    if (removeItems.length) await actor.deleteEmbeddedDocuments('Item', removeItems)\r\n\r\n    await setFlag(actor, 'rested', true)\r\n}\r\n", "import { onPerformDailyCrafting, renderCharacterSheetPF2e } from './actor'\r\nimport { openDailiesInterface, requestDailies, utils } from './api'\r\nimport { DailyCustoms } from './apps/custom'\r\nimport { renderChatMessage } from './chat'\r\nimport { BUILTINS_DAILIES, CUSTOM_DAILIES, checkCustomDaily, parseCustomDailies, prepareDailies } from './dailies'\r\nimport {\r\n    getSpellcastingEntryStaffData,\r\n    getSpellcastingEntryStaffFlags,\r\n    isPF2eStavesActive,\r\n    updateEntryCharges,\r\n} from './data/staves'\r\nimport { MODULE_ID, getSetting, registerSetting, registerSettingMenu, warn } from './module'\r\nimport { restForTheNight } from './rest'\r\nimport { onSpellcastingEntryCast } from './spellcasting'\r\n\r\nexport const EXT_VERSION = '1.3.0'\r\n\r\nconst SPELLCASTING_ENTRY_CAST = 'CONFIG.PF2E.Item.documentClasses.spellcastingEntry.prototype.cast'\r\nconst DAILY_CRAFTING = 'CONFIG.PF2E.Actor.documentClasses.character.prototype.performDailyCrafting'\r\n\r\nHooks.once('setup', () => {\r\n    registerSetting({\r\n        name: 'customDailies',\r\n        type: Array,\r\n        default: [],\r\n        config: false,\r\n        onChange: parseCustomDailies,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'familiar',\r\n        type: String,\r\n        default: '',\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'watch',\r\n        type: Boolean,\r\n        default: false,\r\n        onChange: enableWatchHook,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'members',\r\n        type: Boolean,\r\n        default: true,\r\n        scope: 'client',\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'staff-sort',\r\n        tupe: String,\r\n        default: 'top',\r\n        choices: ['top', 'bottom'],\r\n        scope: 'client',\r\n    })\r\n\r\n    registerSettingMenu({\r\n        name: 'customs',\r\n        type: DailyCustoms,\r\n    })\r\n\r\n    game.modules.get(MODULE_ID).api = {\r\n        openDailiesInterface: actor => openDailiesInterface(actor),\r\n        requestDailies,\r\n        getBuiltinDailies: () => deepClone(BUILTINS_DAILIES),\r\n        getCustomDailies: () => deepClone(CUSTOM_DAILIES),\r\n        prepareDailies,\r\n        checkCustomDaily,\r\n        getUtils: () => deepClone(utils),\r\n        getSpellcastingEntryStaffFlags,\r\n        getSpellcastingEntryStaffData,\r\n        updateEntryCharges,\r\n    }\r\n\r\n    if (getSetting('watch')) enableWatchHook(true)\r\n\r\n    if (!isPF2eStavesActive()) {\r\n        CONFIG.PF2E.preparationType.charge = 'Charge'\r\n        libWrapper.register(MODULE_ID, SPELLCASTING_ENTRY_CAST, onSpellcastingEntryCast)\r\n    }\r\n})\r\n\r\nHooks.once('ready', async () => {\r\n    if (isPF2eStavesActive()) {\r\n        warn('staves.conflict', true)\r\n    }\r\n\r\n    await parseCustomDailies()\r\n\r\n    if (!game.modules.get('lib-wrapper')?.active && game.user.isGM) {\r\n        warn('error.noLibwrapper', true)\r\n        return\r\n    }\r\n\r\n    libWrapper.register(MODULE_ID, DAILY_CRAFTING, onPerformDailyCrafting, 'OVERRIDE')\r\n})\r\n\r\nHooks.on('pf2e.restForTheNight', restForTheNight)\r\n\r\nHooks.on('renderCharacterSheetPF2e', renderCharacterSheetPF2e)\r\n\r\nfunction enableWatchHook(enabled) {\r\n    Hooks[enabled ? 'on' : 'off']('renderChatMessage', renderChatMessage)\r\n}\r\n"],
  "mappings": "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CA,8CACA,YACA,SACA,IACA,GACA,0BACJ,EAAE,KAAK;AAAA,CAAI,EC/DJ,IAAMC,GAAO,CAChB,gFACA,yEACA,0DACA,GACA,qFACA,GACA,8BACA,iFACA,wEACA,+DACA,wEACA,IACA,GACA,sEACA,yBACA,yBACA,2BACA,IACA,GACA,6EACA,GACA,yDACA,GACA,8FACA,GACA,iCACA,kBACA,mBACA,0BACA,2BACA,wBACA,sBACA,sBACA,2BACA,cACA,gBACA,IACA,GACA,qCACA,sBACA,wBACA,cACA,4FACA,SACA,kBACA,YACA,8BACA,qDACA,aACA,YACA,8BACA,iGACA,aACA,YACA,6BACA,8FACA,aACA,YACA,gCACA,uGACA,aACA,SACA,cACA,YACA,6BACA,6BACA,8CACA,mBACA,mDACA,aACA,YACA,8BACA,6BACA,mCACA,4CACA,2DACA,0CACA,aACA,YACA,8BACA,8BACA,qCACA,sCACA,gEACA,oDACA,aACA,YACA,8BACA,6BACA,uCACA,qCACA,wEACA,wEACA,8FACA,aACA,YACA,8BACA,gCACA,uCACA,6CACA,wEACA,sDACA,8FACA,aACA,SACA,8EACA,yCACA,8BACA,GACA,yCACA,GACA,0EACA,wHACA,oHACA,GACA,iCACA,mDACA,kFACA,oEACA,4EACA,0CACA,8DACA,8CACA,wCACA,iBACA,YACA,GACA,4FACA,gEACA,qEACA,4DACA,2CACA,GACA,sEACA,6HACA,8CACA,0EACA,wCACA,0CACA,qBACA,gBACA,YACA,SACA,kDACA,oDACA,GACA,+DACA,0EACA,sEACA,GACA,6DACA,0BACA,iHACA,YACA,SACA,IACA,GACA,oBACA,8IACA,kHACA,uEACA,iHACA,IACA,GACA,sDACA,kCACA,oBACA,iJACA,GACA,4DACA,8FACA,QACA,GACA,wCACA,YACA,oCACA,uBACA,yBACA,yBACA,2DACA,uCACA,kDACA,qBACA,wBACA,4DACA,uCACA,4CACA,qBACA,iBACA,iCACA,aACA,cACA,oDACA,QACA,GACA,oBACA,gEACA,sBACA,QACA,GACA,mBACA,IACA,GACA,+BACA,0CACA,+DACA,wBACA,yEACA,iBACA,QACA,GACA,oEACA,qBACA,mFACA,iBACA,QACA,GACA,iDACA,GACA,0DACA,uEACA,6DACA,GACA,oBACA,IACA,GACA,kBACJ,EAAE,KAAK;AAAA,CAAI,ECpOJ,IAAMC,GAAS,CAClB,sEACA,0FACA,iEACA,GACA,6EACA,GACA,MACA,kCACA,uCACA,MACA,+DACA,sBACA,2BACA,GACA,wDACA,8EACA,GACA,2CACA,qCACA,sCACA,8EACA,YACA,GACA,+FACA,QACA,GACA,8DACA,IACA,GACA,uCACA,yBACA,qBACA,cACA,oFACA,SACA,gCACA,6FACA,mBACA,8DACA,+DACA,2FACA,4FACA,YACA,SACA,kCACA,sDACA,wBACA,4BACA,6BACA,gFACA,wBACA,iCACA,6CACA,2CACA,8CACA,oDACA,sBACA,iBACA,oEACA,YACA,qBACA,UACA,yEACA,uDACA,sCACA,2GACA,8BACA,oEACA,YACA,SACA,IACA,GACA,qBACJ,EAAE,KAAK;AAAA,CAAI,EC1EJ,IAAMC,GAAO,CAChB,gDACA,yEACA,uFACA,kEACA,GACA,0DACA,GACA,6CACA,0CACA,+DACA,+CACA,wEACA,QACA,uBACA,IACA,GACA,qCACA,4BACA,mBACA,cACA,+EACA,SACA,kBACA,YACA,6BACA,8FACA,wDACA,aACA,YACA,8BACA,2FACA,wDACA,aACA,YACA,+BACA,4FACA,aACA,YACA,+BACA,gGACA,0DACA,aACA,SACA,iDACA,8CACA,yCACA,wGACA,GACA,oCACA,2BACA,+CACA,gDACA,YACA,GACA,+BACA,kCACA,6EACA,0DACA,2DACA,YACA,kEACA,4EACA,8EACA,GACA,qCACA,+DACA,gEACA,uBACA,kFACA,+DACA,gEACA,gBACA,YACA,kBACA,iBACA,qCACA,kFACA,+DACA,gEACA,4CACA,kFACA,kFACA,+DACA,gEACA,uBACA,kFACA,+DACA,gEACA,gBACA,YACA,GACA,wBACA,S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",
  "names": ["MODULE_ID", "AsyncFunction", "getSetting", "key", "__name", "setSetting", "value", "getSettingLocalizationPath", "path", "registerSetting", "options", "name", "choices", "choice", "registerSettingMenu", "templatePath", "x", "getFlag", "doc", "fallback", "setFlag", "localize", "args", "data", "hasLocalization", "localizePath", "subLocalize", "subKey", "fn", "warn", "info", "error", "hash", "getChatMessageClass", "notify", "str", "arg1", "arg2", "arg3", "type", "permanent", "getSourceId", "findItemWithSourceId", "actor", "sourceId", "itemTypes", "type", "item", "__name", "sequenceArray", "start", "end", "levels", "i", "capitalize", "str", "chatUUID", "uuid", "name", "fakeChatUUID", "isInstanceOf", "obj", "createSpellDaily", "key", "uuid", "filter", "level", "label", "addSpell", "utils", "fields", "messages", "source", "__name", "tricksterAce", "daily", "createSpellDaily", "row", "item", "castTime", "localizePath", "__name", "bladeAlly", "localize", "actor", "weapon", "children", "runes", "antipaladin", "evil", "good", "liberator", "master", "paladin", "spirit", "tyrant", "value", "localizeRune", "fields", "addRule", "messages", "weaponId", "rune", "name", "slugged", "match", "__name", "ICON", "ceremonialKnife", "actor", "weapon", "utils", "calculateRank", "fields", "item", "addItem", "messages", "uuid", "level", "source", "__name", "rows", "createScrollChain", "key", "uuids", "label", "createRow", "utils", "fields", "addItem", "messages", "field", "uuid", "level", "source", "__name", "slug", "minActorLevel", "child", "row", "actor", "createFeatDaily", "key", "uuid", "filter", "label", "utils", "fields", "addFeat", "messages", "source", "__name", "combatFlexibility", "createRow", "utils", "fields", "addFeat", "messages", "children", "uuid", "source", "slug", "level", "child", "row", "__name", "createLanguageDaily", "key", "uuid", "label", "actor", "utils", "actorLanguages", "x", "addRule", "fields", "messages", "value", "source", "__name", "MIND_WEAPON_UUID", "MALLEABLE_MENTAL_FORGE_UUID", "WEAPON_BASE_TYPES", "WEAPON_GROUPS", "WEAPON_TRAITS", "WEAPON_DAMAGE_TYPES", "WEAPON_RUNES", "WEAPON_GREATER_RUNES", "mindSmith", "localize", "fix", "utils", "nb", "children", "updateItem", "fields", "messages", "item", "weapon", "selected", "traits", "child", "freeSlot", "MODULE_ID", "sourceId", "actor", "findItemWithSourceId", "trait", "runeSlot", "getFlag", "subLocalize", "content", "key", "label", "onWeaponSelected", "__name", "html", "selection", "stats", "createResistancelDaily", "key", "uuid", "resistances", "resistance", "label", "random", "utils", "fields", "actor", "addRule", "messages", "type", "value", "rule", "__name", "effectUUID", "rootMagic", "actor", "utils", "a", "fields", "messages", "actorId", "KINETIC_ACTIVATION", "isPF2eStavesActive", "__name", "getSpellcastingEntryStaffFlags", "entry", "data", "getFlag", "getSpellcastingEntryStaffData", "staffData", "getMaxSlotRankForStaves", "spontaneousCharges", "actor", "charges", "slot", "cost", "updateEntryCharges", "value", "updatedValue", "setFlag", "getStaves", "type", "trait", "item", "traits", "maxCharges", "entries", "getValidSpellcastingList", "entryMaxCharges", "getSpellcastingEntryMaxSlotRank", "findItemWithSourceId", "classCharges", "onSpellcastingEntryCast", "wrapped", "args", "staffFlags", "getSpellcastingEntryStaffFlags", "actor", "warn", "spell", "level", "castRank", "updates", "spontaneousEntries", "entry", "useSpontaneous", "entryRankValue", "__name", "content", "localize", "utils", "entries", "index", "templatePath", "key", "hash", "html", "current", "MODULE_ID", "getValidSpellcastingList", "itemOnly", "innate", "focus", "getFlag", "getSpellcastingEntryMaxSlotRank", "maxSlot", "levelMaxSlot", "i", "getPreparedSpells", "spells", "rank", "data", "id", "prepared", "expended", "getNotExpendedPreparedSpellSlot", "_", "getBestSpellcastingEntry", "bestMod", "bestEntries", "mod", "returnedEntry", "ability", "tradition", "proficiency", "classAttr", "classAttrEntries", "bestCount", "bestEntry", "entryCount", "getPreparedCount", "slot", "getSpellcastingEntriesSortBounds", "min", "max", "scrollSavant", "actor", "maxSlot", "maxTradition", "getSpellcastingTraditionDetails", "rowName", "custom", "utils", "fields", "addItem", "messages", "field", "uuid", "source", "tradition", "entries", "getValidSpellcastingList", "entry", "entryMaxSlot", "getSpellcastingEntryMaxSlotRank", "__name", "createTrainedSkillDaily", "key", "uuid", "label", "actor", "utils", "actorSkills", "x", "fields", "addItem", "addRule", "messages", "value", "source", "__name", "createTrainedLoreDaily", "thaumaturgeTome", "createChildCondition", "utils", "actor", "children", "skillNames", "actorLevel", "actorSkills", "custom", "skills", "x", "masters", "experts", "trained", "rowName", "fields", "messages", "addItem", "addRule", "rank", "value", "source", "option", "item", "itemId", "__name", "DEPRECATED_CUSTOM_DAILIES", "BUILTINS_DAILIES", "thaumaturgeTome", "createTrainedSkillDaily", "createTrainedLoreDaily", "createLanguageDaily", "createResistancelDaily", "createFeatDaily", "combatFlexibility", "scrollSavant", "createScrollChain", "tricksterAce", "mindSmith", "bladeAlly", "rootMagic", "ceremonialKnife", "BUILTINS_UUIDS", "prepareDailies", "UUIDS", "dailies", "prefix", "uuids", "original", "daily", "keyWithPrefix", "uuid", "condition", "err", "error", "__name", "CUSTOM_DAILIES", "parseCustomDailies", "customs", "getSetting", "key", "code", "AsyncFunction", "checkCustomDaily", "CUSTOM_UUIDS", "warning", "warn", "getDailies", "actor", "item", "sourceId", "getSourceId", "entry", "index", "utils", "getDailyFromSourceId", "getFamiliarPack", "__name", "familiarUUID", "id", "RATION_UUID", "getRations", "actor", "findItemWithSourceId", "__name", "isObject", "value", "__name", "sluggify", "text", "options", "PredicatePF2e", "statements", "StatementValidator", "predicate", "options", "domain", "s", "#isTrue", "statement", "#testBinaryOp", "#testCompound", "operator", "left", "right", "domainArray", "getValues", "__name", "operand", "maybeNumber", "pattern", "values", "v", "leftValues", "rightValues", "l", "r", "subProp", "_binaryOperators", "isObject", "entries", "operands", "__privateGet", "__privateAdd", "templateOrders", "getTemplate", "children", "key", "item", "prepare", "label", "rows", "actor", "saved", "getFlag", "rowsObj", "childrenObj", "slug", "prepareArgs", "utils", "custom", "dailyArgs", "groupLabel", "getProcessedValue", "labeled", "hasLocalization", "localize", "predicates", "child", "template", "row", "type", "childPredicate", "condition", "save", "unique", "PredicatePF2e", "savedRow", "rowLabel", "value", "rowTemplate", "isComboRow", "isSelectRow", "isRandomRow", "tmp", "labelize", "capitalize", "isDropRow", "isAlerRow", "__name", "obj", "args", "getTranslatedSkills", "result", "key", "value", "__name", "getSimplifiableValue", "actor", "value", "fallback", "numbered", "__name", "parseFilter", "filter", "parseFeatFilter", "parseSpellFilter", "checkFilter", "selected", "checkbox", "x", "setTraits", "searchTraits", "dataTraits", "traits", "getFilterTraits", "search", "data", "level", "getSpellFilterLevel", "getFeatFilterLevel", "simplified", "sequenceArray", "localize", "subLocalize", "onDropFeat", "item", "target", "filter", "search", "drop", "localizeAll", "traits", "getFilterTraits", "testFn", "trait", "translatedSkills", "getTranslatedSkills", "prerequisites", "prerequisite", "skill", "sluggify", "level", "getFeatFilterLevel", "itemLevel", "args", "result", "onDropItem", "__name", "onDropSpell", "categories", "x", "tradition", "getSpellFilterLevel", "config", "list", "key", "REGEX_RANKS", "processData", "actor", "dailies", "fields", "getFields", "addItems", "addRules", "updateItems", "updateItem", "createUpdateCollection", "flags", "msg", "subLocalize", "addedSpells", "message", "getRules", "__name", "item", "id", "existing", "rules", "i", "MODULE_ID", "messages", "messageObj", "group", "options", "order", "label", "familiar", "pack", "getFamiliarPack", "abilities", "ids", "field", "value", "isCustom", "source", "familiarUUID", "rations", "getRations", "quantity", "max", "remaining", "name", "fakeChatUUID", "chatUUID", "staffField", "staffID", "staff", "makeshift", "maxStaffCharges", "getMaxSlotRankForStaves", "uuids", "rankMatch", "ranksRegex", "rank", "uuidMatch", "uuidRegex", "uuid", "overcharge", "expendedSpells", "expendedSlots", "expendField", "spell", "spellSlot", "getNotExpendedPreparedSpellSlot", "entry", "slotIndex", "ability", "tradition", "proficiency", "getBestSpellcastingEntry", "sort", "min", "getSpellcastingEntriesSortBounds", "getSetting", "entrySource", "utils", "localize", "key", "process", "dailyArgs", "parent", "parentId", "level", "err", "error", "rowFields", "rows", "row", "type", "input", "flag", "items", "getFlag", "path", "sluggify", "entryType", "spells", "data", "parseMessages", "messageList", "a", "b", "selected", "random", "hasLocalization", "elements", "element", "select", "localize", "subLocalize", "STAFF_NEXUS", "DailiesInterface", "actor", "options", "templatePath", "templates", "getDailies", "type", "nbAbilities", "pack", "getFamiliarPack", "flags", "getFlag", "template", "_id", "name", "customUUIDS", "getSetting", "uuid", "item", "a", "b", "index", "rows", "data", "rations", "getRations", "row", "value", "max", "remaining", "last", "isPF2eStavesActive", "staves", "maxStaffCharges", "getStaves", "getMaxSlotRankForStaves", "staff", "preparedSpells", "getPreparedSpells", "spell", "rank", "utils", "staffNexus", "findItemWithSourceId", "nbExpend", "i", "daily", "getTemplate", "error", "groups", "placeholder", "msg", "key", "force", "_", "select", "html", "#onClear", "#onAccept", "#onCancel", "#onComboSelectChange", "#onComboInputChange", "#onSearch", "#onAlert", "uniqueSelects", "event", "#cleanUniqueSelects", "processedUniques", "unique", "uniqueTag", "selector", "target", "dataString", "filter", "#getfilterFromElement", "onDropItem", "onDropFeat", "onDropSpell", "#lock", "args", "fixed", "#unlock", "element", "parsed", "parseFilter", "input", "x", "#validate", "warns", "emptyInputs", "alertInputs", "parent", "processData", "isTarget", "children", "getSiblings", "uniqueOptions", "child", "childIndex", "childOptions", "optionUniqueValue", "__name", "option", "optionExists", "maxIndex", "finalValue", "el", "siblings", "renderChatMessage", "message", "html", "getFlag", "openDailiesInterface", "__name", "createWatchChatMessage", "content", "localize", "getChatMessageClass", "MODULE_ID", "CANTRIP_DECK_ID", "scrollCompendiumIds", "wandCompendiumIds", "SPELL_CONSUMABLE_NAME_TEMPLATES", "MAGIC_TRADITIONS", "createConsumableFromSpell", "uuid", "type", "heightenedLevel", "mystified", "temp", "itemName", "itemImg", "spell", "pack", "p", "itemId", "getIdForSpellConsumable", "consumable", "isInstanceOf", "consumableSource", "traits", "trait", "getNameForSpellConsumable", "description", "paragraphElement", "containerElement", "hrElement", "__name", "spellName", "templateId", "halfLevelString", "RUNE_PROPERTY_KEYS", "SKILLNAMES", "LANGUAGES", "utils", "s", "skill", "value", "mode", "predicate", "rule", "name", "rank", "language", "resistance", "str", "capitalize", "type", "uuid", "source", "level", "itemName", "itemImg", "createConsumableFromSpell", "ordinalString", "item", "option", "options", "roll", "result", "actor", "sequenceArray", "damage", "trait", "rune", "key", "potency", "i", "property", "member", "types", "memberIsActor", "actors", "getSetting", "p", "a", "pluralRules", "suffix", "__name", "openDailiesInterface", "token", "warn", "getFlag", "DailiesInterface", "localize", "requestDailies", "createWatchChatMessage", "createUpdateCollection", "collection", "data", "id", "update", "onPerformDailyCrafting", "entries", "e", "reagentCost", "sum", "entry", "reagentValue", "formula", "itemSource", "__name", "renderCharacterSheetPF2e", "sheet", "html", "actor", "localize", "openDailiesInterface", "isPF2eStavesActive", "renderStavesEntries", "el", "entryId", "staffData", "getSpellcastingEntryStaffData", "charges", "input", "event", "onStaffChargesChange", "reset", "onStaffChargesReset", "spells", "spell", "cost", "getEntryDataFromEvent", "itemId", "updateEntryCharges", "flexibility", "mind", "savant", "tome", "localize", "subLocalize", "TEMPLATES", "EXAMPLES", "DailyCustoms", "templatePath", "event", "formData", "options", "customs", "getSetting", "code", "custom", "template", "extension", "newVersion", "EXT_VERSION", "html", "monaco", "area", "element", "#onSelectTemplate", "#onCreateTemplate", "#onCreateDaily", "#onSelectDaily", "#onDeleteDaily", "#onSaveCode", "selected", "stipped", "key", "AsyncFunction", "warn", "index", "setSetting", "err", "error", "data", "isExample", "uuid", "label", "daily", "createTrainedSkillDaily", "#stringifyDaily", "createTrainedLoreDaily", "createLanguageDaily", "resistance", "simplyfiable", "resistances", "splitList", "createResistancelDaily", "traits", "filter", "createFeatDaily", "level", "levels", "x", "createSpellDaily", "tome", "flexibility", "savant", "mind", "args", "type", "placeholder", "fns", "str", "_", "value", "match", "strArgs", "typing", "__name", "list", "numbered", "restForTheNight", "actor", "removeItems", "updateItems", "updateItem", "createUpdateCollection", "pf2eStavesActive", "isPF2eStavesActive", "item", "getFlag", "parentId", "path", "sluggify", "sourceId", "getSourceId", "daily", "getDailyFromSourceId", "rules", "modifiedRules", "i", "MODULE_ID", "setFlag", "__name", "EXT_VERSION", "SPELLCASTING_ENTRY_CAST", "DAILY_CRAFTING", "registerSetting", "parseCustomDailies", "enableWatchHook", "registerSettingMenu", "DailyCustoms", "MODULE_ID", "actor", "openDailiesInterface", "requestDailies", "BUILTINS_DAILIES", "CUSTOM_DAILIES", "prepareDailies", "checkCustomDaily", "utils", "getSpellcastingEntryStaffFlags", "getSpellcastingEntryStaffData", "updateEntryCharges", "getSetting", "isPF2eStavesActive", "onSpellcastingEntryCast", "warn", "onPerformDailyCrafting", "restForTheNight", "renderCharacterSheetPF2e", "enabled", "renderChatMessage", "__name"]
}
