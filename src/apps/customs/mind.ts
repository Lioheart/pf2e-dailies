export const mind = [
    "/** @typedef {'alert' | 'smith' | 'mental' | 'runic' | 'advanced'} MindRow */",
    "/** @typedef {'weapon' | 'mental' | 'runic' | 'advanced'} MindChild */",
    '/** @typedef {[MindRow, {}, MindChild]} MindGenerics */',
    '',
    "const MIND_WEAPON_UUID = 'Compendium.pf2e-dailies.equipment.VpmEozw21aRxX15P'",
    '',
    'const WEAPON_BASE_TYPES = {',
    "    0: { die: 'd4', traits: ['finesse', 'agile'], usage: 'held-in-one-hand' },",
    "    1: { die: 'd6', traits: ['finesse'], usage: 'held-in-one-hand' },",
    "    2: { die: 'd8', traits: [], usage: 'held-in-one-hand' },",
    "    3: { die: 'd10', traits: ['reach'], usage: 'held-in-two-hands' },",
    '}',
    '',
    'const WEAPON_GROUPS = /** @type {Record<WeaponDamage, string>} */ {',
    "    slashing: 'sword',",
    "    piercing: 'spear',",
    "    bludgeoning: 'club',",
    '}',
    '',
    "const WEAPON_TRAITS = ['grapple', 'nonlethal', 'shove', 'trip', 'modular']",
    '',
    'const WEAPON_DAMAGE_TYPES = Object.keys(WEAPON_GROUPS)',
    '',
    "const WEAPON_RUNES = ['corrosive', 'disrupting', 'flaming', 'frost', 'shock', 'thundering']",
    '',
    'const WEAPON_GREATER_RUNES = [',
    "    'anarchic',",
    "    'axiomatic',",
    "    'greaterCorrosive',",
    "    'greaterDisrupting',",
    "    'greaterFlaming',",
    "    'greaterFrost',",
    "    'greaterShock',",
    "    'greaterThundering',",
    "    'holy',",
    "    'unholy',",
    ']',
    '',
    '/** @type {Daily<MindGenerics>} */',
    'const mindSmith = {',
    "    key: 'mindsmith',",
    '    item: {',
    "        uuid: 'Compendium.pf2e.feats-srd.juikoiIA0Jy8PboY', // Mind Smith Dedication",
    '    },',
    '    children: [',
    '        {',
    "            slug: 'weapon',",
    '            uuid: MIND_WEAPON_UUID, // Mind Weapon',
    '        },',
    '        {',
    "            slug: 'mental',",
    "            uuid: 'Compendium.pf2e.feats-srd.PccekOihIbRWdDky', // Malleable Mental Forge",
    '        },',
    '        {',
    "            slug: 'runic',",
    "            uuid: 'Compendium.pf2e.feats-srd.2uQbQgz1AbjzcFSp', // Runic Mind Smithing",
    '        },',
    '        {',
    "            slug: 'advanced',",
    "            uuid: 'Compendium.pf2e.feats-srd.fgnfXwFcn9jZlXGD', // Advanced Runic Mind Smithing",
    '        },',
    '    ],',
    '    rows: [',
    '        {',
    "            type: 'alert',",
    "            slug: 'alert',",
    "            message: 'Missing Mind Weapon',",
    '            fix,',
    "            childPredicate: [{ not: 'weapon' }],",
    '        },',
    '        {',
    "            type: 'select',",
    "            slug: 'smith',",
    "            label: 'Mind Smith',",
    '            options: WEAPON_DAMAGE_TYPES,',
    '            labelizer: ({ utils }) => utils.damageLabel,',
    "            childPredicate: ['weapon'],",
    '        },',
    '        {',
    "            type: 'select',",
    "            slug: 'mental',",
    "            label: 'Mental Forge',",
    '            options: WEAPON_TRAITS,',
    '            labelizer: ({ utils }) => utils.weaponTraitLabel,',
    "            childPredicate: ['weapon', 'mental'],",
    '        },',
    '        {',
    "            type: 'select',",
    "            slug: 'runic',",
    "            label: 'Runic Smithing',",
    '            options: WEAPON_RUNES,',
    '            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,',
    "            childPredicate: ['weapon', 'runic', { not: 'advanced' }],",
    '            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),',
    '        },',
    '        {',
    "            type: 'select',",
    "            slug: 'advanced',",
    "            label: 'Runic Smithing',",
    '            options: WEAPON_GREATER_RUNES,',
    '            labelizer: ({ utils }) => utils.weaponPropertyRunesLabel,',
    "            childPredicate: ['weapon', 'advanced'],",
    '            condition: ({ children, utils }) => utils.hasFreePropertySlot(children.weapon),',
    '        },',
    '    ],',
    '    process: ({ children, updateItem, fields, messages, item, utils }) => {',
    '        const weapon = children.weapon',
    '        if (!weapon) return',
    '',
    "        messages.addGroup('mindsmith')",
    '',
    '        const selected = /** @type {WeaponDamage} */ fields.smith.value',
    "        updateItem({ _id: weapon.id, 'system.damage.damageType': selected, 'system.group': WEAPON_GROUPS[selected] })",
    "        messages.add('mindsmith', { selected: utils.damageLabel(selected), uuid: item.uuid, label: 'mindsmith' })",
    '',
    '        if (children.mental) {',
    '            const selected = fields.mental.value',
    '            const traits = deepClone(weapon._source.system.traits?.value ?? [])',
    '            if (!traits.includes(selected)) traits.push(selected)',
    "            updateItem({ _id: weapon.id, 'system.traits.value': traits })",
    "            messages.add('mindsmith', {",
    '                selected: utils.weaponTraitLabel(selected),',
    '                uuid: children.mental.uuid,',
    "                label: 'mentalforge',",
    '            })',
    '        }',
    '',
    '        if ((children.advanced || children.runic) && utils.hasFreePropertySlot(weapon)) {',
    '            const child = children.advanced ?? children.runic',
    '            const freeSlot = utils.getFreePropertyRuneSlot(weapon)',
    '            const field = fields.advanced ?? fields.runic',
    '            const selected = field.value',
    '',
    '            if (!weapon.system.runes.property.includes(selected)) {',
    '                updateItem({ _id: weapon.id, [`system.${freeSlot}.value`]: selected, [`flags.world.runeSlot`]: freeSlot })',
    "                messages.add('mindsmith', {",
    '                    selected: utils.weaponPropertyRunesLabel(selected),',
    '                    uuid: child.uuid,',
    "                    label: 'runicmind',",
    '                })',
    '            }',
    '        }',
    '    },',
    '    rest: ({ item, sourceId, updateItem }) => {',
    '        if (sourceId !== MIND_WEAPON_UUID) return',
    '',
    '        let traits = item._source.system.traits?.value ?? []',
    '        traits = traits.filter(trait => !WEAPON_TRAITS.includes(trait))',
    "        updateItem({ _id: item.id, 'system.traits.value': traits })",
    '',
    "        const runeSlot = item.getFlag('world', 'runeSlot')",
    '        if (runeSlot) {',
    '            updateItem({ _id: item.id, [`system.${runeSlot}.value`]: null, [`flags.world.-=runeSlot`]: true })',
    '        }',
    '    },',
    '}',
    '',
    'const OPTIONS = {',
    "    0: 'A one-handed weapon that deals <strong>1d4</strong> damage and has the <strong>agile</strong> and <strong>finesse</strong> traits',",
    "    1: 'A one-handed weapon that deals <strong>1d6</strong> damage and has the <strong>finesse</strong> trait',",
    "    2: 'A one-handed weapon that deals <strong>1d8</strong> damage',",
    "    3: 'A two-handed weapon that deals <strong>1d10</strong> damage and has the <strong>reach</strong> trait',",
    '}',
    '',
    '/** * @param {DailyValueArgs<MindGenerics>} args */',
    'async function fix({ actor }) {',
    '    let content =',
    "        `<p>This character doesn't have a mind weapon in their inventory.</p><p>Please select one of the following options to create one.</p>`",
    '',
    '    for (const [key, label] of Object.entries(OPTIONS)) {',
    "        content += `<label><input type='radio' name='type' value='${key}'>${label}</label>`",
    '    }',
    '',
    '    const weapon = await Dialog.wait(',
    '        {',
    "            title: 'Mind Weapon',",
    '            content,',
    '            buttons: {',
    '                yes: {',
    "                    icon: `<i class='fas fa-save'></i>`,",
    "                    label: 'Accept',",
    '                    callback: onWeaponSelected,',
    '                },',
    '                no: {',
    "                    icon: `<i class='fas fa-times'></i>`,",
    "                    label: 'Cancel',",
    '                    callback: () => null,',
    '                },',
    '            },',
    '            close: () => null,',
    '        },',
    '        {},',
    "        { id: 'pf2e-dailies-weapon', width: 600 }",
    '    )',
    '',
    '    if (weapon) {',
    "        await actor.createEmbeddedDocuments('Item', [weapon])",
    '        return true',
    '    }',
    '',
    '    return false',
    '}',
    '',
    '/** @params {JQuery} html */',
    'async function onWeaponSelected(html) {',
    "    const selection = html.find('[name=type]:checked').val()",
    '    if (!selection) {',
    "        ui.notifications.warn('You must select one weapon base type.')",
    '        return',
    '    }',
    '',
    '    const weapon = (await fromUuid(MIND_WEAPON_UUID))?.toObject()',
    '    if (!weapon) {',
    "        ui.notifications.warn(`The weapon couldn't be found in the compendium.`)",
    '        return',
    '    }',
    '',
    '    const stats = WEAPON_BASE_TYPES[selection]',
    '',
    "    setProperty(weapon, 'system.damage.die', stats.die)",
    "    setProperty(weapon, 'system.traits.value', stats.traits.slice())",
    "    setProperty(weapon, 'system.usage.value', stats.usage)",
    '',
    '    return weapon',
    '}',
    '',
    'return mindSmith',
].join('\n')
